// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings from Waybright
class WaybrightLibrary {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  WaybrightLibrary(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  WaybrightLibrary.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  int select(
    int __nfds,
    ffi.Pointer<struct_fd_set> __readfds,
    ffi.Pointer<struct_fd_set> __writefds,
    ffi.Pointer<struct_fd_set> __exceptfds,
    ffi.Pointer<struct_timeval> __timeout,
  ) {
    return _select(
      __nfds,
      __readfds,
      __writefds,
      __exceptfds,
      __timeout,
    );
  }

  late final _selectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Pointer<struct_fd_set>,
              ffi.Pointer<struct_fd_set>,
              ffi.Pointer<struct_fd_set>,
              ffi.Pointer<struct_timeval>)>>('select');
  late final _select = _selectPtr.asFunction<
      int Function(int, ffi.Pointer<struct_fd_set>, ffi.Pointer<struct_fd_set>,
          ffi.Pointer<struct_fd_set>, ffi.Pointer<struct_timeval>)>();

  int pselect(
    int __nfds,
    ffi.Pointer<struct_fd_set> __readfds,
    ffi.Pointer<struct_fd_set> __writefds,
    ffi.Pointer<struct_fd_set> __exceptfds,
    ffi.Pointer<struct_timespec> __timeout,
    ffi.Pointer<struct___sigset_t> __sigmask,
  ) {
    return _pselect(
      __nfds,
      __readfds,
      __writefds,
      __exceptfds,
      __timeout,
      __sigmask,
    );
  }

  late final _pselectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Pointer<struct_fd_set>,
              ffi.Pointer<struct_fd_set>,
              ffi.Pointer<struct_fd_set>,
              ffi.Pointer<struct_timespec>,
              ffi.Pointer<struct___sigset_t>)>>('pselect');
  late final _pselect = _pselectPtr.asFunction<
      int Function(
          int,
          ffi.Pointer<struct_fd_set>,
          ffi.Pointer<struct_fd_set>,
          ffi.Pointer<struct_fd_set>,
          ffi.Pointer<struct_timespec>,
          ffi.Pointer<struct___sigset_t>)>();

  int __fpclassify(
    double __value,
  ) {
    return ___fpclassify(
      __value,
    );
  }

  late final ___fpclassifyPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Double)>>('__fpclassify');
  late final ___fpclassify =
      ___fpclassifyPtr.asFunction<int Function(double)>();

  int __signbit(
    double __value,
  ) {
    return ___signbit(
      __value,
    );
  }

  late final ___signbitPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Double)>>('__signbit');
  late final ___signbit = ___signbitPtr.asFunction<int Function(double)>();

  int __isinf(
    double __value,
  ) {
    return ___isinf(
      __value,
    );
  }

  late final ___isinfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Double)>>('__isinf');
  late final ___isinf = ___isinfPtr.asFunction<int Function(double)>();

  int __finite(
    double __value,
  ) {
    return ___finite(
      __value,
    );
  }

  late final ___finitePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Double)>>('__finite');
  late final ___finite = ___finitePtr.asFunction<int Function(double)>();

  int __isnan(
    double __value,
  ) {
    return ___isnan(
      __value,
    );
  }

  late final ___isnanPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Double)>>('__isnan');
  late final ___isnan = ___isnanPtr.asFunction<int Function(double)>();

  int __iseqsig(
    double __x,
    double __y,
  ) {
    return ___iseqsig(
      __x,
      __y,
    );
  }

  late final ___iseqsigPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Double, ffi.Double)>>(
          '__iseqsig');
  late final ___iseqsig =
      ___iseqsigPtr.asFunction<int Function(double, double)>();

  int __issignaling(
    double __value,
  ) {
    return ___issignaling(
      __value,
    );
  }

  late final ___issignalingPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Double)>>(
          '__issignaling');
  late final ___issignaling =
      ___issignalingPtr.asFunction<int Function(double)>();

  double acos(
    double __x,
  ) {
    return _acos(
      __x,
    );
  }

  late final _acosPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('acos');
  late final _acos = _acosPtr.asFunction<double Function(double)>();

  double __acos(
    double __x,
  ) {
    return ___acos(
      __x,
    );
  }

  late final ___acosPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__acos');
  late final ___acos = ___acosPtr.asFunction<double Function(double)>();

  double asin(
    double __x,
  ) {
    return _asin(
      __x,
    );
  }

  late final _asinPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('asin');
  late final _asin = _asinPtr.asFunction<double Function(double)>();

  double __asin(
    double __x,
  ) {
    return ___asin(
      __x,
    );
  }

  late final ___asinPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__asin');
  late final ___asin = ___asinPtr.asFunction<double Function(double)>();

  double atan(
    double __x,
  ) {
    return _atan(
      __x,
    );
  }

  late final _atanPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('atan');
  late final _atan = _atanPtr.asFunction<double Function(double)>();

  double __atan(
    double __x,
  ) {
    return ___atan(
      __x,
    );
  }

  late final ___atanPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__atan');
  late final ___atan = ___atanPtr.asFunction<double Function(double)>();

  double atan2(
    double __y,
    double __x,
  ) {
    return _atan2(
      __y,
      __x,
    );
  }

  late final _atan2Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'atan2');
  late final _atan2 = _atan2Ptr.asFunction<double Function(double, double)>();

  double __atan2(
    double __y,
    double __x,
  ) {
    return ___atan2(
      __y,
      __x,
    );
  }

  late final ___atan2Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          '__atan2');
  late final ___atan2 =
      ___atan2Ptr.asFunction<double Function(double, double)>();

  double cos(
    double __x,
  ) {
    return _cos(
      __x,
    );
  }

  late final _cosPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('cos');
  late final _cos = _cosPtr.asFunction<double Function(double)>();

  double __cos(
    double __x,
  ) {
    return ___cos(
      __x,
    );
  }

  late final ___cosPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__cos');
  late final ___cos = ___cosPtr.asFunction<double Function(double)>();

  double sin(
    double __x,
  ) {
    return _sin(
      __x,
    );
  }

  late final _sinPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('sin');
  late final _sin = _sinPtr.asFunction<double Function(double)>();

  double __sin(
    double __x,
  ) {
    return ___sin(
      __x,
    );
  }

  late final ___sinPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__sin');
  late final ___sin = ___sinPtr.asFunction<double Function(double)>();

  double tan(
    double __x,
  ) {
    return _tan(
      __x,
    );
  }

  late final _tanPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('tan');
  late final _tan = _tanPtr.asFunction<double Function(double)>();

  double __tan(
    double __x,
  ) {
    return ___tan(
      __x,
    );
  }

  late final ___tanPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__tan');
  late final ___tan = ___tanPtr.asFunction<double Function(double)>();

  double cosh(
    double __x,
  ) {
    return _cosh(
      __x,
    );
  }

  late final _coshPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('cosh');
  late final _cosh = _coshPtr.asFunction<double Function(double)>();

  double __cosh(
    double __x,
  ) {
    return ___cosh(
      __x,
    );
  }

  late final ___coshPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__cosh');
  late final ___cosh = ___coshPtr.asFunction<double Function(double)>();

  double sinh(
    double __x,
  ) {
    return _sinh(
      __x,
    );
  }

  late final _sinhPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('sinh');
  late final _sinh = _sinhPtr.asFunction<double Function(double)>();

  double __sinh(
    double __x,
  ) {
    return ___sinh(
      __x,
    );
  }

  late final ___sinhPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__sinh');
  late final ___sinh = ___sinhPtr.asFunction<double Function(double)>();

  double tanh(
    double __x,
  ) {
    return _tanh(
      __x,
    );
  }

  late final _tanhPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('tanh');
  late final _tanh = _tanhPtr.asFunction<double Function(double)>();

  double __tanh(
    double __x,
  ) {
    return ___tanh(
      __x,
    );
  }

  late final ___tanhPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__tanh');
  late final ___tanh = ___tanhPtr.asFunction<double Function(double)>();

  double acosh(
    double __x,
  ) {
    return _acosh(
      __x,
    );
  }

  late final _acoshPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('acosh');
  late final _acosh = _acoshPtr.asFunction<double Function(double)>();

  double __acosh(
    double __x,
  ) {
    return ___acosh(
      __x,
    );
  }

  late final ___acoshPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__acosh');
  late final ___acosh = ___acoshPtr.asFunction<double Function(double)>();

  double asinh(
    double __x,
  ) {
    return _asinh(
      __x,
    );
  }

  late final _asinhPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('asinh');
  late final _asinh = _asinhPtr.asFunction<double Function(double)>();

  double __asinh(
    double __x,
  ) {
    return ___asinh(
      __x,
    );
  }

  late final ___asinhPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__asinh');
  late final ___asinh = ___asinhPtr.asFunction<double Function(double)>();

  double atanh(
    double __x,
  ) {
    return _atanh(
      __x,
    );
  }

  late final _atanhPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('atanh');
  late final _atanh = _atanhPtr.asFunction<double Function(double)>();

  double __atanh(
    double __x,
  ) {
    return ___atanh(
      __x,
    );
  }

  late final ___atanhPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__atanh');
  late final ___atanh = ___atanhPtr.asFunction<double Function(double)>();

  double exp(
    double __x,
  ) {
    return _exp(
      __x,
    );
  }

  late final _expPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('exp');
  late final _exp = _expPtr.asFunction<double Function(double)>();

  double __exp(
    double __x,
  ) {
    return ___exp(
      __x,
    );
  }

  late final ___expPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__exp');
  late final ___exp = ___expPtr.asFunction<double Function(double)>();

  double frexp(
    double __x,
    ffi.Pointer<ffi.Int> __exponent,
  ) {
    return _frexp(
      __x,
      __exponent,
    );
  }

  late final _frexpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Double, ffi.Pointer<ffi.Int>)>>('frexp');
  late final _frexp =
      _frexpPtr.asFunction<double Function(double, ffi.Pointer<ffi.Int>)>();

  double __frexp(
    double __x,
    ffi.Pointer<ffi.Int> __exponent,
  ) {
    return ___frexp(
      __x,
      __exponent,
    );
  }

  late final ___frexpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Double, ffi.Pointer<ffi.Int>)>>('__frexp');
  late final ___frexp =
      ___frexpPtr.asFunction<double Function(double, ffi.Pointer<ffi.Int>)>();

  double ldexp(
    double __x,
    int __exponent,
  ) {
    return _ldexp(
      __x,
      __exponent,
    );
  }

  late final _ldexpPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Int)>>(
          'ldexp');
  late final _ldexp = _ldexpPtr.asFunction<double Function(double, int)>();

  double __ldexp(
    double __x,
    int __exponent,
  ) {
    return ___ldexp(
      __x,
      __exponent,
    );
  }

  late final ___ldexpPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Int)>>(
          '__ldexp');
  late final ___ldexp = ___ldexpPtr.asFunction<double Function(double, int)>();

  double log(
    double __x,
  ) {
    return _log(
      __x,
    );
  }

  late final _logPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('log');
  late final _log = _logPtr.asFunction<double Function(double)>();

  double __log(
    double __x,
  ) {
    return ___log(
      __x,
    );
  }

  late final ___logPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__log');
  late final ___log = ___logPtr.asFunction<double Function(double)>();

  double log10(
    double __x,
  ) {
    return _log10(
      __x,
    );
  }

  late final _log10Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('log10');
  late final _log10 = _log10Ptr.asFunction<double Function(double)>();

  double __log10(
    double __x,
  ) {
    return ___log10(
      __x,
    );
  }

  late final ___log10Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__log10');
  late final ___log10 = ___log10Ptr.asFunction<double Function(double)>();

  double modf(
    double __x,
    ffi.Pointer<ffi.Double> __iptr,
  ) {
    return _modf(
      __x,
      __iptr,
    );
  }

  late final _modfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Double, ffi.Pointer<ffi.Double>)>>('modf');
  late final _modf =
      _modfPtr.asFunction<double Function(double, ffi.Pointer<ffi.Double>)>();

  double __modf(
    double __x,
    ffi.Pointer<ffi.Double> __iptr,
  ) {
    return ___modf(
      __x,
      __iptr,
    );
  }

  late final ___modfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Double, ffi.Pointer<ffi.Double>)>>('__modf');
  late final ___modf =
      ___modfPtr.asFunction<double Function(double, ffi.Pointer<ffi.Double>)>();

  double expm1(
    double __x,
  ) {
    return _expm1(
      __x,
    );
  }

  late final _expm1Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('expm1');
  late final _expm1 = _expm1Ptr.asFunction<double Function(double)>();

  double __expm1(
    double __x,
  ) {
    return ___expm1(
      __x,
    );
  }

  late final ___expm1Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__expm1');
  late final ___expm1 = ___expm1Ptr.asFunction<double Function(double)>();

  double log1p(
    double __x,
  ) {
    return _log1p(
      __x,
    );
  }

  late final _log1pPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('log1p');
  late final _log1p = _log1pPtr.asFunction<double Function(double)>();

  double __log1p(
    double __x,
  ) {
    return ___log1p(
      __x,
    );
  }

  late final ___log1pPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__log1p');
  late final ___log1p = ___log1pPtr.asFunction<double Function(double)>();

  double logb(
    double __x,
  ) {
    return _logb(
      __x,
    );
  }

  late final _logbPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('logb');
  late final _logb = _logbPtr.asFunction<double Function(double)>();

  double __logb(
    double __x,
  ) {
    return ___logb(
      __x,
    );
  }

  late final ___logbPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__logb');
  late final ___logb = ___logbPtr.asFunction<double Function(double)>();

  double exp2(
    double __x,
  ) {
    return _exp2(
      __x,
    );
  }

  late final _exp2Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('exp2');
  late final _exp2 = _exp2Ptr.asFunction<double Function(double)>();

  double __exp2(
    double __x,
  ) {
    return ___exp2(
      __x,
    );
  }

  late final ___exp2Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__exp2');
  late final ___exp2 = ___exp2Ptr.asFunction<double Function(double)>();

  double log2(
    double __x,
  ) {
    return _log2(
      __x,
    );
  }

  late final _log2Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('log2');
  late final _log2 = _log2Ptr.asFunction<double Function(double)>();

  double __log2(
    double __x,
  ) {
    return ___log2(
      __x,
    );
  }

  late final ___log2Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__log2');
  late final ___log2 = ___log2Ptr.asFunction<double Function(double)>();

  double pow(
    double __x,
    double __y,
  ) {
    return _pow(
      __x,
      __y,
    );
  }

  late final _powPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'pow');
  late final _pow = _powPtr.asFunction<double Function(double, double)>();

  double __pow(
    double __x,
    double __y,
  ) {
    return ___pow(
      __x,
      __y,
    );
  }

  late final ___powPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          '__pow');
  late final ___pow = ___powPtr.asFunction<double Function(double, double)>();

  double sqrt(
    double __x,
  ) {
    return _sqrt(
      __x,
    );
  }

  late final _sqrtPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('sqrt');
  late final _sqrt = _sqrtPtr.asFunction<double Function(double)>();

  double __sqrt(
    double __x,
  ) {
    return ___sqrt(
      __x,
    );
  }

  late final ___sqrtPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__sqrt');
  late final ___sqrt = ___sqrtPtr.asFunction<double Function(double)>();

  double hypot(
    double __x,
    double __y,
  ) {
    return _hypot(
      __x,
      __y,
    );
  }

  late final _hypotPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'hypot');
  late final _hypot = _hypotPtr.asFunction<double Function(double, double)>();

  double __hypot(
    double __x,
    double __y,
  ) {
    return ___hypot(
      __x,
      __y,
    );
  }

  late final ___hypotPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          '__hypot');
  late final ___hypot =
      ___hypotPtr.asFunction<double Function(double, double)>();

  double cbrt(
    double __x,
  ) {
    return _cbrt(
      __x,
    );
  }

  late final _cbrtPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('cbrt');
  late final _cbrt = _cbrtPtr.asFunction<double Function(double)>();

  double __cbrt(
    double __x,
  ) {
    return ___cbrt(
      __x,
    );
  }

  late final ___cbrtPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__cbrt');
  late final ___cbrt = ___cbrtPtr.asFunction<double Function(double)>();

  double ceil(
    double __x,
  ) {
    return _ceil(
      __x,
    );
  }

  late final _ceilPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('ceil');
  late final _ceil = _ceilPtr.asFunction<double Function(double)>();

  double __ceil(
    double __x,
  ) {
    return ___ceil(
      __x,
    );
  }

  late final ___ceilPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__ceil');
  late final ___ceil = ___ceilPtr.asFunction<double Function(double)>();

  double fabs(
    double __x,
  ) {
    return _fabs(
      __x,
    );
  }

  late final _fabsPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('fabs');
  late final _fabs = _fabsPtr.asFunction<double Function(double)>();

  double __fabs(
    double __x,
  ) {
    return ___fabs(
      __x,
    );
  }

  late final ___fabsPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__fabs');
  late final ___fabs = ___fabsPtr.asFunction<double Function(double)>();

  double floor(
    double __x,
  ) {
    return _floor(
      __x,
    );
  }

  late final _floorPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('floor');
  late final _floor = _floorPtr.asFunction<double Function(double)>();

  double __floor(
    double __x,
  ) {
    return ___floor(
      __x,
    );
  }

  late final ___floorPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__floor');
  late final ___floor = ___floorPtr.asFunction<double Function(double)>();

  double fmod(
    double __x,
    double __y,
  ) {
    return _fmod(
      __x,
      __y,
    );
  }

  late final _fmodPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'fmod');
  late final _fmod = _fmodPtr.asFunction<double Function(double, double)>();

  double __fmod(
    double __x,
    double __y,
  ) {
    return ___fmod(
      __x,
      __y,
    );
  }

  late final ___fmodPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          '__fmod');
  late final ___fmod = ___fmodPtr.asFunction<double Function(double, double)>();

  int isinf(
    double __value,
  ) {
    return _isinf(
      __value,
    );
  }

  late final _isinfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Double)>>('isinf');
  late final _isinf = _isinfPtr.asFunction<int Function(double)>();

  int finite(
    double __value,
  ) {
    return _finite(
      __value,
    );
  }

  late final _finitePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Double)>>('finite');
  late final _finite = _finitePtr.asFunction<int Function(double)>();

  double drem(
    double __x,
    double __y,
  ) {
    return _drem(
      __x,
      __y,
    );
  }

  late final _dremPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'drem');
  late final _drem = _dremPtr.asFunction<double Function(double, double)>();

  double __drem(
    double __x,
    double __y,
  ) {
    return ___drem(
      __x,
      __y,
    );
  }

  late final ___dremPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          '__drem');
  late final ___drem = ___dremPtr.asFunction<double Function(double, double)>();

  double significand(
    double __x,
  ) {
    return _significand(
      __x,
    );
  }

  late final _significandPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>(
          'significand');
  late final _significand =
      _significandPtr.asFunction<double Function(double)>();

  double __significand(
    double __x,
  ) {
    return ___significand(
      __x,
    );
  }

  late final ___significandPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>(
          '__significand');
  late final ___significand =
      ___significandPtr.asFunction<double Function(double)>();

  double copysign(
    double __x,
    double __y,
  ) {
    return _copysign(
      __x,
      __y,
    );
  }

  late final _copysignPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'copysign');
  late final _copysign =
      _copysignPtr.asFunction<double Function(double, double)>();

  double __copysign(
    double __x,
    double __y,
  ) {
    return ___copysign(
      __x,
      __y,
    );
  }

  late final ___copysignPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          '__copysign');
  late final ___copysign =
      ___copysignPtr.asFunction<double Function(double, double)>();

  double nan(
    ffi.Pointer<ffi.Char> __tagb,
  ) {
    return _nan(
      __tagb,
    );
  }

  late final _nanPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<ffi.Char>)>>(
          'nan');
  late final _nan =
      _nanPtr.asFunction<double Function(ffi.Pointer<ffi.Char>)>();

  double __nan(
    ffi.Pointer<ffi.Char> __tagb,
  ) {
    return ___nan(
      __tagb,
    );
  }

  late final ___nanPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<ffi.Char>)>>(
          '__nan');
  late final ___nan =
      ___nanPtr.asFunction<double Function(ffi.Pointer<ffi.Char>)>();

  int isnan(
    double __value,
  ) {
    return _isnan(
      __value,
    );
  }

  late final _isnanPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Double)>>('isnan');
  late final _isnan = _isnanPtr.asFunction<int Function(double)>();

  double j0(
    double arg0,
  ) {
    return _j0(
      arg0,
    );
  }

  late final _j0Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('j0');
  late final _j0 = _j0Ptr.asFunction<double Function(double)>();

  double __j0(
    double arg0,
  ) {
    return ___j0(
      arg0,
    );
  }

  late final ___j0Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__j0');
  late final ___j0 = ___j0Ptr.asFunction<double Function(double)>();

  double j1(
    double arg0,
  ) {
    return _j1(
      arg0,
    );
  }

  late final _j1Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('j1');
  late final _j1 = _j1Ptr.asFunction<double Function(double)>();

  double __j1(
    double arg0,
  ) {
    return ___j1(
      arg0,
    );
  }

  late final ___j1Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__j1');
  late final ___j1 = ___j1Ptr.asFunction<double Function(double)>();

  double jn(
    int arg0,
    double arg1,
  ) {
    return _jn(
      arg0,
      arg1,
    );
  }

  late final _jnPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Int, ffi.Double)>>(
          'jn');
  late final _jn = _jnPtr.asFunction<double Function(int, double)>();

  double __jn(
    int arg0,
    double arg1,
  ) {
    return ___jn(
      arg0,
      arg1,
    );
  }

  late final ___jnPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Int, ffi.Double)>>(
          '__jn');
  late final ___jn = ___jnPtr.asFunction<double Function(int, double)>();

  double y0(
    double arg0,
  ) {
    return _y0(
      arg0,
    );
  }

  late final _y0Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('y0');
  late final _y0 = _y0Ptr.asFunction<double Function(double)>();

  double __y0(
    double arg0,
  ) {
    return ___y0(
      arg0,
    );
  }

  late final ___y0Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__y0');
  late final ___y0 = ___y0Ptr.asFunction<double Function(double)>();

  double y1(
    double arg0,
  ) {
    return _y1(
      arg0,
    );
  }

  late final _y1Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('y1');
  late final _y1 = _y1Ptr.asFunction<double Function(double)>();

  double __y1(
    double arg0,
  ) {
    return ___y1(
      arg0,
    );
  }

  late final ___y1Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__y1');
  late final ___y1 = ___y1Ptr.asFunction<double Function(double)>();

  double yn(
    int arg0,
    double arg1,
  ) {
    return _yn(
      arg0,
      arg1,
    );
  }

  late final _ynPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Int, ffi.Double)>>(
          'yn');
  late final _yn = _ynPtr.asFunction<double Function(int, double)>();

  double __yn(
    int arg0,
    double arg1,
  ) {
    return ___yn(
      arg0,
      arg1,
    );
  }

  late final ___ynPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Int, ffi.Double)>>(
          '__yn');
  late final ___yn = ___ynPtr.asFunction<double Function(int, double)>();

  double erf(
    double arg0,
  ) {
    return _erf(
      arg0,
    );
  }

  late final _erfPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('erf');
  late final _erf = _erfPtr.asFunction<double Function(double)>();

  double __erf(
    double arg0,
  ) {
    return ___erf(
      arg0,
    );
  }

  late final ___erfPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__erf');
  late final ___erf = ___erfPtr.asFunction<double Function(double)>();

  double erfc(
    double arg0,
  ) {
    return _erfc(
      arg0,
    );
  }

  late final _erfcPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('erfc');
  late final _erfc = _erfcPtr.asFunction<double Function(double)>();

  double __erfc(
    double arg0,
  ) {
    return ___erfc(
      arg0,
    );
  }

  late final ___erfcPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__erfc');
  late final ___erfc = ___erfcPtr.asFunction<double Function(double)>();

  double lgamma(
    double arg0,
  ) {
    return _lgamma(
      arg0,
    );
  }

  late final _lgammaPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('lgamma');
  late final _lgamma = _lgammaPtr.asFunction<double Function(double)>();

  double __lgamma(
    double arg0,
  ) {
    return ___lgamma(
      arg0,
    );
  }

  late final ___lgammaPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__lgamma');
  late final ___lgamma = ___lgammaPtr.asFunction<double Function(double)>();

  double tgamma(
    double arg0,
  ) {
    return _tgamma(
      arg0,
    );
  }

  late final _tgammaPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('tgamma');
  late final _tgamma = _tgammaPtr.asFunction<double Function(double)>();

  double __tgamma(
    double arg0,
  ) {
    return ___tgamma(
      arg0,
    );
  }

  late final ___tgammaPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__tgamma');
  late final ___tgamma = ___tgammaPtr.asFunction<double Function(double)>();

  double gamma(
    double arg0,
  ) {
    return _gamma(
      arg0,
    );
  }

  late final _gammaPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('gamma');
  late final _gamma = _gammaPtr.asFunction<double Function(double)>();

  double __gamma(
    double arg0,
  ) {
    return ___gamma(
      arg0,
    );
  }

  late final ___gammaPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__gamma');
  late final ___gamma = ___gammaPtr.asFunction<double Function(double)>();

  double lgamma_r(
    double arg0,
    ffi.Pointer<ffi.Int> __signgamp,
  ) {
    return _lgamma_r(
      arg0,
      __signgamp,
    );
  }

  late final _lgamma_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Double, ffi.Pointer<ffi.Int>)>>('lgamma_r');
  late final _lgamma_r =
      _lgamma_rPtr.asFunction<double Function(double, ffi.Pointer<ffi.Int>)>();

  double __lgamma_r(
    double arg0,
    ffi.Pointer<ffi.Int> __signgamp,
  ) {
    return ___lgamma_r(
      arg0,
      __signgamp,
    );
  }

  late final ___lgamma_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Double, ffi.Pointer<ffi.Int>)>>('__lgamma_r');
  late final ___lgamma_r = ___lgamma_rPtr
      .asFunction<double Function(double, ffi.Pointer<ffi.Int>)>();

  double rint(
    double __x,
  ) {
    return _rint(
      __x,
    );
  }

  late final _rintPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('rint');
  late final _rint = _rintPtr.asFunction<double Function(double)>();

  double __rint(
    double __x,
  ) {
    return ___rint(
      __x,
    );
  }

  late final ___rintPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__rint');
  late final ___rint = ___rintPtr.asFunction<double Function(double)>();

  double nextafter(
    double __x,
    double __y,
  ) {
    return _nextafter(
      __x,
      __y,
    );
  }

  late final _nextafterPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'nextafter');
  late final _nextafter =
      _nextafterPtr.asFunction<double Function(double, double)>();

  double __nextafter(
    double __x,
    double __y,
  ) {
    return ___nextafter(
      __x,
      __y,
    );
  }

  late final ___nextafterPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          '__nextafter');
  late final ___nextafter =
      ___nextafterPtr.asFunction<double Function(double, double)>();

  double remainder(
    double __x,
    double __y,
  ) {
    return _remainder(
      __x,
      __y,
    );
  }

  late final _remainderPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'remainder');
  late final _remainder =
      _remainderPtr.asFunction<double Function(double, double)>();

  double __remainder(
    double __x,
    double __y,
  ) {
    return ___remainder(
      __x,
      __y,
    );
  }

  late final ___remainderPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          '__remainder');
  late final ___remainder =
      ___remainderPtr.asFunction<double Function(double, double)>();

  double scalbn(
    double __x,
    int __n,
  ) {
    return _scalbn(
      __x,
      __n,
    );
  }

  late final _scalbnPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Int)>>(
          'scalbn');
  late final _scalbn = _scalbnPtr.asFunction<double Function(double, int)>();

  double __scalbn(
    double __x,
    int __n,
  ) {
    return ___scalbn(
      __x,
      __n,
    );
  }

  late final ___scalbnPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Int)>>(
          '__scalbn');
  late final ___scalbn =
      ___scalbnPtr.asFunction<double Function(double, int)>();

  int ilogb(
    double __x,
  ) {
    return _ilogb(
      __x,
    );
  }

  late final _ilogbPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Double)>>('ilogb');
  late final _ilogb = _ilogbPtr.asFunction<int Function(double)>();

  int __ilogb(
    double __x,
  ) {
    return ___ilogb(
      __x,
    );
  }

  late final ___ilogbPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Double)>>('__ilogb');
  late final ___ilogb = ___ilogbPtr.asFunction<int Function(double)>();

  double scalbln(
    double __x,
    int __n,
  ) {
    return _scalbln(
      __x,
      __n,
    );
  }

  late final _scalblnPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Long)>>(
          'scalbln');
  late final _scalbln = _scalblnPtr.asFunction<double Function(double, int)>();

  double __scalbln(
    double __x,
    int __n,
  ) {
    return ___scalbln(
      __x,
      __n,
    );
  }

  late final ___scalblnPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Long)>>(
          '__scalbln');
  late final ___scalbln =
      ___scalblnPtr.asFunction<double Function(double, int)>();

  double nearbyint(
    double __x,
  ) {
    return _nearbyint(
      __x,
    );
  }

  late final _nearbyintPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('nearbyint');
  late final _nearbyint = _nearbyintPtr.asFunction<double Function(double)>();

  double __nearbyint(
    double __x,
  ) {
    return ___nearbyint(
      __x,
    );
  }

  late final ___nearbyintPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>(
          '__nearbyint');
  late final ___nearbyint =
      ___nearbyintPtr.asFunction<double Function(double)>();

  double round(
    double __x,
  ) {
    return _round(
      __x,
    );
  }

  late final _roundPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('round');
  late final _round = _roundPtr.asFunction<double Function(double)>();

  double __round(
    double __x,
  ) {
    return ___round(
      __x,
    );
  }

  late final ___roundPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__round');
  late final ___round = ___roundPtr.asFunction<double Function(double)>();

  double trunc(
    double __x,
  ) {
    return _trunc(
      __x,
    );
  }

  late final _truncPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('trunc');
  late final _trunc = _truncPtr.asFunction<double Function(double)>();

  double __trunc(
    double __x,
  ) {
    return ___trunc(
      __x,
    );
  }

  late final ___truncPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__trunc');
  late final ___trunc = ___truncPtr.asFunction<double Function(double)>();

  double remquo(
    double __x,
    double __y,
    ffi.Pointer<ffi.Int> __quo,
  ) {
    return _remquo(
      __x,
      __y,
      __quo,
    );
  }

  late final _remquoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Double, ffi.Double, ffi.Pointer<ffi.Int>)>>('remquo');
  late final _remquo = _remquoPtr
      .asFunction<double Function(double, double, ffi.Pointer<ffi.Int>)>();

  double __remquo(
    double __x,
    double __y,
    ffi.Pointer<ffi.Int> __quo,
  ) {
    return ___remquo(
      __x,
      __y,
      __quo,
    );
  }

  late final ___remquoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Double, ffi.Double, ffi.Pointer<ffi.Int>)>>('__remquo');
  late final ___remquo = ___remquoPtr
      .asFunction<double Function(double, double, ffi.Pointer<ffi.Int>)>();

  int lrint(
    double __x,
  ) {
    return _lrint(
      __x,
    );
  }

  late final _lrintPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Double)>>('lrint');
  late final _lrint = _lrintPtr.asFunction<int Function(double)>();

  int __lrint(
    double __x,
  ) {
    return ___lrint(
      __x,
    );
  }

  late final ___lrintPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Double)>>('__lrint');
  late final ___lrint = ___lrintPtr.asFunction<int Function(double)>();

  int llrint(
    double __x,
  ) {
    return _llrint(
      __x,
    );
  }

  late final _llrintPtr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Double)>>('llrint');
  late final _llrint = _llrintPtr.asFunction<int Function(double)>();

  int __llrint(
    double __x,
  ) {
    return ___llrint(
      __x,
    );
  }

  late final ___llrintPtr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Double)>>(
          '__llrint');
  late final ___llrint = ___llrintPtr.asFunction<int Function(double)>();

  int lround(
    double __x,
  ) {
    return _lround(
      __x,
    );
  }

  late final _lroundPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Double)>>('lround');
  late final _lround = _lroundPtr.asFunction<int Function(double)>();

  int __lround(
    double __x,
  ) {
    return ___lround(
      __x,
    );
  }

  late final ___lroundPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Double)>>('__lround');
  late final ___lround = ___lroundPtr.asFunction<int Function(double)>();

  int llround(
    double __x,
  ) {
    return _llround(
      __x,
    );
  }

  late final _llroundPtr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Double)>>('llround');
  late final _llround = _llroundPtr.asFunction<int Function(double)>();

  int __llround(
    double __x,
  ) {
    return ___llround(
      __x,
    );
  }

  late final ___llroundPtr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Double)>>(
          '__llround');
  late final ___llround = ___llroundPtr.asFunction<int Function(double)>();

  double fdim(
    double __x,
    double __y,
  ) {
    return _fdim(
      __x,
      __y,
    );
  }

  late final _fdimPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'fdim');
  late final _fdim = _fdimPtr.asFunction<double Function(double, double)>();

  double __fdim(
    double __x,
    double __y,
  ) {
    return ___fdim(
      __x,
      __y,
    );
  }

  late final ___fdimPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          '__fdim');
  late final ___fdim = ___fdimPtr.asFunction<double Function(double, double)>();

  double fmax(
    double __x,
    double __y,
  ) {
    return _fmax(
      __x,
      __y,
    );
  }

  late final _fmaxPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'fmax');
  late final _fmax = _fmaxPtr.asFunction<double Function(double, double)>();

  double __fmax(
    double __x,
    double __y,
  ) {
    return ___fmax(
      __x,
      __y,
    );
  }

  late final ___fmaxPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          '__fmax');
  late final ___fmax = ___fmaxPtr.asFunction<double Function(double, double)>();

  double fmin(
    double __x,
    double __y,
  ) {
    return _fmin(
      __x,
      __y,
    );
  }

  late final _fminPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'fmin');
  late final _fmin = _fminPtr.asFunction<double Function(double, double)>();

  double __fmin(
    double __x,
    double __y,
  ) {
    return ___fmin(
      __x,
      __y,
    );
  }

  late final ___fminPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          '__fmin');
  late final ___fmin = ___fminPtr.asFunction<double Function(double, double)>();

  double fma(
    double __x,
    double __y,
    double __z,
  ) {
    return _fma(
      __x,
      __y,
      __z,
    );
  }

  late final _fmaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Double, ffi.Double, ffi.Double)>>('fma');
  late final _fma =
      _fmaPtr.asFunction<double Function(double, double, double)>();

  double __fma(
    double __x,
    double __y,
    double __z,
  ) {
    return ___fma(
      __x,
      __y,
      __z,
    );
  }

  late final ___fmaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Double, ffi.Double, ffi.Double)>>('__fma');
  late final ___fma =
      ___fmaPtr.asFunction<double Function(double, double, double)>();

  double scalb(
    double __x,
    double __n,
  ) {
    return _scalb(
      __x,
      __n,
    );
  }

  late final _scalbPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'scalb');
  late final _scalb = _scalbPtr.asFunction<double Function(double, double)>();

  double __scalb(
    double __x,
    double __n,
  ) {
    return ___scalb(
      __x,
      __n,
    );
  }

  late final ___scalbPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          '__scalb');
  late final ___scalb =
      ___scalbPtr.asFunction<double Function(double, double)>();

  int __fpclassifyf(
    double __value,
  ) {
    return ___fpclassifyf(
      __value,
    );
  }

  late final ___fpclassifyfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Float)>>('__fpclassifyf');
  late final ___fpclassifyf =
      ___fpclassifyfPtr.asFunction<int Function(double)>();

  int __signbitf(
    double __value,
  ) {
    return ___signbitf(
      __value,
    );
  }

  late final ___signbitfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Float)>>('__signbitf');
  late final ___signbitf = ___signbitfPtr.asFunction<int Function(double)>();

  int __isinff(
    double __value,
  ) {
    return ___isinff(
      __value,
    );
  }

  late final ___isinffPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Float)>>('__isinff');
  late final ___isinff = ___isinffPtr.asFunction<int Function(double)>();

  int __finitef(
    double __value,
  ) {
    return ___finitef(
      __value,
    );
  }

  late final ___finitefPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Float)>>('__finitef');
  late final ___finitef = ___finitefPtr.asFunction<int Function(double)>();

  int __isnanf(
    double __value,
  ) {
    return ___isnanf(
      __value,
    );
  }

  late final ___isnanfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Float)>>('__isnanf');
  late final ___isnanf = ___isnanfPtr.asFunction<int Function(double)>();

  int __iseqsigf(
    double __x,
    double __y,
  ) {
    return ___iseqsigf(
      __x,
      __y,
    );
  }

  late final ___iseqsigfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Float, ffi.Float)>>(
          '__iseqsigf');
  late final ___iseqsigf =
      ___iseqsigfPtr.asFunction<int Function(double, double)>();

  int __issignalingf(
    double __value,
  ) {
    return ___issignalingf(
      __value,
    );
  }

  late final ___issignalingfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Float)>>(
          '__issignalingf');
  late final ___issignalingf =
      ___issignalingfPtr.asFunction<int Function(double)>();

  double acosf(
    double __x,
  ) {
    return _acosf(
      __x,
    );
  }

  late final _acosfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('acosf');
  late final _acosf = _acosfPtr.asFunction<double Function(double)>();

  double __acosf(
    double __x,
  ) {
    return ___acosf(
      __x,
    );
  }

  late final ___acosfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__acosf');
  late final ___acosf = ___acosfPtr.asFunction<double Function(double)>();

  double asinf(
    double __x,
  ) {
    return _asinf(
      __x,
    );
  }

  late final _asinfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('asinf');
  late final _asinf = _asinfPtr.asFunction<double Function(double)>();

  double __asinf(
    double __x,
  ) {
    return ___asinf(
      __x,
    );
  }

  late final ___asinfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__asinf');
  late final ___asinf = ___asinfPtr.asFunction<double Function(double)>();

  double atanf(
    double __x,
  ) {
    return _atanf(
      __x,
    );
  }

  late final _atanfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('atanf');
  late final _atanf = _atanfPtr.asFunction<double Function(double)>();

  double __atanf(
    double __x,
  ) {
    return ___atanf(
      __x,
    );
  }

  late final ___atanfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__atanf');
  late final ___atanf = ___atanfPtr.asFunction<double Function(double)>();

  double atan2f(
    double __y,
    double __x,
  ) {
    return _atan2f(
      __y,
      __x,
    );
  }

  late final _atan2fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'atan2f');
  late final _atan2f = _atan2fPtr.asFunction<double Function(double, double)>();

  double __atan2f(
    double __y,
    double __x,
  ) {
    return ___atan2f(
      __y,
      __x,
    );
  }

  late final ___atan2fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          '__atan2f');
  late final ___atan2f =
      ___atan2fPtr.asFunction<double Function(double, double)>();

  double cosf(
    double __x,
  ) {
    return _cosf(
      __x,
    );
  }

  late final _cosfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('cosf');
  late final _cosf = _cosfPtr.asFunction<double Function(double)>();

  double __cosf(
    double __x,
  ) {
    return ___cosf(
      __x,
    );
  }

  late final ___cosfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__cosf');
  late final ___cosf = ___cosfPtr.asFunction<double Function(double)>();

  double sinf(
    double __x,
  ) {
    return _sinf(
      __x,
    );
  }

  late final _sinfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('sinf');
  late final _sinf = _sinfPtr.asFunction<double Function(double)>();

  double __sinf(
    double __x,
  ) {
    return ___sinf(
      __x,
    );
  }

  late final ___sinfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__sinf');
  late final ___sinf = ___sinfPtr.asFunction<double Function(double)>();

  double tanf(
    double __x,
  ) {
    return _tanf(
      __x,
    );
  }

  late final _tanfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('tanf');
  late final _tanf = _tanfPtr.asFunction<double Function(double)>();

  double __tanf(
    double __x,
  ) {
    return ___tanf(
      __x,
    );
  }

  late final ___tanfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__tanf');
  late final ___tanf = ___tanfPtr.asFunction<double Function(double)>();

  double coshf(
    double __x,
  ) {
    return _coshf(
      __x,
    );
  }

  late final _coshfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('coshf');
  late final _coshf = _coshfPtr.asFunction<double Function(double)>();

  double __coshf(
    double __x,
  ) {
    return ___coshf(
      __x,
    );
  }

  late final ___coshfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__coshf');
  late final ___coshf = ___coshfPtr.asFunction<double Function(double)>();

  double sinhf(
    double __x,
  ) {
    return _sinhf(
      __x,
    );
  }

  late final _sinhfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('sinhf');
  late final _sinhf = _sinhfPtr.asFunction<double Function(double)>();

  double __sinhf(
    double __x,
  ) {
    return ___sinhf(
      __x,
    );
  }

  late final ___sinhfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__sinhf');
  late final ___sinhf = ___sinhfPtr.asFunction<double Function(double)>();

  double tanhf(
    double __x,
  ) {
    return _tanhf(
      __x,
    );
  }

  late final _tanhfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('tanhf');
  late final _tanhf = _tanhfPtr.asFunction<double Function(double)>();

  double __tanhf(
    double __x,
  ) {
    return ___tanhf(
      __x,
    );
  }

  late final ___tanhfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__tanhf');
  late final ___tanhf = ___tanhfPtr.asFunction<double Function(double)>();

  double acoshf(
    double __x,
  ) {
    return _acoshf(
      __x,
    );
  }

  late final _acoshfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('acoshf');
  late final _acoshf = _acoshfPtr.asFunction<double Function(double)>();

  double __acoshf(
    double __x,
  ) {
    return ___acoshf(
      __x,
    );
  }

  late final ___acoshfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__acoshf');
  late final ___acoshf = ___acoshfPtr.asFunction<double Function(double)>();

  double asinhf(
    double __x,
  ) {
    return _asinhf(
      __x,
    );
  }

  late final _asinhfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('asinhf');
  late final _asinhf = _asinhfPtr.asFunction<double Function(double)>();

  double __asinhf(
    double __x,
  ) {
    return ___asinhf(
      __x,
    );
  }

  late final ___asinhfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__asinhf');
  late final ___asinhf = ___asinhfPtr.asFunction<double Function(double)>();

  double atanhf(
    double __x,
  ) {
    return _atanhf(
      __x,
    );
  }

  late final _atanhfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('atanhf');
  late final _atanhf = _atanhfPtr.asFunction<double Function(double)>();

  double __atanhf(
    double __x,
  ) {
    return ___atanhf(
      __x,
    );
  }

  late final ___atanhfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__atanhf');
  late final ___atanhf = ___atanhfPtr.asFunction<double Function(double)>();

  double expf(
    double __x,
  ) {
    return _expf(
      __x,
    );
  }

  late final _expfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('expf');
  late final _expf = _expfPtr.asFunction<double Function(double)>();

  double __expf(
    double __x,
  ) {
    return ___expf(
      __x,
    );
  }

  late final ___expfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__expf');
  late final ___expf = ___expfPtr.asFunction<double Function(double)>();

  double frexpf(
    double __x,
    ffi.Pointer<ffi.Int> __exponent,
  ) {
    return _frexpf(
      __x,
      __exponent,
    );
  }

  late final _frexpfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Float, ffi.Pointer<ffi.Int>)>>('frexpf');
  late final _frexpf =
      _frexpfPtr.asFunction<double Function(double, ffi.Pointer<ffi.Int>)>();

  double __frexpf(
    double __x,
    ffi.Pointer<ffi.Int> __exponent,
  ) {
    return ___frexpf(
      __x,
      __exponent,
    );
  }

  late final ___frexpfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Float, ffi.Pointer<ffi.Int>)>>('__frexpf');
  late final ___frexpf =
      ___frexpfPtr.asFunction<double Function(double, ffi.Pointer<ffi.Int>)>();

  double ldexpf(
    double __x,
    int __exponent,
  ) {
    return _ldexpf(
      __x,
      __exponent,
    );
  }

  late final _ldexpfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Int)>>(
          'ldexpf');
  late final _ldexpf = _ldexpfPtr.asFunction<double Function(double, int)>();

  double __ldexpf(
    double __x,
    int __exponent,
  ) {
    return ___ldexpf(
      __x,
      __exponent,
    );
  }

  late final ___ldexpfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Int)>>(
          '__ldexpf');
  late final ___ldexpf =
      ___ldexpfPtr.asFunction<double Function(double, int)>();

  double logf(
    double __x,
  ) {
    return _logf(
      __x,
    );
  }

  late final _logfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('logf');
  late final _logf = _logfPtr.asFunction<double Function(double)>();

  double __logf(
    double __x,
  ) {
    return ___logf(
      __x,
    );
  }

  late final ___logfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__logf');
  late final ___logf = ___logfPtr.asFunction<double Function(double)>();

  double log10f(
    double __x,
  ) {
    return _log10f(
      __x,
    );
  }

  late final _log10fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('log10f');
  late final _log10f = _log10fPtr.asFunction<double Function(double)>();

  double __log10f(
    double __x,
  ) {
    return ___log10f(
      __x,
    );
  }

  late final ___log10fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__log10f');
  late final ___log10f = ___log10fPtr.asFunction<double Function(double)>();

  double modff(
    double __x,
    ffi.Pointer<ffi.Float> __iptr,
  ) {
    return _modff(
      __x,
      __iptr,
    );
  }

  late final _modffPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Float, ffi.Pointer<ffi.Float>)>>('modff');
  late final _modff =
      _modffPtr.asFunction<double Function(double, ffi.Pointer<ffi.Float>)>();

  double __modff(
    double __x,
    ffi.Pointer<ffi.Float> __iptr,
  ) {
    return ___modff(
      __x,
      __iptr,
    );
  }

  late final ___modffPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Float, ffi.Pointer<ffi.Float>)>>('__modff');
  late final ___modff =
      ___modffPtr.asFunction<double Function(double, ffi.Pointer<ffi.Float>)>();

  double expm1f(
    double __x,
  ) {
    return _expm1f(
      __x,
    );
  }

  late final _expm1fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('expm1f');
  late final _expm1f = _expm1fPtr.asFunction<double Function(double)>();

  double __expm1f(
    double __x,
  ) {
    return ___expm1f(
      __x,
    );
  }

  late final ___expm1fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__expm1f');
  late final ___expm1f = ___expm1fPtr.asFunction<double Function(double)>();

  double log1pf(
    double __x,
  ) {
    return _log1pf(
      __x,
    );
  }

  late final _log1pfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('log1pf');
  late final _log1pf = _log1pfPtr.asFunction<double Function(double)>();

  double __log1pf(
    double __x,
  ) {
    return ___log1pf(
      __x,
    );
  }

  late final ___log1pfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__log1pf');
  late final ___log1pf = ___log1pfPtr.asFunction<double Function(double)>();

  double logbf(
    double __x,
  ) {
    return _logbf(
      __x,
    );
  }

  late final _logbfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('logbf');
  late final _logbf = _logbfPtr.asFunction<double Function(double)>();

  double __logbf(
    double __x,
  ) {
    return ___logbf(
      __x,
    );
  }

  late final ___logbfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__logbf');
  late final ___logbf = ___logbfPtr.asFunction<double Function(double)>();

  double exp2f(
    double __x,
  ) {
    return _exp2f(
      __x,
    );
  }

  late final _exp2fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('exp2f');
  late final _exp2f = _exp2fPtr.asFunction<double Function(double)>();

  double __exp2f(
    double __x,
  ) {
    return ___exp2f(
      __x,
    );
  }

  late final ___exp2fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__exp2f');
  late final ___exp2f = ___exp2fPtr.asFunction<double Function(double)>();

  double log2f(
    double __x,
  ) {
    return _log2f(
      __x,
    );
  }

  late final _log2fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('log2f');
  late final _log2f = _log2fPtr.asFunction<double Function(double)>();

  double __log2f(
    double __x,
  ) {
    return ___log2f(
      __x,
    );
  }

  late final ___log2fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__log2f');
  late final ___log2f = ___log2fPtr.asFunction<double Function(double)>();

  double powf(
    double __x,
    double __y,
  ) {
    return _powf(
      __x,
      __y,
    );
  }

  late final _powfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'powf');
  late final _powf = _powfPtr.asFunction<double Function(double, double)>();

  double __powf(
    double __x,
    double __y,
  ) {
    return ___powf(
      __x,
      __y,
    );
  }

  late final ___powfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          '__powf');
  late final ___powf = ___powfPtr.asFunction<double Function(double, double)>();

  double sqrtf(
    double __x,
  ) {
    return _sqrtf(
      __x,
    );
  }

  late final _sqrtfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('sqrtf');
  late final _sqrtf = _sqrtfPtr.asFunction<double Function(double)>();

  double __sqrtf(
    double __x,
  ) {
    return ___sqrtf(
      __x,
    );
  }

  late final ___sqrtfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__sqrtf');
  late final ___sqrtf = ___sqrtfPtr.asFunction<double Function(double)>();

  double hypotf(
    double __x,
    double __y,
  ) {
    return _hypotf(
      __x,
      __y,
    );
  }

  late final _hypotfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'hypotf');
  late final _hypotf = _hypotfPtr.asFunction<double Function(double, double)>();

  double __hypotf(
    double __x,
    double __y,
  ) {
    return ___hypotf(
      __x,
      __y,
    );
  }

  late final ___hypotfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          '__hypotf');
  late final ___hypotf =
      ___hypotfPtr.asFunction<double Function(double, double)>();

  double cbrtf(
    double __x,
  ) {
    return _cbrtf(
      __x,
    );
  }

  late final _cbrtfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('cbrtf');
  late final _cbrtf = _cbrtfPtr.asFunction<double Function(double)>();

  double __cbrtf(
    double __x,
  ) {
    return ___cbrtf(
      __x,
    );
  }

  late final ___cbrtfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__cbrtf');
  late final ___cbrtf = ___cbrtfPtr.asFunction<double Function(double)>();

  double ceilf(
    double __x,
  ) {
    return _ceilf(
      __x,
    );
  }

  late final _ceilfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('ceilf');
  late final _ceilf = _ceilfPtr.asFunction<double Function(double)>();

  double __ceilf(
    double __x,
  ) {
    return ___ceilf(
      __x,
    );
  }

  late final ___ceilfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__ceilf');
  late final ___ceilf = ___ceilfPtr.asFunction<double Function(double)>();

  double fabsf(
    double __x,
  ) {
    return _fabsf(
      __x,
    );
  }

  late final _fabsfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('fabsf');
  late final _fabsf = _fabsfPtr.asFunction<double Function(double)>();

  double __fabsf(
    double __x,
  ) {
    return ___fabsf(
      __x,
    );
  }

  late final ___fabsfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__fabsf');
  late final ___fabsf = ___fabsfPtr.asFunction<double Function(double)>();

  double floorf(
    double __x,
  ) {
    return _floorf(
      __x,
    );
  }

  late final _floorfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('floorf');
  late final _floorf = _floorfPtr.asFunction<double Function(double)>();

  double __floorf(
    double __x,
  ) {
    return ___floorf(
      __x,
    );
  }

  late final ___floorfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__floorf');
  late final ___floorf = ___floorfPtr.asFunction<double Function(double)>();

  double fmodf(
    double __x,
    double __y,
  ) {
    return _fmodf(
      __x,
      __y,
    );
  }

  late final _fmodfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'fmodf');
  late final _fmodf = _fmodfPtr.asFunction<double Function(double, double)>();

  double __fmodf(
    double __x,
    double __y,
  ) {
    return ___fmodf(
      __x,
      __y,
    );
  }

  late final ___fmodfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          '__fmodf');
  late final ___fmodf =
      ___fmodfPtr.asFunction<double Function(double, double)>();

  int isinff(
    double __value,
  ) {
    return _isinff(
      __value,
    );
  }

  late final _isinffPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Float)>>('isinff');
  late final _isinff = _isinffPtr.asFunction<int Function(double)>();

  int finitef(
    double __value,
  ) {
    return _finitef(
      __value,
    );
  }

  late final _finitefPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Float)>>('finitef');
  late final _finitef = _finitefPtr.asFunction<int Function(double)>();

  double dremf(
    double __x,
    double __y,
  ) {
    return _dremf(
      __x,
      __y,
    );
  }

  late final _dremfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'dremf');
  late final _dremf = _dremfPtr.asFunction<double Function(double, double)>();

  double __dremf(
    double __x,
    double __y,
  ) {
    return ___dremf(
      __x,
      __y,
    );
  }

  late final ___dremfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          '__dremf');
  late final ___dremf =
      ___dremfPtr.asFunction<double Function(double, double)>();

  double significandf(
    double __x,
  ) {
    return _significandf(
      __x,
    );
  }

  late final _significandfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>(
          'significandf');
  late final _significandf =
      _significandfPtr.asFunction<double Function(double)>();

  double __significandf(
    double __x,
  ) {
    return ___significandf(
      __x,
    );
  }

  late final ___significandfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>(
          '__significandf');
  late final ___significandf =
      ___significandfPtr.asFunction<double Function(double)>();

  double copysignf(
    double __x,
    double __y,
  ) {
    return _copysignf(
      __x,
      __y,
    );
  }

  late final _copysignfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'copysignf');
  late final _copysignf =
      _copysignfPtr.asFunction<double Function(double, double)>();

  double __copysignf(
    double __x,
    double __y,
  ) {
    return ___copysignf(
      __x,
      __y,
    );
  }

  late final ___copysignfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          '__copysignf');
  late final ___copysignf =
      ___copysignfPtr.asFunction<double Function(double, double)>();

  double nanf(
    ffi.Pointer<ffi.Char> __tagb,
  ) {
    return _nanf(
      __tagb,
    );
  }

  late final _nanfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ffi.Char>)>>(
          'nanf');
  late final _nanf =
      _nanfPtr.asFunction<double Function(ffi.Pointer<ffi.Char>)>();

  double __nanf(
    ffi.Pointer<ffi.Char> __tagb,
  ) {
    return ___nanf(
      __tagb,
    );
  }

  late final ___nanfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ffi.Char>)>>(
          '__nanf');
  late final ___nanf =
      ___nanfPtr.asFunction<double Function(ffi.Pointer<ffi.Char>)>();

  int isnanf(
    double __value,
  ) {
    return _isnanf(
      __value,
    );
  }

  late final _isnanfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Float)>>('isnanf');
  late final _isnanf = _isnanfPtr.asFunction<int Function(double)>();

  double j0f(
    double arg0,
  ) {
    return _j0f(
      arg0,
    );
  }

  late final _j0fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('j0f');
  late final _j0f = _j0fPtr.asFunction<double Function(double)>();

  double __j0f(
    double arg0,
  ) {
    return ___j0f(
      arg0,
    );
  }

  late final ___j0fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__j0f');
  late final ___j0f = ___j0fPtr.asFunction<double Function(double)>();

  double j1f(
    double arg0,
  ) {
    return _j1f(
      arg0,
    );
  }

  late final _j1fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('j1f');
  late final _j1f = _j1fPtr.asFunction<double Function(double)>();

  double __j1f(
    double arg0,
  ) {
    return ___j1f(
      arg0,
    );
  }

  late final ___j1fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__j1f');
  late final ___j1f = ___j1fPtr.asFunction<double Function(double)>();

  double jnf(
    int arg0,
    double arg1,
  ) {
    return _jnf(
      arg0,
      arg1,
    );
  }

  late final _jnfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Int, ffi.Float)>>(
          'jnf');
  late final _jnf = _jnfPtr.asFunction<double Function(int, double)>();

  double __jnf(
    int arg0,
    double arg1,
  ) {
    return ___jnf(
      arg0,
      arg1,
    );
  }

  late final ___jnfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Int, ffi.Float)>>(
          '__jnf');
  late final ___jnf = ___jnfPtr.asFunction<double Function(int, double)>();

  double y0f(
    double arg0,
  ) {
    return _y0f(
      arg0,
    );
  }

  late final _y0fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('y0f');
  late final _y0f = _y0fPtr.asFunction<double Function(double)>();

  double __y0f(
    double arg0,
  ) {
    return ___y0f(
      arg0,
    );
  }

  late final ___y0fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__y0f');
  late final ___y0f = ___y0fPtr.asFunction<double Function(double)>();

  double y1f(
    double arg0,
  ) {
    return _y1f(
      arg0,
    );
  }

  late final _y1fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('y1f');
  late final _y1f = _y1fPtr.asFunction<double Function(double)>();

  double __y1f(
    double arg0,
  ) {
    return ___y1f(
      arg0,
    );
  }

  late final ___y1fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__y1f');
  late final ___y1f = ___y1fPtr.asFunction<double Function(double)>();

  double ynf(
    int arg0,
    double arg1,
  ) {
    return _ynf(
      arg0,
      arg1,
    );
  }

  late final _ynfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Int, ffi.Float)>>(
          'ynf');
  late final _ynf = _ynfPtr.asFunction<double Function(int, double)>();

  double __ynf(
    int arg0,
    double arg1,
  ) {
    return ___ynf(
      arg0,
      arg1,
    );
  }

  late final ___ynfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Int, ffi.Float)>>(
          '__ynf');
  late final ___ynf = ___ynfPtr.asFunction<double Function(int, double)>();

  double erff(
    double arg0,
  ) {
    return _erff(
      arg0,
    );
  }

  late final _erffPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('erff');
  late final _erff = _erffPtr.asFunction<double Function(double)>();

  double __erff(
    double arg0,
  ) {
    return ___erff(
      arg0,
    );
  }

  late final ___erffPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__erff');
  late final ___erff = ___erffPtr.asFunction<double Function(double)>();

  double erfcf(
    double arg0,
  ) {
    return _erfcf(
      arg0,
    );
  }

  late final _erfcfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('erfcf');
  late final _erfcf = _erfcfPtr.asFunction<double Function(double)>();

  double __erfcf(
    double arg0,
  ) {
    return ___erfcf(
      arg0,
    );
  }

  late final ___erfcfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__erfcf');
  late final ___erfcf = ___erfcfPtr.asFunction<double Function(double)>();

  double lgammaf(
    double arg0,
  ) {
    return _lgammaf(
      arg0,
    );
  }

  late final _lgammafPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('lgammaf');
  late final _lgammaf = _lgammafPtr.asFunction<double Function(double)>();

  double __lgammaf(
    double arg0,
  ) {
    return ___lgammaf(
      arg0,
    );
  }

  late final ___lgammafPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__lgammaf');
  late final ___lgammaf = ___lgammafPtr.asFunction<double Function(double)>();

  double tgammaf(
    double arg0,
  ) {
    return _tgammaf(
      arg0,
    );
  }

  late final _tgammafPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('tgammaf');
  late final _tgammaf = _tgammafPtr.asFunction<double Function(double)>();

  double __tgammaf(
    double arg0,
  ) {
    return ___tgammaf(
      arg0,
    );
  }

  late final ___tgammafPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__tgammaf');
  late final ___tgammaf = ___tgammafPtr.asFunction<double Function(double)>();

  double gammaf(
    double arg0,
  ) {
    return _gammaf(
      arg0,
    );
  }

  late final _gammafPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('gammaf');
  late final _gammaf = _gammafPtr.asFunction<double Function(double)>();

  double __gammaf(
    double arg0,
  ) {
    return ___gammaf(
      arg0,
    );
  }

  late final ___gammafPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__gammaf');
  late final ___gammaf = ___gammafPtr.asFunction<double Function(double)>();

  double lgammaf_r(
    double arg0,
    ffi.Pointer<ffi.Int> __signgamp,
  ) {
    return _lgammaf_r(
      arg0,
      __signgamp,
    );
  }

  late final _lgammaf_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Float, ffi.Pointer<ffi.Int>)>>('lgammaf_r');
  late final _lgammaf_r =
      _lgammaf_rPtr.asFunction<double Function(double, ffi.Pointer<ffi.Int>)>();

  double __lgammaf_r(
    double arg0,
    ffi.Pointer<ffi.Int> __signgamp,
  ) {
    return ___lgammaf_r(
      arg0,
      __signgamp,
    );
  }

  late final ___lgammaf_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Float, ffi.Pointer<ffi.Int>)>>('__lgammaf_r');
  late final ___lgammaf_r = ___lgammaf_rPtr
      .asFunction<double Function(double, ffi.Pointer<ffi.Int>)>();

  double rintf(
    double __x,
  ) {
    return _rintf(
      __x,
    );
  }

  late final _rintfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('rintf');
  late final _rintf = _rintfPtr.asFunction<double Function(double)>();

  double __rintf(
    double __x,
  ) {
    return ___rintf(
      __x,
    );
  }

  late final ___rintfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__rintf');
  late final ___rintf = ___rintfPtr.asFunction<double Function(double)>();

  double nextafterf(
    double __x,
    double __y,
  ) {
    return _nextafterf(
      __x,
      __y,
    );
  }

  late final _nextafterfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'nextafterf');
  late final _nextafterf =
      _nextafterfPtr.asFunction<double Function(double, double)>();

  double __nextafterf(
    double __x,
    double __y,
  ) {
    return ___nextafterf(
      __x,
      __y,
    );
  }

  late final ___nextafterfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          '__nextafterf');
  late final ___nextafterf =
      ___nextafterfPtr.asFunction<double Function(double, double)>();

  double remainderf(
    double __x,
    double __y,
  ) {
    return _remainderf(
      __x,
      __y,
    );
  }

  late final _remainderfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'remainderf');
  late final _remainderf =
      _remainderfPtr.asFunction<double Function(double, double)>();

  double __remainderf(
    double __x,
    double __y,
  ) {
    return ___remainderf(
      __x,
      __y,
    );
  }

  late final ___remainderfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          '__remainderf');
  late final ___remainderf =
      ___remainderfPtr.asFunction<double Function(double, double)>();

  double scalbnf(
    double __x,
    int __n,
  ) {
    return _scalbnf(
      __x,
      __n,
    );
  }

  late final _scalbnfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Int)>>(
          'scalbnf');
  late final _scalbnf = _scalbnfPtr.asFunction<double Function(double, int)>();

  double __scalbnf(
    double __x,
    int __n,
  ) {
    return ___scalbnf(
      __x,
      __n,
    );
  }

  late final ___scalbnfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Int)>>(
          '__scalbnf');
  late final ___scalbnf =
      ___scalbnfPtr.asFunction<double Function(double, int)>();

  int ilogbf(
    double __x,
  ) {
    return _ilogbf(
      __x,
    );
  }

  late final _ilogbfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Float)>>('ilogbf');
  late final _ilogbf = _ilogbfPtr.asFunction<int Function(double)>();

  int __ilogbf(
    double __x,
  ) {
    return ___ilogbf(
      __x,
    );
  }

  late final ___ilogbfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Float)>>('__ilogbf');
  late final ___ilogbf = ___ilogbfPtr.asFunction<int Function(double)>();

  double scalblnf(
    double __x,
    int __n,
  ) {
    return _scalblnf(
      __x,
      __n,
    );
  }

  late final _scalblnfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Long)>>(
          'scalblnf');
  late final _scalblnf =
      _scalblnfPtr.asFunction<double Function(double, int)>();

  double __scalblnf(
    double __x,
    int __n,
  ) {
    return ___scalblnf(
      __x,
      __n,
    );
  }

  late final ___scalblnfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Long)>>(
          '__scalblnf');
  late final ___scalblnf =
      ___scalblnfPtr.asFunction<double Function(double, int)>();

  double nearbyintf(
    double __x,
  ) {
    return _nearbyintf(
      __x,
    );
  }

  late final _nearbyintfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('nearbyintf');
  late final _nearbyintf = _nearbyintfPtr.asFunction<double Function(double)>();

  double __nearbyintf(
    double __x,
  ) {
    return ___nearbyintf(
      __x,
    );
  }

  late final ___nearbyintfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>(
          '__nearbyintf');
  late final ___nearbyintf =
      ___nearbyintfPtr.asFunction<double Function(double)>();

  double roundf(
    double __x,
  ) {
    return _roundf(
      __x,
    );
  }

  late final _roundfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('roundf');
  late final _roundf = _roundfPtr.asFunction<double Function(double)>();

  double __roundf(
    double __x,
  ) {
    return ___roundf(
      __x,
    );
  }

  late final ___roundfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__roundf');
  late final ___roundf = ___roundfPtr.asFunction<double Function(double)>();

  double truncf(
    double __x,
  ) {
    return _truncf(
      __x,
    );
  }

  late final _truncfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('truncf');
  late final _truncf = _truncfPtr.asFunction<double Function(double)>();

  double __truncf(
    double __x,
  ) {
    return ___truncf(
      __x,
    );
  }

  late final ___truncfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__truncf');
  late final ___truncf = ___truncfPtr.asFunction<double Function(double)>();

  double remquof(
    double __x,
    double __y,
    ffi.Pointer<ffi.Int> __quo,
  ) {
    return _remquof(
      __x,
      __y,
      __quo,
    );
  }

  late final _remquofPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(
              ffi.Float, ffi.Float, ffi.Pointer<ffi.Int>)>>('remquof');
  late final _remquof = _remquofPtr
      .asFunction<double Function(double, double, ffi.Pointer<ffi.Int>)>();

  double __remquof(
    double __x,
    double __y,
    ffi.Pointer<ffi.Int> __quo,
  ) {
    return ___remquof(
      __x,
      __y,
      __quo,
    );
  }

  late final ___remquofPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(
              ffi.Float, ffi.Float, ffi.Pointer<ffi.Int>)>>('__remquof');
  late final ___remquof = ___remquofPtr
      .asFunction<double Function(double, double, ffi.Pointer<ffi.Int>)>();

  int lrintf(
    double __x,
  ) {
    return _lrintf(
      __x,
    );
  }

  late final _lrintfPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Float)>>('lrintf');
  late final _lrintf = _lrintfPtr.asFunction<int Function(double)>();

  int __lrintf(
    double __x,
  ) {
    return ___lrintf(
      __x,
    );
  }

  late final ___lrintfPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Float)>>('__lrintf');
  late final ___lrintf = ___lrintfPtr.asFunction<int Function(double)>();

  int llrintf(
    double __x,
  ) {
    return _llrintf(
      __x,
    );
  }

  late final _llrintfPtr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Float)>>('llrintf');
  late final _llrintf = _llrintfPtr.asFunction<int Function(double)>();

  int __llrintf(
    double __x,
  ) {
    return ___llrintf(
      __x,
    );
  }

  late final ___llrintfPtr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Float)>>(
          '__llrintf');
  late final ___llrintf = ___llrintfPtr.asFunction<int Function(double)>();

  int lroundf(
    double __x,
  ) {
    return _lroundf(
      __x,
    );
  }

  late final _lroundfPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Float)>>('lroundf');
  late final _lroundf = _lroundfPtr.asFunction<int Function(double)>();

  int __lroundf(
    double __x,
  ) {
    return ___lroundf(
      __x,
    );
  }

  late final ___lroundfPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Float)>>('__lroundf');
  late final ___lroundf = ___lroundfPtr.asFunction<int Function(double)>();

  int llroundf(
    double __x,
  ) {
    return _llroundf(
      __x,
    );
  }

  late final _llroundfPtr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Float)>>('llroundf');
  late final _llroundf = _llroundfPtr.asFunction<int Function(double)>();

  int __llroundf(
    double __x,
  ) {
    return ___llroundf(
      __x,
    );
  }

  late final ___llroundfPtr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Float)>>(
          '__llroundf');
  late final ___llroundf = ___llroundfPtr.asFunction<int Function(double)>();

  double fdimf(
    double __x,
    double __y,
  ) {
    return _fdimf(
      __x,
      __y,
    );
  }

  late final _fdimfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'fdimf');
  late final _fdimf = _fdimfPtr.asFunction<double Function(double, double)>();

  double __fdimf(
    double __x,
    double __y,
  ) {
    return ___fdimf(
      __x,
      __y,
    );
  }

  late final ___fdimfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          '__fdimf');
  late final ___fdimf =
      ___fdimfPtr.asFunction<double Function(double, double)>();

  double fmaxf(
    double __x,
    double __y,
  ) {
    return _fmaxf(
      __x,
      __y,
    );
  }

  late final _fmaxfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'fmaxf');
  late final _fmaxf = _fmaxfPtr.asFunction<double Function(double, double)>();

  double __fmaxf(
    double __x,
    double __y,
  ) {
    return ___fmaxf(
      __x,
      __y,
    );
  }

  late final ___fmaxfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          '__fmaxf');
  late final ___fmaxf =
      ___fmaxfPtr.asFunction<double Function(double, double)>();

  double fminf(
    double __x,
    double __y,
  ) {
    return _fminf(
      __x,
      __y,
    );
  }

  late final _fminfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'fminf');
  late final _fminf = _fminfPtr.asFunction<double Function(double, double)>();

  double __fminf(
    double __x,
    double __y,
  ) {
    return ___fminf(
      __x,
      __y,
    );
  }

  late final ___fminfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          '__fminf');
  late final ___fminf =
      ___fminfPtr.asFunction<double Function(double, double)>();

  double fmaf(
    double __x,
    double __y,
    double __z,
  ) {
    return _fmaf(
      __x,
      __y,
      __z,
    );
  }

  late final _fmafPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Float, ffi.Float, ffi.Float)>>('fmaf');
  late final _fmaf =
      _fmafPtr.asFunction<double Function(double, double, double)>();

  double __fmaf(
    double __x,
    double __y,
    double __z,
  ) {
    return ___fmaf(
      __x,
      __y,
      __z,
    );
  }

  late final ___fmafPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Float, ffi.Float, ffi.Float)>>('__fmaf');
  late final ___fmaf =
      ___fmafPtr.asFunction<double Function(double, double, double)>();

  double scalbf(
    double __x,
    double __n,
  ) {
    return _scalbf(
      __x,
      __n,
    );
  }

  late final _scalbfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'scalbf');
  late final _scalbf = _scalbfPtr.asFunction<double Function(double, double)>();

  double __scalbf(
    double __x,
    double __n,
  ) {
    return ___scalbf(
      __x,
      __n,
    );
  }

  late final ___scalbfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          '__scalbf');
  late final ___scalbf =
      ___scalbfPtr.asFunction<double Function(double, double)>();

  late final ffi.Pointer<ffi.Int> _signgam = _lookup<ffi.Int>('signgam');

  int get signgam => _signgam.value;

  set signgam(int value) => _signgam.value = value;

  int imaxabs(
    int __n,
  ) {
    return _imaxabs(
      __n,
    );
  }

  late final _imaxabsPtr =
      _lookup<ffi.NativeFunction<intmax_t Function(intmax_t)>>('imaxabs');
  late final _imaxabs = _imaxabsPtr.asFunction<int Function(int)>();

  struct_imaxdiv_t imaxdiv(
    int __numer,
    int __denom,
  ) {
    return _imaxdiv(
      __numer,
      __denom,
    );
  }

  late final _imaxdivPtr = _lookup<
          ffi.NativeFunction<struct_imaxdiv_t Function(intmax_t, intmax_t)>>(
      'imaxdiv');
  late final _imaxdiv =
      _imaxdivPtr.asFunction<struct_imaxdiv_t Function(int, int)>();

  int strtoimax(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoimax(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoimaxPtr = _lookup<
      ffi.NativeFunction<
          intmax_t Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoimax');
  late final _strtoimax = _strtoimaxPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoumax(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoumax(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoumaxPtr = _lookup<
      ffi.NativeFunction<
          uintmax_t Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoumax');
  late final _strtoumax = _strtoumaxPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int wcstoimax(
    ffi.Pointer<__gwchar_t> __nptr,
    ffi.Pointer<ffi.Pointer<__gwchar_t>> __endptr,
    int __base,
  ) {
    return _wcstoimax(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _wcstoimaxPtr = _lookup<
      ffi.NativeFunction<
          intmax_t Function(ffi.Pointer<__gwchar_t>,
              ffi.Pointer<ffi.Pointer<__gwchar_t>>, ffi.Int)>>('wcstoimax');
  late final _wcstoimax = _wcstoimaxPtr.asFunction<
      int Function(ffi.Pointer<__gwchar_t>,
          ffi.Pointer<ffi.Pointer<__gwchar_t>>, int)>();

  int wcstoumax(
    ffi.Pointer<__gwchar_t> __nptr,
    ffi.Pointer<ffi.Pointer<__gwchar_t>> __endptr,
    int __base,
  ) {
    return _wcstoumax(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _wcstoumaxPtr = _lookup<
      ffi.NativeFunction<
          uintmax_t Function(ffi.Pointer<__gwchar_t>,
              ffi.Pointer<ffi.Pointer<__gwchar_t>>, ffi.Int)>>('wcstoumax');
  late final _wcstoumax = _wcstoumaxPtr.asFunction<
      int Function(ffi.Pointer<__gwchar_t>,
          ffi.Pointer<ffi.Pointer<__gwchar_t>>, int)>();

  void wl_list_init(
    ffi.Pointer<struct_wl_list> list,
  ) {
    return _wl_list_init(
      list,
    );
  }

  late final _wl_list_initPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<struct_wl_list>)>>(
      'wl_list_init');
  late final _wl_list_init =
      _wl_list_initPtr.asFunction<void Function(ffi.Pointer<struct_wl_list>)>();

  void wl_list_insert(
    ffi.Pointer<struct_wl_list> list,
    ffi.Pointer<struct_wl_list> elm,
  ) {
    return _wl_list_insert(
      list,
      elm,
    );
  }

  late final _wl_list_insertPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wl_list>,
              ffi.Pointer<struct_wl_list>)>>('wl_list_insert');
  late final _wl_list_insert = _wl_list_insertPtr.asFunction<
      void Function(
          ffi.Pointer<struct_wl_list>, ffi.Pointer<struct_wl_list>)>();

  void wl_list_remove(
    ffi.Pointer<struct_wl_list> elm,
  ) {
    return _wl_list_remove(
      elm,
    );
  }

  late final _wl_list_removePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<struct_wl_list>)>>(
      'wl_list_remove');
  late final _wl_list_remove = _wl_list_removePtr
      .asFunction<void Function(ffi.Pointer<struct_wl_list>)>();

  int wl_list_length(
    ffi.Pointer<struct_wl_list> list,
  ) {
    return _wl_list_length(
      list,
    );
  }

  late final _wl_list_lengthPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<struct_wl_list>)>>(
      'wl_list_length');
  late final _wl_list_length = _wl_list_lengthPtr
      .asFunction<int Function(ffi.Pointer<struct_wl_list>)>();

  int wl_list_empty(
    ffi.Pointer<struct_wl_list> list,
  ) {
    return _wl_list_empty(
      list,
    );
  }

  late final _wl_list_emptyPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<struct_wl_list>)>>(
      'wl_list_empty');
  late final _wl_list_empty =
      _wl_list_emptyPtr.asFunction<int Function(ffi.Pointer<struct_wl_list>)>();

  void wl_list_insert_list(
    ffi.Pointer<struct_wl_list> list,
    ffi.Pointer<struct_wl_list> other,
  ) {
    return _wl_list_insert_list(
      list,
      other,
    );
  }

  late final _wl_list_insert_listPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wl_list>,
              ffi.Pointer<struct_wl_list>)>>('wl_list_insert_list');
  late final _wl_list_insert_list = _wl_list_insert_listPtr.asFunction<
      void Function(
          ffi.Pointer<struct_wl_list>, ffi.Pointer<struct_wl_list>)>();

  void wl_array_init(
    ffi.Pointer<struct_wl_array> array,
  ) {
    return _wl_array_init(
      array,
    );
  }

  late final _wl_array_initPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<struct_wl_array>)>>(
      'wl_array_init');
  late final _wl_array_init = _wl_array_initPtr
      .asFunction<void Function(ffi.Pointer<struct_wl_array>)>();

  void wl_array_release(
    ffi.Pointer<struct_wl_array> array,
  ) {
    return _wl_array_release(
      array,
    );
  }

  late final _wl_array_releasePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<struct_wl_array>)>>(
      'wl_array_release');
  late final _wl_array_release = _wl_array_releasePtr
      .asFunction<void Function(ffi.Pointer<struct_wl_array>)>();

  ffi.Pointer<ffi.Void> wl_array_add(
    ffi.Pointer<struct_wl_array> array,
    int size,
  ) {
    return _wl_array_add(
      array,
      size,
    );
  }

  late final _wl_array_addPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<struct_wl_array>, ffi.Size)>>('wl_array_add');
  late final _wl_array_add = _wl_array_addPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<struct_wl_array>, int)>();

  int wl_array_copy(
    ffi.Pointer<struct_wl_array> array,
    ffi.Pointer<struct_wl_array> source,
  ) {
    return _wl_array_copy(
      array,
      source,
    );
  }

  late final _wl_array_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<struct_wl_array>,
              ffi.Pointer<struct_wl_array>)>>('wl_array_copy');
  late final _wl_array_copy = _wl_array_copyPtr.asFunction<
      int Function(
          ffi.Pointer<struct_wl_array>, ffi.Pointer<struct_wl_array>)>();

  ffi.Pointer<struct_wl_event_loop> wl_event_loop_create() {
    return _wl_event_loop_create();
  }

  late final _wl_event_loop_createPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<struct_wl_event_loop> Function()>>(
          'wl_event_loop_create');
  late final _wl_event_loop_create = _wl_event_loop_createPtr
      .asFunction<ffi.Pointer<struct_wl_event_loop> Function()>();

  void wl_event_loop_destroy(
    ffi.Pointer<struct_wl_event_loop> loop,
  ) {
    return _wl_event_loop_destroy(
      loop,
    );
  }

  late final _wl_event_loop_destroyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wl_event_loop>)>>('wl_event_loop_destroy');
  late final _wl_event_loop_destroy = _wl_event_loop_destroyPtr
      .asFunction<void Function(ffi.Pointer<struct_wl_event_loop>)>();

  ffi.Pointer<struct_wl_event_source> wl_event_loop_add_fd(
    ffi.Pointer<struct_wl_event_loop> loop,
    int fd,
    int mask,
    wl_event_loop_fd_func_t func,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _wl_event_loop_add_fd(
      loop,
      fd,
      mask,
      func,
      data,
    );
  }

  late final _wl_event_loop_add_fdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<struct_wl_event_source> Function(
              ffi.Pointer<struct_wl_event_loop>,
              ffi.Int,
              ffi.Uint32,
              wl_event_loop_fd_func_t,
              ffi.Pointer<ffi.Void>)>>('wl_event_loop_add_fd');
  late final _wl_event_loop_add_fd = _wl_event_loop_add_fdPtr.asFunction<
      ffi.Pointer<struct_wl_event_source> Function(
          ffi.Pointer<struct_wl_event_loop>,
          int,
          int,
          wl_event_loop_fd_func_t,
          ffi.Pointer<ffi.Void>)>();

  int wl_event_source_fd_update(
    ffi.Pointer<struct_wl_event_source> source,
    int mask,
  ) {
    return _wl_event_source_fd_update(
      source,
      mask,
    );
  }

  late final _wl_event_source_fd_updatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<struct_wl_event_source>,
              ffi.Uint32)>>('wl_event_source_fd_update');
  late final _wl_event_source_fd_update = _wl_event_source_fd_updatePtr
      .asFunction<int Function(ffi.Pointer<struct_wl_event_source>, int)>();

  ffi.Pointer<struct_wl_event_source> wl_event_loop_add_timer(
    ffi.Pointer<struct_wl_event_loop> loop,
    wl_event_loop_timer_func_t func,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _wl_event_loop_add_timer(
      loop,
      func,
      data,
    );
  }

  late final _wl_event_loop_add_timerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<struct_wl_event_source> Function(
              ffi.Pointer<struct_wl_event_loop>,
              wl_event_loop_timer_func_t,
              ffi.Pointer<ffi.Void>)>>('wl_event_loop_add_timer');
  late final _wl_event_loop_add_timer = _wl_event_loop_add_timerPtr.asFunction<
      ffi.Pointer<struct_wl_event_source> Function(
          ffi.Pointer<struct_wl_event_loop>,
          wl_event_loop_timer_func_t,
          ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<struct_wl_event_source> wl_event_loop_add_signal(
    ffi.Pointer<struct_wl_event_loop> loop,
    int signal_number,
    wl_event_loop_signal_func_t func,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _wl_event_loop_add_signal(
      loop,
      signal_number,
      func,
      data,
    );
  }

  late final _wl_event_loop_add_signalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<struct_wl_event_source> Function(
              ffi.Pointer<struct_wl_event_loop>,
              ffi.Int,
              wl_event_loop_signal_func_t,
              ffi.Pointer<ffi.Void>)>>('wl_event_loop_add_signal');
  late final _wl_event_loop_add_signal =
      _wl_event_loop_add_signalPtr.asFunction<
          ffi.Pointer<struct_wl_event_source> Function(
              ffi.Pointer<struct_wl_event_loop>,
              int,
              wl_event_loop_signal_func_t,
              ffi.Pointer<ffi.Void>)>();

  int wl_event_source_timer_update(
    ffi.Pointer<struct_wl_event_source> source,
    int ms_delay,
  ) {
    return _wl_event_source_timer_update(
      source,
      ms_delay,
    );
  }

  late final _wl_event_source_timer_updatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<struct_wl_event_source>,
              ffi.Int)>>('wl_event_source_timer_update');
  late final _wl_event_source_timer_update = _wl_event_source_timer_updatePtr
      .asFunction<int Function(ffi.Pointer<struct_wl_event_source>, int)>();

  int wl_event_source_remove(
    ffi.Pointer<struct_wl_event_source> source,
  ) {
    return _wl_event_source_remove(
      source,
    );
  }

  late final _wl_event_source_removePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<struct_wl_event_source>)>>('wl_event_source_remove');
  late final _wl_event_source_remove = _wl_event_source_removePtr
      .asFunction<int Function(ffi.Pointer<struct_wl_event_source>)>();

  void wl_event_source_check(
    ffi.Pointer<struct_wl_event_source> source,
  ) {
    return _wl_event_source_check(
      source,
    );
  }

  late final _wl_event_source_checkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wl_event_source>)>>('wl_event_source_check');
  late final _wl_event_source_check = _wl_event_source_checkPtr
      .asFunction<void Function(ffi.Pointer<struct_wl_event_source>)>();

  int wl_event_loop_dispatch(
    ffi.Pointer<struct_wl_event_loop> loop,
    int timeout,
  ) {
    return _wl_event_loop_dispatch(
      loop,
      timeout,
    );
  }

  late final _wl_event_loop_dispatchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<struct_wl_event_loop>,
              ffi.Int)>>('wl_event_loop_dispatch');
  late final _wl_event_loop_dispatch = _wl_event_loop_dispatchPtr
      .asFunction<int Function(ffi.Pointer<struct_wl_event_loop>, int)>();

  void wl_event_loop_dispatch_idle(
    ffi.Pointer<struct_wl_event_loop> loop,
  ) {
    return _wl_event_loop_dispatch_idle(
      loop,
    );
  }

  late final _wl_event_loop_dispatch_idlePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<struct_wl_event_loop>)>>(
      'wl_event_loop_dispatch_idle');
  late final _wl_event_loop_dispatch_idle = _wl_event_loop_dispatch_idlePtr
      .asFunction<void Function(ffi.Pointer<struct_wl_event_loop>)>();

  ffi.Pointer<struct_wl_event_source> wl_event_loop_add_idle(
    ffi.Pointer<struct_wl_event_loop> loop,
    wl_event_loop_idle_func_t func,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _wl_event_loop_add_idle(
      loop,
      func,
      data,
    );
  }

  late final _wl_event_loop_add_idlePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<struct_wl_event_source> Function(
              ffi.Pointer<struct_wl_event_loop>,
              wl_event_loop_idle_func_t,
              ffi.Pointer<ffi.Void>)>>('wl_event_loop_add_idle');
  late final _wl_event_loop_add_idle = _wl_event_loop_add_idlePtr.asFunction<
      ffi.Pointer<struct_wl_event_source> Function(
          ffi.Pointer<struct_wl_event_loop>,
          wl_event_loop_idle_func_t,
          ffi.Pointer<ffi.Void>)>();

  int wl_event_loop_get_fd(
    ffi.Pointer<struct_wl_event_loop> loop,
  ) {
    return _wl_event_loop_get_fd(
      loop,
    );
  }

  late final _wl_event_loop_get_fdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<struct_wl_event_loop>)>>('wl_event_loop_get_fd');
  late final _wl_event_loop_get_fd = _wl_event_loop_get_fdPtr
      .asFunction<int Function(ffi.Pointer<struct_wl_event_loop>)>();

  void wl_event_loop_add_destroy_listener(
    ffi.Pointer<struct_wl_event_loop> loop,
    ffi.Pointer<struct_wl_listener> listener,
  ) {
    return _wl_event_loop_add_destroy_listener(
      loop,
      listener,
    );
  }

  late final _wl_event_loop_add_destroy_listenerPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<struct_wl_event_loop>,
                  ffi.Pointer<struct_wl_listener>)>>(
      'wl_event_loop_add_destroy_listener');
  late final _wl_event_loop_add_destroy_listener =
      _wl_event_loop_add_destroy_listenerPtr.asFunction<
          void Function(ffi.Pointer<struct_wl_event_loop>,
              ffi.Pointer<struct_wl_listener>)>();

  ffi.Pointer<struct_wl_listener> wl_event_loop_get_destroy_listener(
    ffi.Pointer<struct_wl_event_loop> loop,
    wl_notify_func_t notify,
  ) {
    return _wl_event_loop_get_destroy_listener(
      loop,
      notify,
    );
  }

  late final _wl_event_loop_get_destroy_listenerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<struct_wl_listener> Function(
              ffi.Pointer<struct_wl_event_loop>,
              wl_notify_func_t)>>('wl_event_loop_get_destroy_listener');
  late final _wl_event_loop_get_destroy_listener =
      _wl_event_loop_get_destroy_listenerPtr.asFunction<
          ffi.Pointer<struct_wl_listener> Function(
              ffi.Pointer<struct_wl_event_loop>, wl_notify_func_t)>();

  ffi.Pointer<struct_wl_display> wl_display_create() {
    return _wl_display_create();
  }

  late final _wl_display_createPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<struct_wl_display> Function()>>(
          'wl_display_create');
  late final _wl_display_create = _wl_display_createPtr
      .asFunction<ffi.Pointer<struct_wl_display> Function()>();

  void wl_display_destroy(
    ffi.Pointer<struct_wl_display> display,
  ) {
    return _wl_display_destroy(
      display,
    );
  }

  late final _wl_display_destroyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wl_display>)>>('wl_display_destroy');
  late final _wl_display_destroy = _wl_display_destroyPtr
      .asFunction<void Function(ffi.Pointer<struct_wl_display>)>();

  ffi.Pointer<struct_wl_event_loop> wl_display_get_event_loop(
    ffi.Pointer<struct_wl_display> display,
  ) {
    return _wl_display_get_event_loop(
      display,
    );
  }

  late final _wl_display_get_event_loopPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<struct_wl_event_loop> Function(
              ffi.Pointer<struct_wl_display>)>>('wl_display_get_event_loop');
  late final _wl_display_get_event_loop =
      _wl_display_get_event_loopPtr.asFunction<
          ffi.Pointer<struct_wl_event_loop> Function(
              ffi.Pointer<struct_wl_display>)>();

  int wl_display_add_socket(
    ffi.Pointer<struct_wl_display> display,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _wl_display_add_socket(
      display,
      name,
    );
  }

  late final _wl_display_add_socketPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<struct_wl_display>,
              ffi.Pointer<ffi.Char>)>>('wl_display_add_socket');
  late final _wl_display_add_socket = _wl_display_add_socketPtr.asFunction<
      int Function(ffi.Pointer<struct_wl_display>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> wl_display_add_socket_auto(
    ffi.Pointer<struct_wl_display> display,
  ) {
    return _wl_display_add_socket_auto(
      display,
    );
  }

  late final _wl_display_add_socket_autoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<struct_wl_display>)>>('wl_display_add_socket_auto');
  late final _wl_display_add_socket_auto =
      _wl_display_add_socket_autoPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<struct_wl_display>)>();

  int wl_display_add_socket_fd(
    ffi.Pointer<struct_wl_display> display,
    int sock_fd,
  ) {
    return _wl_display_add_socket_fd(
      display,
      sock_fd,
    );
  }

  late final _wl_display_add_socket_fdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<struct_wl_display>,
              ffi.Int)>>('wl_display_add_socket_fd');
  late final _wl_display_add_socket_fd = _wl_display_add_socket_fdPtr
      .asFunction<int Function(ffi.Pointer<struct_wl_display>, int)>();

  void wl_display_terminate(
    ffi.Pointer<struct_wl_display> display,
  ) {
    return _wl_display_terminate(
      display,
    );
  }

  late final _wl_display_terminatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wl_display>)>>('wl_display_terminate');
  late final _wl_display_terminate = _wl_display_terminatePtr
      .asFunction<void Function(ffi.Pointer<struct_wl_display>)>();

  void wl_display_run(
    ffi.Pointer<struct_wl_display> display,
  ) {
    return _wl_display_run(
      display,
    );
  }

  late final _wl_display_runPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wl_display>)>>('wl_display_run');
  late final _wl_display_run = _wl_display_runPtr
      .asFunction<void Function(ffi.Pointer<struct_wl_display>)>();

  void wl_display_flush_clients(
    ffi.Pointer<struct_wl_display> display,
  ) {
    return _wl_display_flush_clients(
      display,
    );
  }

  late final _wl_display_flush_clientsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wl_display>)>>('wl_display_flush_clients');
  late final _wl_display_flush_clients = _wl_display_flush_clientsPtr
      .asFunction<void Function(ffi.Pointer<struct_wl_display>)>();

  void wl_display_destroy_clients(
    ffi.Pointer<struct_wl_display> display,
  ) {
    return _wl_display_destroy_clients(
      display,
    );
  }

  late final _wl_display_destroy_clientsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wl_display>)>>('wl_display_destroy_clients');
  late final _wl_display_destroy_clients = _wl_display_destroy_clientsPtr
      .asFunction<void Function(ffi.Pointer<struct_wl_display>)>();

  int wl_display_get_serial(
    ffi.Pointer<struct_wl_display> display,
  ) {
    return _wl_display_get_serial(
      display,
    );
  }

  late final _wl_display_get_serialPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint32 Function(
              ffi.Pointer<struct_wl_display>)>>('wl_display_get_serial');
  late final _wl_display_get_serial = _wl_display_get_serialPtr
      .asFunction<int Function(ffi.Pointer<struct_wl_display>)>();

  int wl_display_next_serial(
    ffi.Pointer<struct_wl_display> display,
  ) {
    return _wl_display_next_serial(
      display,
    );
  }

  late final _wl_display_next_serialPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint32 Function(
              ffi.Pointer<struct_wl_display>)>>('wl_display_next_serial');
  late final _wl_display_next_serial = _wl_display_next_serialPtr
      .asFunction<int Function(ffi.Pointer<struct_wl_display>)>();

  void wl_display_add_destroy_listener(
    ffi.Pointer<struct_wl_display> display,
    ffi.Pointer<struct_wl_listener> listener,
  ) {
    return _wl_display_add_destroy_listener(
      display,
      listener,
    );
  }

  late final _wl_display_add_destroy_listenerPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<struct_wl_display>,
                  ffi.Pointer<struct_wl_listener>)>>(
      'wl_display_add_destroy_listener');
  late final _wl_display_add_destroy_listener =
      _wl_display_add_destroy_listenerPtr.asFunction<
          void Function(ffi.Pointer<struct_wl_display>,
              ffi.Pointer<struct_wl_listener>)>();

  void wl_display_add_client_created_listener(
    ffi.Pointer<struct_wl_display> display,
    ffi.Pointer<struct_wl_listener> listener,
  ) {
    return _wl_display_add_client_created_listener(
      display,
      listener,
    );
  }

  late final _wl_display_add_client_created_listenerPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<struct_wl_display>,
                  ffi.Pointer<struct_wl_listener>)>>(
      'wl_display_add_client_created_listener');
  late final _wl_display_add_client_created_listener =
      _wl_display_add_client_created_listenerPtr.asFunction<
          void Function(ffi.Pointer<struct_wl_display>,
              ffi.Pointer<struct_wl_listener>)>();

  ffi.Pointer<struct_wl_listener> wl_display_get_destroy_listener(
    ffi.Pointer<struct_wl_display> display,
    wl_notify_func_t notify,
  ) {
    return _wl_display_get_destroy_listener(
      display,
      notify,
    );
  }

  late final _wl_display_get_destroy_listenerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<struct_wl_listener> Function(
              ffi.Pointer<struct_wl_display>,
              wl_notify_func_t)>>('wl_display_get_destroy_listener');
  late final _wl_display_get_destroy_listener =
      _wl_display_get_destroy_listenerPtr.asFunction<
          ffi.Pointer<struct_wl_listener> Function(
              ffi.Pointer<struct_wl_display>, wl_notify_func_t)>();

  ffi.Pointer<struct_wl_global> wl_global_create(
    ffi.Pointer<struct_wl_display> display,
    ffi.Pointer<struct_wl_interface> interface1,
    int version,
    ffi.Pointer<ffi.Void> data,
    wl_global_bind_func_t bind,
  ) {
    return _wl_global_create(
      display,
      interface1,
      version,
      data,
      bind,
    );
  }

  late final _wl_global_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<struct_wl_global> Function(
              ffi.Pointer<struct_wl_display>,
              ffi.Pointer<struct_wl_interface>,
              ffi.Int,
              ffi.Pointer<ffi.Void>,
              wl_global_bind_func_t)>>('wl_global_create');
  late final _wl_global_create = _wl_global_createPtr.asFunction<
      ffi.Pointer<struct_wl_global> Function(
          ffi.Pointer<struct_wl_display>,
          ffi.Pointer<struct_wl_interface>,
          int,
          ffi.Pointer<ffi.Void>,
          wl_global_bind_func_t)>();

  void wl_global_remove(
    ffi.Pointer<struct_wl_global> global,
  ) {
    return _wl_global_remove(
      global,
    );
  }

  late final _wl_global_removePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<struct_wl_global>)>>(
      'wl_global_remove');
  late final _wl_global_remove = _wl_global_removePtr
      .asFunction<void Function(ffi.Pointer<struct_wl_global>)>();

  void wl_global_destroy(
    ffi.Pointer<struct_wl_global> global,
  ) {
    return _wl_global_destroy(
      global,
    );
  }

  late final _wl_global_destroyPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<struct_wl_global>)>>(
      'wl_global_destroy');
  late final _wl_global_destroy = _wl_global_destroyPtr
      .asFunction<void Function(ffi.Pointer<struct_wl_global>)>();

  void wl_display_set_global_filter(
    ffi.Pointer<struct_wl_display> display,
    wl_display_global_filter_func_t filter,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _wl_display_set_global_filter(
      display,
      filter,
      data,
    );
  }

  late final _wl_display_set_global_filterPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wl_display>,
              wl_display_global_filter_func_t,
              ffi.Pointer<ffi.Void>)>>('wl_display_set_global_filter');
  late final _wl_display_set_global_filter =
      _wl_display_set_global_filterPtr.asFunction<
          void Function(ffi.Pointer<struct_wl_display>,
              wl_display_global_filter_func_t, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<struct_wl_interface> wl_global_get_interface(
    ffi.Pointer<struct_wl_global> global,
  ) {
    return _wl_global_get_interface(
      global,
    );
  }

  late final _wl_global_get_interfacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<struct_wl_interface> Function(
              ffi.Pointer<struct_wl_global>)>>('wl_global_get_interface');
  late final _wl_global_get_interface = _wl_global_get_interfacePtr.asFunction<
      ffi.Pointer<struct_wl_interface> Function(
          ffi.Pointer<struct_wl_global>)>();

  int wl_global_get_version(
    ffi.Pointer<struct_wl_global> global,
  ) {
    return _wl_global_get_version(
      global,
    );
  }

  late final _wl_global_get_versionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint32 Function(
              ffi.Pointer<struct_wl_global>)>>('wl_global_get_version');
  late final _wl_global_get_version = _wl_global_get_versionPtr
      .asFunction<int Function(ffi.Pointer<struct_wl_global>)>();

  ffi.Pointer<struct_wl_display> wl_global_get_display(
    ffi.Pointer<struct_wl_global> global,
  ) {
    return _wl_global_get_display(
      global,
    );
  }

  late final _wl_global_get_displayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<struct_wl_display> Function(
              ffi.Pointer<struct_wl_global>)>>('wl_global_get_display');
  late final _wl_global_get_display = _wl_global_get_displayPtr.asFunction<
      ffi.Pointer<struct_wl_display> Function(ffi.Pointer<struct_wl_global>)>();

  ffi.Pointer<ffi.Void> wl_global_get_user_data(
    ffi.Pointer<struct_wl_global> global,
  ) {
    return _wl_global_get_user_data(
      global,
    );
  }

  late final _wl_global_get_user_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<struct_wl_global>)>>('wl_global_get_user_data');
  late final _wl_global_get_user_data = _wl_global_get_user_dataPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<struct_wl_global>)>();

  void wl_global_set_user_data(
    ffi.Pointer<struct_wl_global> global,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _wl_global_set_user_data(
      global,
      data,
    );
  }

  late final _wl_global_set_user_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wl_global>,
              ffi.Pointer<ffi.Void>)>>('wl_global_set_user_data');
  late final _wl_global_set_user_data = _wl_global_set_user_dataPtr.asFunction<
      void Function(ffi.Pointer<struct_wl_global>, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<struct_wl_client> wl_client_create(
    ffi.Pointer<struct_wl_display> display,
    int fd,
  ) {
    return _wl_client_create(
      display,
      fd,
    );
  }

  late final _wl_client_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<struct_wl_client> Function(
              ffi.Pointer<struct_wl_display>, ffi.Int)>>('wl_client_create');
  late final _wl_client_create = _wl_client_createPtr.asFunction<
      ffi.Pointer<struct_wl_client> Function(
          ffi.Pointer<struct_wl_display>, int)>();

  ffi.Pointer<struct_wl_list> wl_display_get_client_list(
    ffi.Pointer<struct_wl_display> display,
  ) {
    return _wl_display_get_client_list(
      display,
    );
  }

  late final _wl_display_get_client_listPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<struct_wl_list> Function(
              ffi.Pointer<struct_wl_display>)>>('wl_display_get_client_list');
  late final _wl_display_get_client_list =
      _wl_display_get_client_listPtr.asFunction<
          ffi.Pointer<struct_wl_list> Function(
              ffi.Pointer<struct_wl_display>)>();

  ffi.Pointer<struct_wl_list> wl_client_get_link(
    ffi.Pointer<struct_wl_client> client,
  ) {
    return _wl_client_get_link(
      client,
    );
  }

  late final _wl_client_get_linkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<struct_wl_list> Function(
              ffi.Pointer<struct_wl_client>)>>('wl_client_get_link');
  late final _wl_client_get_link = _wl_client_get_linkPtr.asFunction<
      ffi.Pointer<struct_wl_list> Function(ffi.Pointer<struct_wl_client>)>();

  ffi.Pointer<struct_wl_client> wl_client_from_link(
    ffi.Pointer<struct_wl_list> link,
  ) {
    return _wl_client_from_link(
      link,
    );
  }

  late final _wl_client_from_linkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<struct_wl_client> Function(
              ffi.Pointer<struct_wl_list>)>>('wl_client_from_link');
  late final _wl_client_from_link = _wl_client_from_linkPtr.asFunction<
      ffi.Pointer<struct_wl_client> Function(ffi.Pointer<struct_wl_list>)>();

  void wl_client_destroy(
    ffi.Pointer<struct_wl_client> client,
  ) {
    return _wl_client_destroy(
      client,
    );
  }

  late final _wl_client_destroyPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<struct_wl_client>)>>(
      'wl_client_destroy');
  late final _wl_client_destroy = _wl_client_destroyPtr
      .asFunction<void Function(ffi.Pointer<struct_wl_client>)>();

  void wl_client_flush(
    ffi.Pointer<struct_wl_client> client,
  ) {
    return _wl_client_flush(
      client,
    );
  }

  late final _wl_client_flushPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<struct_wl_client>)>>(
      'wl_client_flush');
  late final _wl_client_flush = _wl_client_flushPtr
      .asFunction<void Function(ffi.Pointer<struct_wl_client>)>();

  void wl_client_get_credentials(
    ffi.Pointer<struct_wl_client> client,
    ffi.Pointer<pid_t> pid,
    ffi.Pointer<uid_t> uid,
    ffi.Pointer<gid_t> gid,
  ) {
    return _wl_client_get_credentials(
      client,
      pid,
      uid,
      gid,
    );
  }

  late final _wl_client_get_credentialsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wl_client>,
              ffi.Pointer<pid_t>,
              ffi.Pointer<uid_t>,
              ffi.Pointer<gid_t>)>>('wl_client_get_credentials');
  late final _wl_client_get_credentials =
      _wl_client_get_credentialsPtr.asFunction<
          void Function(ffi.Pointer<struct_wl_client>, ffi.Pointer<pid_t>,
              ffi.Pointer<uid_t>, ffi.Pointer<gid_t>)>();

  int wl_client_get_fd(
    ffi.Pointer<struct_wl_client> client,
  ) {
    return _wl_client_get_fd(
      client,
    );
  }

  late final _wl_client_get_fdPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<struct_wl_client>)>>(
      'wl_client_get_fd');
  late final _wl_client_get_fd = _wl_client_get_fdPtr
      .asFunction<int Function(ffi.Pointer<struct_wl_client>)>();

  void wl_client_add_destroy_listener(
    ffi.Pointer<struct_wl_client> client,
    ffi.Pointer<struct_wl_listener> listener,
  ) {
    return _wl_client_add_destroy_listener(
      client,
      listener,
    );
  }

  late final _wl_client_add_destroy_listenerPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<struct_wl_client>,
                  ffi.Pointer<struct_wl_listener>)>>(
      'wl_client_add_destroy_listener');
  late final _wl_client_add_destroy_listener =
      _wl_client_add_destroy_listenerPtr.asFunction<
          void Function(ffi.Pointer<struct_wl_client>,
              ffi.Pointer<struct_wl_listener>)>();

  ffi.Pointer<struct_wl_listener> wl_client_get_destroy_listener(
    ffi.Pointer<struct_wl_client> client,
    wl_notify_func_t notify,
  ) {
    return _wl_client_get_destroy_listener(
      client,
      notify,
    );
  }

  late final _wl_client_get_destroy_listenerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<struct_wl_listener> Function(
              ffi.Pointer<struct_wl_client>,
              wl_notify_func_t)>>('wl_client_get_destroy_listener');
  late final _wl_client_get_destroy_listener =
      _wl_client_get_destroy_listenerPtr.asFunction<
          ffi.Pointer<struct_wl_listener> Function(
              ffi.Pointer<struct_wl_client>, wl_notify_func_t)>();

  ffi.Pointer<struct_wl_resource> wl_client_get_object(
    ffi.Pointer<struct_wl_client> client,
    int id,
  ) {
    return _wl_client_get_object(
      client,
      id,
    );
  }

  late final _wl_client_get_objectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<struct_wl_resource> Function(
              ffi.Pointer<struct_wl_client>,
              ffi.Uint32)>>('wl_client_get_object');
  late final _wl_client_get_object = _wl_client_get_objectPtr.asFunction<
      ffi.Pointer<struct_wl_resource> Function(
          ffi.Pointer<struct_wl_client>, int)>();

  void wl_client_post_no_memory(
    ffi.Pointer<struct_wl_client> client,
  ) {
    return _wl_client_post_no_memory(
      client,
    );
  }

  late final _wl_client_post_no_memoryPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<struct_wl_client>)>>(
      'wl_client_post_no_memory');
  late final _wl_client_post_no_memory = _wl_client_post_no_memoryPtr
      .asFunction<void Function(ffi.Pointer<struct_wl_client>)>();

  void wl_client_post_implementation_error(
    ffi.Pointer<struct_wl_client> client,
    ffi.Pointer<ffi.Char> msg,
  ) {
    return _wl_client_post_implementation_error(
      client,
      msg,
    );
  }

  late final _wl_client_post_implementation_errorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wl_client>,
              ffi.Pointer<ffi.Char>)>>('wl_client_post_implementation_error');
  late final _wl_client_post_implementation_error =
      _wl_client_post_implementation_errorPtr.asFunction<
          void Function(
              ffi.Pointer<struct_wl_client>, ffi.Pointer<ffi.Char>)>();

  void wl_client_add_resource_created_listener(
    ffi.Pointer<struct_wl_client> client,
    ffi.Pointer<struct_wl_listener> listener,
  ) {
    return _wl_client_add_resource_created_listener(
      client,
      listener,
    );
  }

  late final _wl_client_add_resource_created_listenerPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<struct_wl_client>,
                  ffi.Pointer<struct_wl_listener>)>>(
      'wl_client_add_resource_created_listener');
  late final _wl_client_add_resource_created_listener =
      _wl_client_add_resource_created_listenerPtr.asFunction<
          void Function(ffi.Pointer<struct_wl_client>,
              ffi.Pointer<struct_wl_listener>)>();

  void wl_client_for_each_resource(
    ffi.Pointer<struct_wl_client> client,
    wl_client_for_each_resource_iterator_func_t iterator,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _wl_client_for_each_resource(
      client,
      iterator,
      user_data,
    );
  }

  late final _wl_client_for_each_resourcePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wl_client>,
              wl_client_for_each_resource_iterator_func_t,
              ffi.Pointer<ffi.Void>)>>('wl_client_for_each_resource');
  late final _wl_client_for_each_resource =
      _wl_client_for_each_resourcePtr.asFunction<
          void Function(
              ffi.Pointer<struct_wl_client>,
              wl_client_for_each_resource_iterator_func_t,
              ffi.Pointer<ffi.Void>)>();

  void wl_signal_emit_mutable(
    ffi.Pointer<struct_wl_signal> signal,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _wl_signal_emit_mutable(
      signal,
      data,
    );
  }

  late final _wl_signal_emit_mutablePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wl_signal>,
              ffi.Pointer<ffi.Void>)>>('wl_signal_emit_mutable');
  late final _wl_signal_emit_mutable = _wl_signal_emit_mutablePtr.asFunction<
      void Function(ffi.Pointer<struct_wl_signal>, ffi.Pointer<ffi.Void>)>();

  void wl_resource_post_event(
    ffi.Pointer<struct_wl_resource> resource,
    int opcode,
  ) {
    return _wl_resource_post_event(
      resource,
      opcode,
    );
  }

  late final _wl_resource_post_eventPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wl_resource>,
              ffi.Uint32)>>('wl_resource_post_event');
  late final _wl_resource_post_event = _wl_resource_post_eventPtr
      .asFunction<void Function(ffi.Pointer<struct_wl_resource>, int)>();

  void wl_resource_post_event_array(
    ffi.Pointer<struct_wl_resource> resource,
    int opcode,
    ffi.Pointer<wl_argument> args,
  ) {
    return _wl_resource_post_event_array(
      resource,
      opcode,
      args,
    );
  }

  late final _wl_resource_post_event_arrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wl_resource>, ffi.Uint32,
              ffi.Pointer<wl_argument>)>>('wl_resource_post_event_array');
  late final _wl_resource_post_event_array =
      _wl_resource_post_event_arrayPtr.asFunction<
          void Function(ffi.Pointer<struct_wl_resource>, int,
              ffi.Pointer<wl_argument>)>();

  void wl_resource_queue_event(
    ffi.Pointer<struct_wl_resource> resource,
    int opcode,
  ) {
    return _wl_resource_queue_event(
      resource,
      opcode,
    );
  }

  late final _wl_resource_queue_eventPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wl_resource>,
              ffi.Uint32)>>('wl_resource_queue_event');
  late final _wl_resource_queue_event = _wl_resource_queue_eventPtr
      .asFunction<void Function(ffi.Pointer<struct_wl_resource>, int)>();

  void wl_resource_queue_event_array(
    ffi.Pointer<struct_wl_resource> resource,
    int opcode,
    ffi.Pointer<wl_argument> args,
  ) {
    return _wl_resource_queue_event_array(
      resource,
      opcode,
      args,
    );
  }

  late final _wl_resource_queue_event_arrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wl_resource>, ffi.Uint32,
              ffi.Pointer<wl_argument>)>>('wl_resource_queue_event_array');
  late final _wl_resource_queue_event_array =
      _wl_resource_queue_event_arrayPtr.asFunction<
          void Function(ffi.Pointer<struct_wl_resource>, int,
              ffi.Pointer<wl_argument>)>();

  void wl_resource_post_error(
    ffi.Pointer<struct_wl_resource> resource,
    int code,
    ffi.Pointer<ffi.Char> msg,
  ) {
    return _wl_resource_post_error(
      resource,
      code,
      msg,
    );
  }

  late final _wl_resource_post_errorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wl_resource>, ffi.Uint32,
              ffi.Pointer<ffi.Char>)>>('wl_resource_post_error');
  late final _wl_resource_post_error = _wl_resource_post_errorPtr.asFunction<
      void Function(
          ffi.Pointer<struct_wl_resource>, int, ffi.Pointer<ffi.Char>)>();

  void wl_resource_post_no_memory(
    ffi.Pointer<struct_wl_resource> resource,
  ) {
    return _wl_resource_post_no_memory(
      resource,
    );
  }

  late final _wl_resource_post_no_memoryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wl_resource>)>>('wl_resource_post_no_memory');
  late final _wl_resource_post_no_memory = _wl_resource_post_no_memoryPtr
      .asFunction<void Function(ffi.Pointer<struct_wl_resource>)>();

  ffi.Pointer<struct_wl_display> wl_client_get_display(
    ffi.Pointer<struct_wl_client> client,
  ) {
    return _wl_client_get_display(
      client,
    );
  }

  late final _wl_client_get_displayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<struct_wl_display> Function(
              ffi.Pointer<struct_wl_client>)>>('wl_client_get_display');
  late final _wl_client_get_display = _wl_client_get_displayPtr.asFunction<
      ffi.Pointer<struct_wl_display> Function(ffi.Pointer<struct_wl_client>)>();

  ffi.Pointer<struct_wl_resource> wl_resource_create(
    ffi.Pointer<struct_wl_client> client,
    ffi.Pointer<struct_wl_interface> interface1,
    int version,
    int id,
  ) {
    return _wl_resource_create(
      client,
      interface1,
      version,
      id,
    );
  }

  late final _wl_resource_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<struct_wl_resource> Function(
              ffi.Pointer<struct_wl_client>,
              ffi.Pointer<struct_wl_interface>,
              ffi.Int,
              ffi.Uint32)>>('wl_resource_create');
  late final _wl_resource_create = _wl_resource_createPtr.asFunction<
      ffi.Pointer<struct_wl_resource> Function(ffi.Pointer<struct_wl_client>,
          ffi.Pointer<struct_wl_interface>, int, int)>();

  void wl_resource_set_implementation(
    ffi.Pointer<struct_wl_resource> resource,
    ffi.Pointer<ffi.Void> implementation,
    ffi.Pointer<ffi.Void> data,
    wl_resource_destroy_func_t destroy,
  ) {
    return _wl_resource_set_implementation(
      resource,
      implementation,
      data,
      destroy,
    );
  }

  late final _wl_resource_set_implementationPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wl_resource>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              wl_resource_destroy_func_t)>>('wl_resource_set_implementation');
  late final _wl_resource_set_implementation =
      _wl_resource_set_implementationPtr.asFunction<
          void Function(ffi.Pointer<struct_wl_resource>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, wl_resource_destroy_func_t)>();

  void wl_resource_set_dispatcher(
    ffi.Pointer<struct_wl_resource> resource,
    wl_dispatcher_func_t dispatcher,
    ffi.Pointer<ffi.Void> implementation,
    ffi.Pointer<ffi.Void> data,
    wl_resource_destroy_func_t destroy,
  ) {
    return _wl_resource_set_dispatcher(
      resource,
      dispatcher,
      implementation,
      data,
      destroy,
    );
  }

  late final _wl_resource_set_dispatcherPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wl_resource>,
              wl_dispatcher_func_t,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              wl_resource_destroy_func_t)>>('wl_resource_set_dispatcher');
  late final _wl_resource_set_dispatcher =
      _wl_resource_set_dispatcherPtr.asFunction<
          void Function(
              ffi.Pointer<struct_wl_resource>,
              wl_dispatcher_func_t,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              wl_resource_destroy_func_t)>();

  void wl_resource_destroy(
    ffi.Pointer<struct_wl_resource> resource,
  ) {
    return _wl_resource_destroy(
      resource,
    );
  }

  late final _wl_resource_destroyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wl_resource>)>>('wl_resource_destroy');
  late final _wl_resource_destroy = _wl_resource_destroyPtr
      .asFunction<void Function(ffi.Pointer<struct_wl_resource>)>();

  int wl_resource_get_id(
    ffi.Pointer<struct_wl_resource> resource,
  ) {
    return _wl_resource_get_id(
      resource,
    );
  }

  late final _wl_resource_get_idPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint32 Function(
              ffi.Pointer<struct_wl_resource>)>>('wl_resource_get_id');
  late final _wl_resource_get_id = _wl_resource_get_idPtr
      .asFunction<int Function(ffi.Pointer<struct_wl_resource>)>();

  ffi.Pointer<struct_wl_list> wl_resource_get_link(
    ffi.Pointer<struct_wl_resource> resource,
  ) {
    return _wl_resource_get_link(
      resource,
    );
  }

  late final _wl_resource_get_linkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<struct_wl_list> Function(
              ffi.Pointer<struct_wl_resource>)>>('wl_resource_get_link');
  late final _wl_resource_get_link = _wl_resource_get_linkPtr.asFunction<
      ffi.Pointer<struct_wl_list> Function(ffi.Pointer<struct_wl_resource>)>();

  ffi.Pointer<struct_wl_resource> wl_resource_from_link(
    ffi.Pointer<struct_wl_list> resource,
  ) {
    return _wl_resource_from_link(
      resource,
    );
  }

  late final _wl_resource_from_linkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<struct_wl_resource> Function(
              ffi.Pointer<struct_wl_list>)>>('wl_resource_from_link');
  late final _wl_resource_from_link = _wl_resource_from_linkPtr.asFunction<
      ffi.Pointer<struct_wl_resource> Function(ffi.Pointer<struct_wl_list>)>();

  ffi.Pointer<struct_wl_resource> wl_resource_find_for_client(
    ffi.Pointer<struct_wl_list> list,
    ffi.Pointer<struct_wl_client> client,
  ) {
    return _wl_resource_find_for_client(
      list,
      client,
    );
  }

  late final _wl_resource_find_for_clientPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<struct_wl_resource> Function(ffi.Pointer<struct_wl_list>,
              ffi.Pointer<struct_wl_client>)>>('wl_resource_find_for_client');
  late final _wl_resource_find_for_client =
      _wl_resource_find_for_clientPtr.asFunction<
          ffi.Pointer<struct_wl_resource> Function(
              ffi.Pointer<struct_wl_list>, ffi.Pointer<struct_wl_client>)>();

  ffi.Pointer<struct_wl_client> wl_resource_get_client(
    ffi.Pointer<struct_wl_resource> resource,
  ) {
    return _wl_resource_get_client(
      resource,
    );
  }

  late final _wl_resource_get_clientPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<struct_wl_client> Function(
              ffi.Pointer<struct_wl_resource>)>>('wl_resource_get_client');
  late final _wl_resource_get_client = _wl_resource_get_clientPtr.asFunction<
      ffi.Pointer<struct_wl_client> Function(
          ffi.Pointer<struct_wl_resource>)>();

  void wl_resource_set_user_data(
    ffi.Pointer<struct_wl_resource> resource,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _wl_resource_set_user_data(
      resource,
      data,
    );
  }

  late final _wl_resource_set_user_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wl_resource>,
              ffi.Pointer<ffi.Void>)>>('wl_resource_set_user_data');
  late final _wl_resource_set_user_data =
      _wl_resource_set_user_dataPtr.asFunction<
          void Function(
              ffi.Pointer<struct_wl_resource>, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> wl_resource_get_user_data(
    ffi.Pointer<struct_wl_resource> resource,
  ) {
    return _wl_resource_get_user_data(
      resource,
    );
  }

  late final _wl_resource_get_user_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<struct_wl_resource>)>>('wl_resource_get_user_data');
  late final _wl_resource_get_user_data =
      _wl_resource_get_user_dataPtr.asFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<struct_wl_resource>)>();

  int wl_resource_get_version(
    ffi.Pointer<struct_wl_resource> resource,
  ) {
    return _wl_resource_get_version(
      resource,
    );
  }

  late final _wl_resource_get_versionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<struct_wl_resource>)>>('wl_resource_get_version');
  late final _wl_resource_get_version = _wl_resource_get_versionPtr
      .asFunction<int Function(ffi.Pointer<struct_wl_resource>)>();

  void wl_resource_set_destructor(
    ffi.Pointer<struct_wl_resource> resource,
    wl_resource_destroy_func_t destroy,
  ) {
    return _wl_resource_set_destructor(
      resource,
      destroy,
    );
  }

  late final _wl_resource_set_destructorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wl_resource>,
              wl_resource_destroy_func_t)>>('wl_resource_set_destructor');
  late final _wl_resource_set_destructor =
      _wl_resource_set_destructorPtr.asFunction<
          void Function(
              ffi.Pointer<struct_wl_resource>, wl_resource_destroy_func_t)>();

  int wl_resource_instance_of(
    ffi.Pointer<struct_wl_resource> resource,
    ffi.Pointer<struct_wl_interface> interface1,
    ffi.Pointer<ffi.Void> implementation,
  ) {
    return _wl_resource_instance_of(
      resource,
      interface1,
      implementation,
    );
  }

  late final _wl_resource_instance_ofPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<struct_wl_resource>,
              ffi.Pointer<struct_wl_interface>,
              ffi.Pointer<ffi.Void>)>>('wl_resource_instance_of');
  late final _wl_resource_instance_of = _wl_resource_instance_ofPtr.asFunction<
      int Function(ffi.Pointer<struct_wl_resource>,
          ffi.Pointer<struct_wl_interface>, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Char> wl_resource_get_class(
    ffi.Pointer<struct_wl_resource> resource,
  ) {
    return _wl_resource_get_class(
      resource,
    );
  }

  late final _wl_resource_get_classPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<struct_wl_resource>)>>('wl_resource_get_class');
  late final _wl_resource_get_class = _wl_resource_get_classPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<struct_wl_resource>)>();

  void wl_resource_add_destroy_listener(
    ffi.Pointer<struct_wl_resource> resource,
    ffi.Pointer<struct_wl_listener> listener,
  ) {
    return _wl_resource_add_destroy_listener(
      resource,
      listener,
    );
  }

  late final _wl_resource_add_destroy_listenerPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<struct_wl_resource>,
                  ffi.Pointer<struct_wl_listener>)>>(
      'wl_resource_add_destroy_listener');
  late final _wl_resource_add_destroy_listener =
      _wl_resource_add_destroy_listenerPtr.asFunction<
          void Function(ffi.Pointer<struct_wl_resource>,
              ffi.Pointer<struct_wl_listener>)>();

  ffi.Pointer<struct_wl_listener> wl_resource_get_destroy_listener(
    ffi.Pointer<struct_wl_resource> resource,
    wl_notify_func_t notify,
  ) {
    return _wl_resource_get_destroy_listener(
      resource,
      notify,
    );
  }

  late final _wl_resource_get_destroy_listenerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<struct_wl_listener> Function(
              ffi.Pointer<struct_wl_resource>,
              wl_notify_func_t)>>('wl_resource_get_destroy_listener');
  late final _wl_resource_get_destroy_listener =
      _wl_resource_get_destroy_listenerPtr.asFunction<
          ffi.Pointer<struct_wl_listener> Function(
              ffi.Pointer<struct_wl_resource>, wl_notify_func_t)>();

  ffi.Pointer<struct_wl_shm_buffer> wl_shm_buffer_get(
    ffi.Pointer<struct_wl_resource> resource,
  ) {
    return _wl_shm_buffer_get(
      resource,
    );
  }

  late final _wl_shm_buffer_getPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<struct_wl_shm_buffer> Function(
              ffi.Pointer<struct_wl_resource>)>>('wl_shm_buffer_get');
  late final _wl_shm_buffer_get = _wl_shm_buffer_getPtr.asFunction<
      ffi.Pointer<struct_wl_shm_buffer> Function(
          ffi.Pointer<struct_wl_resource>)>();

  void wl_shm_buffer_begin_access(
    ffi.Pointer<struct_wl_shm_buffer> buffer,
  ) {
    return _wl_shm_buffer_begin_access(
      buffer,
    );
  }

  late final _wl_shm_buffer_begin_accessPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<struct_wl_shm_buffer>)>>(
      'wl_shm_buffer_begin_access');
  late final _wl_shm_buffer_begin_access = _wl_shm_buffer_begin_accessPtr
      .asFunction<void Function(ffi.Pointer<struct_wl_shm_buffer>)>();

  void wl_shm_buffer_end_access(
    ffi.Pointer<struct_wl_shm_buffer> buffer,
  ) {
    return _wl_shm_buffer_end_access(
      buffer,
    );
  }

  late final _wl_shm_buffer_end_accessPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wl_shm_buffer>)>>('wl_shm_buffer_end_access');
  late final _wl_shm_buffer_end_access = _wl_shm_buffer_end_accessPtr
      .asFunction<void Function(ffi.Pointer<struct_wl_shm_buffer>)>();

  ffi.Pointer<ffi.Void> wl_shm_buffer_get_data(
    ffi.Pointer<struct_wl_shm_buffer> buffer,
  ) {
    return _wl_shm_buffer_get_data(
      buffer,
    );
  }

  late final _wl_shm_buffer_get_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<struct_wl_shm_buffer>)>>('wl_shm_buffer_get_data');
  late final _wl_shm_buffer_get_data = _wl_shm_buffer_get_dataPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<struct_wl_shm_buffer>)>();

  int wl_shm_buffer_get_stride(
    ffi.Pointer<struct_wl_shm_buffer> buffer,
  ) {
    return _wl_shm_buffer_get_stride(
      buffer,
    );
  }

  late final _wl_shm_buffer_get_stridePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<struct_wl_shm_buffer>)>>('wl_shm_buffer_get_stride');
  late final _wl_shm_buffer_get_stride = _wl_shm_buffer_get_stridePtr
      .asFunction<int Function(ffi.Pointer<struct_wl_shm_buffer>)>();

  int wl_shm_buffer_get_format(
    ffi.Pointer<struct_wl_shm_buffer> buffer,
  ) {
    return _wl_shm_buffer_get_format(
      buffer,
    );
  }

  late final _wl_shm_buffer_get_formatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint32 Function(
              ffi.Pointer<struct_wl_shm_buffer>)>>('wl_shm_buffer_get_format');
  late final _wl_shm_buffer_get_format = _wl_shm_buffer_get_formatPtr
      .asFunction<int Function(ffi.Pointer<struct_wl_shm_buffer>)>();

  int wl_shm_buffer_get_width(
    ffi.Pointer<struct_wl_shm_buffer> buffer,
  ) {
    return _wl_shm_buffer_get_width(
      buffer,
    );
  }

  late final _wl_shm_buffer_get_widthPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<struct_wl_shm_buffer>)>>('wl_shm_buffer_get_width');
  late final _wl_shm_buffer_get_width = _wl_shm_buffer_get_widthPtr
      .asFunction<int Function(ffi.Pointer<struct_wl_shm_buffer>)>();

  int wl_shm_buffer_get_height(
    ffi.Pointer<struct_wl_shm_buffer> buffer,
  ) {
    return _wl_shm_buffer_get_height(
      buffer,
    );
  }

  late final _wl_shm_buffer_get_heightPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<struct_wl_shm_buffer>)>>('wl_shm_buffer_get_height');
  late final _wl_shm_buffer_get_height = _wl_shm_buffer_get_heightPtr
      .asFunction<int Function(ffi.Pointer<struct_wl_shm_buffer>)>();

  ffi.Pointer<struct_wl_shm_pool> wl_shm_buffer_ref_pool(
    ffi.Pointer<struct_wl_shm_buffer> buffer,
  ) {
    return _wl_shm_buffer_ref_pool(
      buffer,
    );
  }

  late final _wl_shm_buffer_ref_poolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<struct_wl_shm_pool> Function(
              ffi.Pointer<struct_wl_shm_buffer>)>>('wl_shm_buffer_ref_pool');
  late final _wl_shm_buffer_ref_pool = _wl_shm_buffer_ref_poolPtr.asFunction<
      ffi.Pointer<struct_wl_shm_pool> Function(
          ffi.Pointer<struct_wl_shm_buffer>)>();

  void wl_shm_pool_unref(
    ffi.Pointer<struct_wl_shm_pool> pool,
  ) {
    return _wl_shm_pool_unref(
      pool,
    );
  }

  late final _wl_shm_pool_unrefPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wl_shm_pool>)>>('wl_shm_pool_unref');
  late final _wl_shm_pool_unref = _wl_shm_pool_unrefPtr
      .asFunction<void Function(ffi.Pointer<struct_wl_shm_pool>)>();

  int wl_display_init_shm(
    ffi.Pointer<struct_wl_display> display,
  ) {
    return _wl_display_init_shm(
      display,
    );
  }

  late final _wl_display_init_shmPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<struct_wl_display>)>>(
      'wl_display_init_shm');
  late final _wl_display_init_shm = _wl_display_init_shmPtr
      .asFunction<int Function(ffi.Pointer<struct_wl_display>)>();

  ffi.Pointer<ffi.Uint32> wl_display_add_shm_format(
    ffi.Pointer<struct_wl_display> display,
    int format,
  ) {
    return _wl_display_add_shm_format(
      display,
      format,
    );
  }

  late final _wl_display_add_shm_formatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Uint32> Function(ffi.Pointer<struct_wl_display>,
              ffi.Uint32)>>('wl_display_add_shm_format');
  late final _wl_display_add_shm_format =
      _wl_display_add_shm_formatPtr.asFunction<
          ffi.Pointer<ffi.Uint32> Function(
              ffi.Pointer<struct_wl_display>, int)>();

  ffi.Pointer<struct_wl_shm_buffer> wl_shm_buffer_create(
    ffi.Pointer<struct_wl_client> client,
    int id,
    int width,
    int height,
    int stride,
    int format,
  ) {
    return _wl_shm_buffer_create(
      client,
      id,
      width,
      height,
      stride,
      format,
    );
  }

  late final _wl_shm_buffer_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<struct_wl_shm_buffer> Function(
              ffi.Pointer<struct_wl_client>,
              ffi.Uint32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Uint32)>>('wl_shm_buffer_create');
  late final _wl_shm_buffer_create = _wl_shm_buffer_createPtr.asFunction<
      ffi.Pointer<struct_wl_shm_buffer> Function(
          ffi.Pointer<struct_wl_client>, int, int, int, int, int)>();

  void wl_log_set_handler_server(
    wl_log_func_t handler,
  ) {
    return _wl_log_set_handler_server(
      handler,
    );
  }

  late final _wl_log_set_handler_serverPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(wl_log_func_t)>>(
          'wl_log_set_handler_server');
  late final _wl_log_set_handler_server =
      _wl_log_set_handler_serverPtr.asFunction<void Function(wl_log_func_t)>();

  ffi.Pointer<struct_wl_protocol_logger> wl_display_add_protocol_logger(
    ffi.Pointer<struct_wl_display> display,
    wl_protocol_logger_func_t arg1,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _wl_display_add_protocol_logger(
      display,
      arg1,
      user_data,
    );
  }

  late final _wl_display_add_protocol_loggerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<struct_wl_protocol_logger> Function(
              ffi.Pointer<struct_wl_display>,
              wl_protocol_logger_func_t,
              ffi.Pointer<ffi.Void>)>>('wl_display_add_protocol_logger');
  late final _wl_display_add_protocol_logger =
      _wl_display_add_protocol_loggerPtr.asFunction<
          ffi.Pointer<struct_wl_protocol_logger> Function(
              ffi.Pointer<struct_wl_display>,
              wl_protocol_logger_func_t,
              ffi.Pointer<ffi.Void>)>();

  void wl_protocol_logger_destroy(
    ffi.Pointer<struct_wl_protocol_logger> logger,
  ) {
    return _wl_protocol_logger_destroy(
      logger,
    );
  }

  late final _wl_protocol_logger_destroyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<struct_wl_protocol_logger>)>>(
      'wl_protocol_logger_destroy');
  late final _wl_protocol_logger_destroy = _wl_protocol_logger_destroyPtr
      .asFunction<void Function(ffi.Pointer<struct_wl_protocol_logger>)>();

  int gnu_dev_major(
    int __dev,
  ) {
    return _gnu_dev_major(
      __dev,
    );
  }

  late final _gnu_dev_majorPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(__dev_t)>>(
          'gnu_dev_major');
  late final _gnu_dev_major = _gnu_dev_majorPtr.asFunction<int Function(int)>();

  int gnu_dev_minor(
    int __dev,
  ) {
    return _gnu_dev_minor(
      __dev,
    );
  }

  late final _gnu_dev_minorPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(__dev_t)>>(
          'gnu_dev_minor');
  late final _gnu_dev_minor = _gnu_dev_minorPtr.asFunction<int Function(int)>();

  int gnu_dev_makedev(
    int __major,
    int __minor,
  ) {
    return _gnu_dev_makedev(
      __major,
      __minor,
    );
  }

  late final _gnu_dev_makedevPtr = _lookup<
      ffi.NativeFunction<
          __dev_t Function(
              ffi.UnsignedInt, ffi.UnsignedInt)>>('gnu_dev_makedev');
  late final _gnu_dev_makedev =
      _gnu_dev_makedevPtr.asFunction<int Function(int, int)>();

  ffi.Pointer<struct_udev> udev_ref(
    ffi.Pointer<struct_udev> udev,
  ) {
    return _udev_ref(
      udev,
    );
  }

  late final _udev_refPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<struct_udev> Function(
              ffi.Pointer<struct_udev>)>>('udev_ref');
  late final _udev_ref = _udev_refPtr.asFunction<
      ffi.Pointer<struct_udev> Function(ffi.Pointer<struct_udev>)>();

  ffi.Pointer<struct_udev> udev_unref(
    ffi.Pointer<struct_udev> udev,
  ) {
    return _udev_unref(
      udev,
    );
  }

  late final _udev_unrefPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<struct_udev> Function(
              ffi.Pointer<struct_udev>)>>('udev_unref');
  late final _udev_unref = _udev_unrefPtr.asFunction<
      ffi.Pointer<struct_udev> Function(ffi.Pointer<struct_udev>)>();

  ffi.Pointer<struct_udev> udev_new() {
    return _udev_new();
  }

  late final _udev_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<struct_udev> Function()>>(
          'udev_new');
  late final _udev_new =
      _udev_newPtr.asFunction<ffi.Pointer<struct_udev> Function()>();

  void udev_set_log_fn(
    ffi.Pointer<struct_udev> udev,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(
                    ffi.Pointer<struct_udev>,
                    ffi.Int,
                    ffi.Pointer<ffi.Char>,
                    ffi.Int,
                    ffi.Pointer<ffi.Char>,
                    ffi.Pointer<ffi.Char>,
                    ffi.Pointer<struct___va_list_tag>)>>
        log_fn,
  ) {
    return _udev_set_log_fn(
      udev,
      log_fn,
    );
  }

  late final _udev_set_log_fnPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<struct_udev>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Void Function(
                              ffi.Pointer<struct_udev>,
                              ffi.Int,
                              ffi.Pointer<ffi.Char>,
                              ffi.Int,
                              ffi.Pointer<ffi.Char>,
                              ffi.Pointer<ffi.Char>,
                              ffi.Pointer<struct___va_list_tag>)>>)>>(
      'udev_set_log_fn');
  late final _udev_set_log_fn = _udev_set_log_fnPtr.asFunction<
      void Function(
          ffi.Pointer<struct_udev>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<struct_udev>,
                      ffi.Int,
                      ffi.Pointer<ffi.Char>,
                      ffi.Int,
                      ffi.Pointer<ffi.Char>,
                      ffi.Pointer<ffi.Char>,
                      ffi.Pointer<struct___va_list_tag>)>>)>();

  int udev_get_log_priority(
    ffi.Pointer<struct_udev> udev,
  ) {
    return _udev_get_log_priority(
      udev,
    );
  }

  late final _udev_get_log_priorityPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<struct_udev>)>>(
          'udev_get_log_priority');
  late final _udev_get_log_priority = _udev_get_log_priorityPtr
      .asFunction<int Function(ffi.Pointer<struct_udev>)>();

  void udev_set_log_priority(
    ffi.Pointer<struct_udev> udev,
    int priority,
  ) {
    return _udev_set_log_priority(
      udev,
      priority,
    );
  }

  late final _udev_set_log_priorityPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_udev>, ffi.Int)>>('udev_set_log_priority');
  late final _udev_set_log_priority = _udev_set_log_priorityPtr
      .asFunction<void Function(ffi.Pointer<struct_udev>, int)>();

  ffi.Pointer<ffi.Void> udev_get_userdata(
    ffi.Pointer<struct_udev> udev,
  ) {
    return _udev_get_userdata(
      udev,
    );
  }

  late final _udev_get_userdataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<struct_udev>)>>('udev_get_userdata');
  late final _udev_get_userdata = _udev_get_userdataPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<struct_udev>)>();

  void udev_set_userdata(
    ffi.Pointer<struct_udev> udev,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _udev_set_userdata(
      udev,
      userdata,
    );
  }

  late final _udev_set_userdataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_udev>,
              ffi.Pointer<ffi.Void>)>>('udev_set_userdata');
  late final _udev_set_userdata = _udev_set_userdataPtr.asFunction<
      void Function(ffi.Pointer<struct_udev>, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<struct_udev_list_entry> udev_list_entry_get_next(
    ffi.Pointer<struct_udev_list_entry> list_entry,
  ) {
    return _udev_list_entry_get_next(
      list_entry,
    );
  }

  late final _udev_list_entry_get_nextPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<struct_udev_list_entry> Function(
                  ffi.Pointer<struct_udev_list_entry>)>>(
      'udev_list_entry_get_next');
  late final _udev_list_entry_get_next =
      _udev_list_entry_get_nextPtr.asFunction<
          ffi.Pointer<struct_udev_list_entry> Function(
              ffi.Pointer<struct_udev_list_entry>)>();

  ffi.Pointer<struct_udev_list_entry> udev_list_entry_get_by_name(
    ffi.Pointer<struct_udev_list_entry> list_entry,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _udev_list_entry_get_by_name(
      list_entry,
      name,
    );
  }

  late final _udev_list_entry_get_by_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<struct_udev_list_entry> Function(
              ffi.Pointer<struct_udev_list_entry>,
              ffi.Pointer<ffi.Char>)>>('udev_list_entry_get_by_name');
  late final _udev_list_entry_get_by_name =
      _udev_list_entry_get_by_namePtr.asFunction<
          ffi.Pointer<struct_udev_list_entry> Function(
              ffi.Pointer<struct_udev_list_entry>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> udev_list_entry_get_name(
    ffi.Pointer<struct_udev_list_entry> list_entry,
  ) {
    return _udev_list_entry_get_name(
      list_entry,
    );
  }

  late final _udev_list_entry_get_namePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(
                  ffi.Pointer<struct_udev_list_entry>)>>(
      'udev_list_entry_get_name');
  late final _udev_list_entry_get_name =
      _udev_list_entry_get_namePtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<struct_udev_list_entry>)>();

  ffi.Pointer<ffi.Char> udev_list_entry_get_value(
    ffi.Pointer<struct_udev_list_entry> list_entry,
  ) {
    return _udev_list_entry_get_value(
      list_entry,
    );
  }

  late final _udev_list_entry_get_valuePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(
                  ffi.Pointer<struct_udev_list_entry>)>>(
      'udev_list_entry_get_value');
  late final _udev_list_entry_get_value =
      _udev_list_entry_get_valuePtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<struct_udev_list_entry>)>();

  ffi.Pointer<struct_udev_device> udev_device_ref(
    ffi.Pointer<struct_udev_device> udev_device,
  ) {
    return _udev_device_ref(
      udev_device,
    );
  }

  late final _udev_device_refPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<struct_udev_device> Function(
              ffi.Pointer<struct_udev_device>)>>('udev_device_ref');
  late final _udev_device_ref = _udev_device_refPtr.asFunction<
      ffi.Pointer<struct_udev_device> Function(
          ffi.Pointer<struct_udev_device>)>();

  ffi.Pointer<struct_udev_device> udev_device_unref(
    ffi.Pointer<struct_udev_device> udev_device,
  ) {
    return _udev_device_unref(
      udev_device,
    );
  }

  late final _udev_device_unrefPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<struct_udev_device> Function(
              ffi.Pointer<struct_udev_device>)>>('udev_device_unref');
  late final _udev_device_unref = _udev_device_unrefPtr.asFunction<
      ffi.Pointer<struct_udev_device> Function(
          ffi.Pointer<struct_udev_device>)>();

  ffi.Pointer<struct_udev> udev_device_get_udev(
    ffi.Pointer<struct_udev_device> udev_device,
  ) {
    return _udev_device_get_udev(
      udev_device,
    );
  }

  late final _udev_device_get_udevPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<struct_udev> Function(
              ffi.Pointer<struct_udev_device>)>>('udev_device_get_udev');
  late final _udev_device_get_udev = _udev_device_get_udevPtr.asFunction<
      ffi.Pointer<struct_udev> Function(ffi.Pointer<struct_udev_device>)>();

  ffi.Pointer<struct_udev_device> udev_device_new_from_syspath(
    ffi.Pointer<struct_udev> udev,
    ffi.Pointer<ffi.Char> syspath,
  ) {
    return _udev_device_new_from_syspath(
      udev,
      syspath,
    );
  }

  late final _udev_device_new_from_syspathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<struct_udev_device> Function(ffi.Pointer<struct_udev>,
              ffi.Pointer<ffi.Char>)>>('udev_device_new_from_syspath');
  late final _udev_device_new_from_syspath =
      _udev_device_new_from_syspathPtr.asFunction<
          ffi.Pointer<struct_udev_device> Function(
              ffi.Pointer<struct_udev>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<struct_udev_device> udev_device_new_from_devnum(
    ffi.Pointer<struct_udev> udev,
    int type,
    int devnum,
  ) {
    return _udev_device_new_from_devnum(
      udev,
      type,
      devnum,
    );
  }

  late final _udev_device_new_from_devnumPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<struct_udev_device> Function(ffi.Pointer<struct_udev>,
              ffi.Char, dev_t)>>('udev_device_new_from_devnum');
  late final _udev_device_new_from_devnum =
      _udev_device_new_from_devnumPtr.asFunction<
          ffi.Pointer<struct_udev_device> Function(
              ffi.Pointer<struct_udev>, int, int)>();

  ffi.Pointer<struct_udev_device> udev_device_new_from_subsystem_sysname(
    ffi.Pointer<struct_udev> udev,
    ffi.Pointer<ffi.Char> subsystem,
    ffi.Pointer<ffi.Char> sysname,
  ) {
    return _udev_device_new_from_subsystem_sysname(
      udev,
      subsystem,
      sysname,
    );
  }

  late final _udev_device_new_from_subsystem_sysnamePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<struct_udev_device> Function(ffi.Pointer<struct_udev>,
                  ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>(
      'udev_device_new_from_subsystem_sysname');
  late final _udev_device_new_from_subsystem_sysname =
      _udev_device_new_from_subsystem_sysnamePtr.asFunction<
          ffi.Pointer<struct_udev_device> Function(ffi.Pointer<struct_udev>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<struct_udev_device> udev_device_new_from_device_id(
    ffi.Pointer<struct_udev> udev,
    ffi.Pointer<ffi.Char> id,
  ) {
    return _udev_device_new_from_device_id(
      udev,
      id,
    );
  }

  late final _udev_device_new_from_device_idPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<struct_udev_device> Function(ffi.Pointer<struct_udev>,
              ffi.Pointer<ffi.Char>)>>('udev_device_new_from_device_id');
  late final _udev_device_new_from_device_id =
      _udev_device_new_from_device_idPtr.asFunction<
          ffi.Pointer<struct_udev_device> Function(
              ffi.Pointer<struct_udev>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<struct_udev_device> udev_device_new_from_environment(
    ffi.Pointer<struct_udev> udev,
  ) {
    return _udev_device_new_from_environment(
      udev,
    );
  }

  late final _udev_device_new_from_environmentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<struct_udev_device> Function(
              ffi.Pointer<struct_udev>)>>('udev_device_new_from_environment');
  late final _udev_device_new_from_environment =
      _udev_device_new_from_environmentPtr.asFunction<
          ffi.Pointer<struct_udev_device> Function(ffi.Pointer<struct_udev>)>();

  ffi.Pointer<struct_udev_device> udev_device_get_parent(
    ffi.Pointer<struct_udev_device> udev_device,
  ) {
    return _udev_device_get_parent(
      udev_device,
    );
  }

  late final _udev_device_get_parentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<struct_udev_device> Function(
              ffi.Pointer<struct_udev_device>)>>('udev_device_get_parent');
  late final _udev_device_get_parent = _udev_device_get_parentPtr.asFunction<
      ffi.Pointer<struct_udev_device> Function(
          ffi.Pointer<struct_udev_device>)>();

  ffi.Pointer<struct_udev_device> udev_device_get_parent_with_subsystem_devtype(
    ffi.Pointer<struct_udev_device> udev_device,
    ffi.Pointer<ffi.Char> subsystem,
    ffi.Pointer<ffi.Char> devtype,
  ) {
    return _udev_device_get_parent_with_subsystem_devtype(
      udev_device,
      subsystem,
      devtype,
    );
  }

  late final _udev_device_get_parent_with_subsystem_devtypePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<struct_udev_device> Function(
                  ffi.Pointer<struct_udev_device>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Char>)>>(
      'udev_device_get_parent_with_subsystem_devtype');
  late final _udev_device_get_parent_with_subsystem_devtype =
      _udev_device_get_parent_with_subsystem_devtypePtr.asFunction<
          ffi.Pointer<struct_udev_device> Function(
              ffi.Pointer<struct_udev_device>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> udev_device_get_devpath(
    ffi.Pointer<struct_udev_device> udev_device,
  ) {
    return _udev_device_get_devpath(
      udev_device,
    );
  }

  late final _udev_device_get_devpathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<struct_udev_device>)>>('udev_device_get_devpath');
  late final _udev_device_get_devpath = _udev_device_get_devpathPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<struct_udev_device>)>();

  ffi.Pointer<ffi.Char> udev_device_get_subsystem(
    ffi.Pointer<struct_udev_device> udev_device,
  ) {
    return _udev_device_get_subsystem(
      udev_device,
    );
  }

  late final _udev_device_get_subsystemPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<struct_udev_device>)>>('udev_device_get_subsystem');
  late final _udev_device_get_subsystem =
      _udev_device_get_subsystemPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<struct_udev_device>)>();

  ffi.Pointer<ffi.Char> udev_device_get_devtype(
    ffi.Pointer<struct_udev_device> udev_device,
  ) {
    return _udev_device_get_devtype(
      udev_device,
    );
  }

  late final _udev_device_get_devtypePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<struct_udev_device>)>>('udev_device_get_devtype');
  late final _udev_device_get_devtype = _udev_device_get_devtypePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<struct_udev_device>)>();

  ffi.Pointer<ffi.Char> udev_device_get_syspath(
    ffi.Pointer<struct_udev_device> udev_device,
  ) {
    return _udev_device_get_syspath(
      udev_device,
    );
  }

  late final _udev_device_get_syspathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<struct_udev_device>)>>('udev_device_get_syspath');
  late final _udev_device_get_syspath = _udev_device_get_syspathPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<struct_udev_device>)>();

  ffi.Pointer<ffi.Char> udev_device_get_sysname(
    ffi.Pointer<struct_udev_device> udev_device,
  ) {
    return _udev_device_get_sysname(
      udev_device,
    );
  }

  late final _udev_device_get_sysnamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<struct_udev_device>)>>('udev_device_get_sysname');
  late final _udev_device_get_sysname = _udev_device_get_sysnamePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<struct_udev_device>)>();

  ffi.Pointer<ffi.Char> udev_device_get_sysnum(
    ffi.Pointer<struct_udev_device> udev_device,
  ) {
    return _udev_device_get_sysnum(
      udev_device,
    );
  }

  late final _udev_device_get_sysnumPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<struct_udev_device>)>>('udev_device_get_sysnum');
  late final _udev_device_get_sysnum = _udev_device_get_sysnumPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<struct_udev_device>)>();

  ffi.Pointer<ffi.Char> udev_device_get_devnode(
    ffi.Pointer<struct_udev_device> udev_device,
  ) {
    return _udev_device_get_devnode(
      udev_device,
    );
  }

  late final _udev_device_get_devnodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<struct_udev_device>)>>('udev_device_get_devnode');
  late final _udev_device_get_devnode = _udev_device_get_devnodePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<struct_udev_device>)>();

  int udev_device_get_is_initialized(
    ffi.Pointer<struct_udev_device> udev_device,
  ) {
    return _udev_device_get_is_initialized(
      udev_device,
    );
  }

  late final _udev_device_get_is_initializedPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<struct_udev_device>)>>(
      'udev_device_get_is_initialized');
  late final _udev_device_get_is_initialized =
      _udev_device_get_is_initializedPtr
          .asFunction<int Function(ffi.Pointer<struct_udev_device>)>();

  ffi.Pointer<struct_udev_list_entry> udev_device_get_devlinks_list_entry(
    ffi.Pointer<struct_udev_device> udev_device,
  ) {
    return _udev_device_get_devlinks_list_entry(
      udev_device,
    );
  }

  late final _udev_device_get_devlinks_list_entryPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<struct_udev_list_entry> Function(
                  ffi.Pointer<struct_udev_device>)>>(
      'udev_device_get_devlinks_list_entry');
  late final _udev_device_get_devlinks_list_entry =
      _udev_device_get_devlinks_list_entryPtr.asFunction<
          ffi.Pointer<struct_udev_list_entry> Function(
              ffi.Pointer<struct_udev_device>)>();

  ffi.Pointer<struct_udev_list_entry> udev_device_get_properties_list_entry(
    ffi.Pointer<struct_udev_device> udev_device,
  ) {
    return _udev_device_get_properties_list_entry(
      udev_device,
    );
  }

  late final _udev_device_get_properties_list_entryPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<struct_udev_list_entry> Function(
                  ffi.Pointer<struct_udev_device>)>>(
      'udev_device_get_properties_list_entry');
  late final _udev_device_get_properties_list_entry =
      _udev_device_get_properties_list_entryPtr.asFunction<
          ffi.Pointer<struct_udev_list_entry> Function(
              ffi.Pointer<struct_udev_device>)>();

  ffi.Pointer<struct_udev_list_entry> udev_device_get_tags_list_entry(
    ffi.Pointer<struct_udev_device> udev_device,
  ) {
    return _udev_device_get_tags_list_entry(
      udev_device,
    );
  }

  late final _udev_device_get_tags_list_entryPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<struct_udev_list_entry> Function(
                  ffi.Pointer<struct_udev_device>)>>(
      'udev_device_get_tags_list_entry');
  late final _udev_device_get_tags_list_entry =
      _udev_device_get_tags_list_entryPtr.asFunction<
          ffi.Pointer<struct_udev_list_entry> Function(
              ffi.Pointer<struct_udev_device>)>();

  ffi.Pointer<struct_udev_list_entry> udev_device_get_current_tags_list_entry(
    ffi.Pointer<struct_udev_device> udev_device,
  ) {
    return _udev_device_get_current_tags_list_entry(
      udev_device,
    );
  }

  late final _udev_device_get_current_tags_list_entryPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<struct_udev_list_entry> Function(
                  ffi.Pointer<struct_udev_device>)>>(
      'udev_device_get_current_tags_list_entry');
  late final _udev_device_get_current_tags_list_entry =
      _udev_device_get_current_tags_list_entryPtr.asFunction<
          ffi.Pointer<struct_udev_list_entry> Function(
              ffi.Pointer<struct_udev_device>)>();

  ffi.Pointer<struct_udev_list_entry> udev_device_get_sysattr_list_entry(
    ffi.Pointer<struct_udev_device> udev_device,
  ) {
    return _udev_device_get_sysattr_list_entry(
      udev_device,
    );
  }

  late final _udev_device_get_sysattr_list_entryPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<struct_udev_list_entry> Function(
                  ffi.Pointer<struct_udev_device>)>>(
      'udev_device_get_sysattr_list_entry');
  late final _udev_device_get_sysattr_list_entry =
      _udev_device_get_sysattr_list_entryPtr.asFunction<
          ffi.Pointer<struct_udev_list_entry> Function(
              ffi.Pointer<struct_udev_device>)>();

  ffi.Pointer<ffi.Char> udev_device_get_property_value(
    ffi.Pointer<struct_udev_device> udev_device,
    ffi.Pointer<ffi.Char> key,
  ) {
    return _udev_device_get_property_value(
      udev_device,
      key,
    );
  }

  late final _udev_device_get_property_valuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<struct_udev_device>,
              ffi.Pointer<ffi.Char>)>>('udev_device_get_property_value');
  late final _udev_device_get_property_value =
      _udev_device_get_property_valuePtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<struct_udev_device>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> udev_device_get_driver(
    ffi.Pointer<struct_udev_device> udev_device,
  ) {
    return _udev_device_get_driver(
      udev_device,
    );
  }

  late final _udev_device_get_driverPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<struct_udev_device>)>>('udev_device_get_driver');
  late final _udev_device_get_driver = _udev_device_get_driverPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<struct_udev_device>)>();

  int udev_device_get_devnum(
    ffi.Pointer<struct_udev_device> udev_device,
  ) {
    return _udev_device_get_devnum(
      udev_device,
    );
  }

  late final _udev_device_get_devnumPtr = _lookup<
          ffi.NativeFunction<dev_t Function(ffi.Pointer<struct_udev_device>)>>(
      'udev_device_get_devnum');
  late final _udev_device_get_devnum = _udev_device_get_devnumPtr
      .asFunction<int Function(ffi.Pointer<struct_udev_device>)>();

  ffi.Pointer<ffi.Char> udev_device_get_action(
    ffi.Pointer<struct_udev_device> udev_device,
  ) {
    return _udev_device_get_action(
      udev_device,
    );
  }

  late final _udev_device_get_actionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<struct_udev_device>)>>('udev_device_get_action');
  late final _udev_device_get_action = _udev_device_get_actionPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<struct_udev_device>)>();

  int udev_device_get_seqnum(
    ffi.Pointer<struct_udev_device> udev_device,
  ) {
    return _udev_device_get_seqnum(
      udev_device,
    );
  }

  late final _udev_device_get_seqnumPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(
              ffi.Pointer<struct_udev_device>)>>('udev_device_get_seqnum');
  late final _udev_device_get_seqnum = _udev_device_get_seqnumPtr
      .asFunction<int Function(ffi.Pointer<struct_udev_device>)>();

  int udev_device_get_usec_since_initialized(
    ffi.Pointer<struct_udev_device> udev_device,
  ) {
    return _udev_device_get_usec_since_initialized(
      udev_device,
    );
  }

  late final _udev_device_get_usec_since_initializedPtr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedLongLong Function(ffi.Pointer<struct_udev_device>)>>(
      'udev_device_get_usec_since_initialized');
  late final _udev_device_get_usec_since_initialized =
      _udev_device_get_usec_since_initializedPtr
          .asFunction<int Function(ffi.Pointer<struct_udev_device>)>();

  ffi.Pointer<ffi.Char> udev_device_get_sysattr_value(
    ffi.Pointer<struct_udev_device> udev_device,
    ffi.Pointer<ffi.Char> sysattr,
  ) {
    return _udev_device_get_sysattr_value(
      udev_device,
      sysattr,
    );
  }

  late final _udev_device_get_sysattr_valuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<struct_udev_device>,
              ffi.Pointer<ffi.Char>)>>('udev_device_get_sysattr_value');
  late final _udev_device_get_sysattr_value =
      _udev_device_get_sysattr_valuePtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<struct_udev_device>, ffi.Pointer<ffi.Char>)>();

  int udev_device_set_sysattr_value(
    ffi.Pointer<struct_udev_device> udev_device,
    ffi.Pointer<ffi.Char> sysattr,
    ffi.Pointer<ffi.Char> value,
  ) {
    return _udev_device_set_sysattr_value(
      udev_device,
      sysattr,
      value,
    );
  }

  late final _udev_device_set_sysattr_valuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<struct_udev_device>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('udev_device_set_sysattr_value');
  late final _udev_device_set_sysattr_value =
      _udev_device_set_sysattr_valuePtr.asFunction<
          int Function(ffi.Pointer<struct_udev_device>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>();

  int udev_device_has_tag(
    ffi.Pointer<struct_udev_device> udev_device,
    ffi.Pointer<ffi.Char> tag,
  ) {
    return _udev_device_has_tag(
      udev_device,
      tag,
    );
  }

  late final _udev_device_has_tagPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<struct_udev_device>,
              ffi.Pointer<ffi.Char>)>>('udev_device_has_tag');
  late final _udev_device_has_tag = _udev_device_has_tagPtr.asFunction<
      int Function(ffi.Pointer<struct_udev_device>, ffi.Pointer<ffi.Char>)>();

  int udev_device_has_current_tag(
    ffi.Pointer<struct_udev_device> udev_device,
    ffi.Pointer<ffi.Char> tag,
  ) {
    return _udev_device_has_current_tag(
      udev_device,
      tag,
    );
  }

  late final _udev_device_has_current_tagPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<struct_udev_device>,
              ffi.Pointer<ffi.Char>)>>('udev_device_has_current_tag');
  late final _udev_device_has_current_tag =
      _udev_device_has_current_tagPtr.asFunction<
          int Function(
              ffi.Pointer<struct_udev_device>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<struct_udev_monitor> udev_monitor_ref(
    ffi.Pointer<struct_udev_monitor> udev_monitor,
  ) {
    return _udev_monitor_ref(
      udev_monitor,
    );
  }

  late final _udev_monitor_refPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<struct_udev_monitor> Function(
              ffi.Pointer<struct_udev_monitor>)>>('udev_monitor_ref');
  late final _udev_monitor_ref = _udev_monitor_refPtr.asFunction<
      ffi.Pointer<struct_udev_monitor> Function(
          ffi.Pointer<struct_udev_monitor>)>();

  ffi.Pointer<struct_udev_monitor> udev_monitor_unref(
    ffi.Pointer<struct_udev_monitor> udev_monitor,
  ) {
    return _udev_monitor_unref(
      udev_monitor,
    );
  }

  late final _udev_monitor_unrefPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<struct_udev_monitor> Function(
              ffi.Pointer<struct_udev_monitor>)>>('udev_monitor_unref');
  late final _udev_monitor_unref = _udev_monitor_unrefPtr.asFunction<
      ffi.Pointer<struct_udev_monitor> Function(
          ffi.Pointer<struct_udev_monitor>)>();

  ffi.Pointer<struct_udev> udev_monitor_get_udev(
    ffi.Pointer<struct_udev_monitor> udev_monitor,
  ) {
    return _udev_monitor_get_udev(
      udev_monitor,
    );
  }

  late final _udev_monitor_get_udevPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<struct_udev> Function(
              ffi.Pointer<struct_udev_monitor>)>>('udev_monitor_get_udev');
  late final _udev_monitor_get_udev = _udev_monitor_get_udevPtr.asFunction<
      ffi.Pointer<struct_udev> Function(ffi.Pointer<struct_udev_monitor>)>();

  ffi.Pointer<struct_udev_monitor> udev_monitor_new_from_netlink(
    ffi.Pointer<struct_udev> udev,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _udev_monitor_new_from_netlink(
      udev,
      name,
    );
  }

  late final _udev_monitor_new_from_netlinkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<struct_udev_monitor> Function(ffi.Pointer<struct_udev>,
              ffi.Pointer<ffi.Char>)>>('udev_monitor_new_from_netlink');
  late final _udev_monitor_new_from_netlink =
      _udev_monitor_new_from_netlinkPtr.asFunction<
          ffi.Pointer<struct_udev_monitor> Function(
              ffi.Pointer<struct_udev>, ffi.Pointer<ffi.Char>)>();

  int udev_monitor_enable_receiving(
    ffi.Pointer<struct_udev_monitor> udev_monitor,
  ) {
    return _udev_monitor_enable_receiving(
      udev_monitor,
    );
  }

  late final _udev_monitor_enable_receivingPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<struct_udev_monitor>)>>(
      'udev_monitor_enable_receiving');
  late final _udev_monitor_enable_receiving = _udev_monitor_enable_receivingPtr
      .asFunction<int Function(ffi.Pointer<struct_udev_monitor>)>();

  int udev_monitor_set_receive_buffer_size(
    ffi.Pointer<struct_udev_monitor> udev_monitor,
    int size,
  ) {
    return _udev_monitor_set_receive_buffer_size(
      udev_monitor,
      size,
    );
  }

  late final _udev_monitor_set_receive_buffer_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<struct_udev_monitor>,
              ffi.Int)>>('udev_monitor_set_receive_buffer_size');
  late final _udev_monitor_set_receive_buffer_size =
      _udev_monitor_set_receive_buffer_sizePtr
          .asFunction<int Function(ffi.Pointer<struct_udev_monitor>, int)>();

  int udev_monitor_get_fd(
    ffi.Pointer<struct_udev_monitor> udev_monitor,
  ) {
    return _udev_monitor_get_fd(
      udev_monitor,
    );
  }

  late final _udev_monitor_get_fdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<struct_udev_monitor>)>>('udev_monitor_get_fd');
  late final _udev_monitor_get_fd = _udev_monitor_get_fdPtr
      .asFunction<int Function(ffi.Pointer<struct_udev_monitor>)>();

  ffi.Pointer<struct_udev_device> udev_monitor_receive_device(
    ffi.Pointer<struct_udev_monitor> udev_monitor,
  ) {
    return _udev_monitor_receive_device(
      udev_monitor,
    );
  }

  late final _udev_monitor_receive_devicePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<struct_udev_device> Function(
                  ffi.Pointer<struct_udev_monitor>)>>(
      'udev_monitor_receive_device');
  late final _udev_monitor_receive_device =
      _udev_monitor_receive_devicePtr.asFunction<
          ffi.Pointer<struct_udev_device> Function(
              ffi.Pointer<struct_udev_monitor>)>();

  int udev_monitor_filter_add_match_subsystem_devtype(
    ffi.Pointer<struct_udev_monitor> udev_monitor,
    ffi.Pointer<ffi.Char> subsystem,
    ffi.Pointer<ffi.Char> devtype,
  ) {
    return _udev_monitor_filter_add_match_subsystem_devtype(
      udev_monitor,
      subsystem,
      devtype,
    );
  }

  late final _udev_monitor_filter_add_match_subsystem_devtypePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<struct_udev_monitor>,
                  ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>(
      'udev_monitor_filter_add_match_subsystem_devtype');
  late final _udev_monitor_filter_add_match_subsystem_devtype =
      _udev_monitor_filter_add_match_subsystem_devtypePtr.asFunction<
          int Function(ffi.Pointer<struct_udev_monitor>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>();

  int udev_monitor_filter_add_match_tag(
    ffi.Pointer<struct_udev_monitor> udev_monitor,
    ffi.Pointer<ffi.Char> tag,
  ) {
    return _udev_monitor_filter_add_match_tag(
      udev_monitor,
      tag,
    );
  }

  late final _udev_monitor_filter_add_match_tagPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<struct_udev_monitor>,
              ffi.Pointer<ffi.Char>)>>('udev_monitor_filter_add_match_tag');
  late final _udev_monitor_filter_add_match_tag =
      _udev_monitor_filter_add_match_tagPtr.asFunction<
          int Function(
              ffi.Pointer<struct_udev_monitor>, ffi.Pointer<ffi.Char>)>();

  int udev_monitor_filter_update(
    ffi.Pointer<struct_udev_monitor> udev_monitor,
  ) {
    return _udev_monitor_filter_update(
      udev_monitor,
    );
  }

  late final _udev_monitor_filter_updatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<struct_udev_monitor>)>>('udev_monitor_filter_update');
  late final _udev_monitor_filter_update = _udev_monitor_filter_updatePtr
      .asFunction<int Function(ffi.Pointer<struct_udev_monitor>)>();

  int udev_monitor_filter_remove(
    ffi.Pointer<struct_udev_monitor> udev_monitor,
  ) {
    return _udev_monitor_filter_remove(
      udev_monitor,
    );
  }

  late final _udev_monitor_filter_removePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<struct_udev_monitor>)>>('udev_monitor_filter_remove');
  late final _udev_monitor_filter_remove = _udev_monitor_filter_removePtr
      .asFunction<int Function(ffi.Pointer<struct_udev_monitor>)>();

  ffi.Pointer<struct_udev_enumerate> udev_enumerate_ref(
    ffi.Pointer<struct_udev_enumerate> udev_enumerate,
  ) {
    return _udev_enumerate_ref(
      udev_enumerate,
    );
  }

  late final _udev_enumerate_refPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<struct_udev_enumerate> Function(
              ffi.Pointer<struct_udev_enumerate>)>>('udev_enumerate_ref');
  late final _udev_enumerate_ref = _udev_enumerate_refPtr.asFunction<
      ffi.Pointer<struct_udev_enumerate> Function(
          ffi.Pointer<struct_udev_enumerate>)>();

  ffi.Pointer<struct_udev_enumerate> udev_enumerate_unref(
    ffi.Pointer<struct_udev_enumerate> udev_enumerate,
  ) {
    return _udev_enumerate_unref(
      udev_enumerate,
    );
  }

  late final _udev_enumerate_unrefPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<struct_udev_enumerate> Function(
              ffi.Pointer<struct_udev_enumerate>)>>('udev_enumerate_unref');
  late final _udev_enumerate_unref = _udev_enumerate_unrefPtr.asFunction<
      ffi.Pointer<struct_udev_enumerate> Function(
          ffi.Pointer<struct_udev_enumerate>)>();

  ffi.Pointer<struct_udev> udev_enumerate_get_udev(
    ffi.Pointer<struct_udev_enumerate> udev_enumerate,
  ) {
    return _udev_enumerate_get_udev(
      udev_enumerate,
    );
  }

  late final _udev_enumerate_get_udevPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<struct_udev> Function(
              ffi.Pointer<struct_udev_enumerate>)>>('udev_enumerate_get_udev');
  late final _udev_enumerate_get_udev = _udev_enumerate_get_udevPtr.asFunction<
      ffi.Pointer<struct_udev> Function(ffi.Pointer<struct_udev_enumerate>)>();

  ffi.Pointer<struct_udev_enumerate> udev_enumerate_new(
    ffi.Pointer<struct_udev> udev,
  ) {
    return _udev_enumerate_new(
      udev,
    );
  }

  late final _udev_enumerate_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<struct_udev_enumerate> Function(
              ffi.Pointer<struct_udev>)>>('udev_enumerate_new');
  late final _udev_enumerate_new = _udev_enumerate_newPtr.asFunction<
      ffi.Pointer<struct_udev_enumerate> Function(ffi.Pointer<struct_udev>)>();

  int udev_enumerate_add_match_subsystem(
    ffi.Pointer<struct_udev_enumerate> udev_enumerate,
    ffi.Pointer<ffi.Char> subsystem,
  ) {
    return _udev_enumerate_add_match_subsystem(
      udev_enumerate,
      subsystem,
    );
  }

  late final _udev_enumerate_add_match_subsystemPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<struct_udev_enumerate>,
              ffi.Pointer<ffi.Char>)>>('udev_enumerate_add_match_subsystem');
  late final _udev_enumerate_add_match_subsystem =
      _udev_enumerate_add_match_subsystemPtr.asFunction<
          int Function(
              ffi.Pointer<struct_udev_enumerate>, ffi.Pointer<ffi.Char>)>();

  int udev_enumerate_add_nomatch_subsystem(
    ffi.Pointer<struct_udev_enumerate> udev_enumerate,
    ffi.Pointer<ffi.Char> subsystem,
  ) {
    return _udev_enumerate_add_nomatch_subsystem(
      udev_enumerate,
      subsystem,
    );
  }

  late final _udev_enumerate_add_nomatch_subsystemPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<struct_udev_enumerate>,
              ffi.Pointer<ffi.Char>)>>('udev_enumerate_add_nomatch_subsystem');
  late final _udev_enumerate_add_nomatch_subsystem =
      _udev_enumerate_add_nomatch_subsystemPtr.asFunction<
          int Function(
              ffi.Pointer<struct_udev_enumerate>, ffi.Pointer<ffi.Char>)>();

  int udev_enumerate_add_match_sysattr(
    ffi.Pointer<struct_udev_enumerate> udev_enumerate,
    ffi.Pointer<ffi.Char> sysattr,
    ffi.Pointer<ffi.Char> value,
  ) {
    return _udev_enumerate_add_match_sysattr(
      udev_enumerate,
      sysattr,
      value,
    );
  }

  late final _udev_enumerate_add_match_sysattrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<struct_udev_enumerate>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('udev_enumerate_add_match_sysattr');
  late final _udev_enumerate_add_match_sysattr =
      _udev_enumerate_add_match_sysattrPtr.asFunction<
          int Function(ffi.Pointer<struct_udev_enumerate>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int udev_enumerate_add_nomatch_sysattr(
    ffi.Pointer<struct_udev_enumerate> udev_enumerate,
    ffi.Pointer<ffi.Char> sysattr,
    ffi.Pointer<ffi.Char> value,
  ) {
    return _udev_enumerate_add_nomatch_sysattr(
      udev_enumerate,
      sysattr,
      value,
    );
  }

  late final _udev_enumerate_add_nomatch_sysattrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<struct_udev_enumerate>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('udev_enumerate_add_nomatch_sysattr');
  late final _udev_enumerate_add_nomatch_sysattr =
      _udev_enumerate_add_nomatch_sysattrPtr.asFunction<
          int Function(ffi.Pointer<struct_udev_enumerate>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int udev_enumerate_add_match_property(
    ffi.Pointer<struct_udev_enumerate> udev_enumerate,
    ffi.Pointer<ffi.Char> property,
    ffi.Pointer<ffi.Char> value,
  ) {
    return _udev_enumerate_add_match_property(
      udev_enumerate,
      property,
      value,
    );
  }

  late final _udev_enumerate_add_match_propertyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<struct_udev_enumerate>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('udev_enumerate_add_match_property');
  late final _udev_enumerate_add_match_property =
      _udev_enumerate_add_match_propertyPtr.asFunction<
          int Function(ffi.Pointer<struct_udev_enumerate>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int udev_enumerate_add_match_sysname(
    ffi.Pointer<struct_udev_enumerate> udev_enumerate,
    ffi.Pointer<ffi.Char> sysname,
  ) {
    return _udev_enumerate_add_match_sysname(
      udev_enumerate,
      sysname,
    );
  }

  late final _udev_enumerate_add_match_sysnamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<struct_udev_enumerate>,
              ffi.Pointer<ffi.Char>)>>('udev_enumerate_add_match_sysname');
  late final _udev_enumerate_add_match_sysname =
      _udev_enumerate_add_match_sysnamePtr.asFunction<
          int Function(
              ffi.Pointer<struct_udev_enumerate>, ffi.Pointer<ffi.Char>)>();

  int udev_enumerate_add_match_tag(
    ffi.Pointer<struct_udev_enumerate> udev_enumerate,
    ffi.Pointer<ffi.Char> tag,
  ) {
    return _udev_enumerate_add_match_tag(
      udev_enumerate,
      tag,
    );
  }

  late final _udev_enumerate_add_match_tagPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<struct_udev_enumerate>,
              ffi.Pointer<ffi.Char>)>>('udev_enumerate_add_match_tag');
  late final _udev_enumerate_add_match_tag =
      _udev_enumerate_add_match_tagPtr.asFunction<
          int Function(
              ffi.Pointer<struct_udev_enumerate>, ffi.Pointer<ffi.Char>)>();

  int udev_enumerate_add_match_parent(
    ffi.Pointer<struct_udev_enumerate> udev_enumerate,
    ffi.Pointer<struct_udev_device> parent,
  ) {
    return _udev_enumerate_add_match_parent(
      udev_enumerate,
      parent,
    );
  }

  late final _udev_enumerate_add_match_parentPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<struct_udev_enumerate>,
                  ffi.Pointer<struct_udev_device>)>>(
      'udev_enumerate_add_match_parent');
  late final _udev_enumerate_add_match_parent =
      _udev_enumerate_add_match_parentPtr.asFunction<
          int Function(ffi.Pointer<struct_udev_enumerate>,
              ffi.Pointer<struct_udev_device>)>();

  int udev_enumerate_add_match_is_initialized(
    ffi.Pointer<struct_udev_enumerate> udev_enumerate,
  ) {
    return _udev_enumerate_add_match_is_initialized(
      udev_enumerate,
    );
  }

  late final _udev_enumerate_add_match_is_initializedPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<struct_udev_enumerate>)>>(
      'udev_enumerate_add_match_is_initialized');
  late final _udev_enumerate_add_match_is_initialized =
      _udev_enumerate_add_match_is_initializedPtr
          .asFunction<int Function(ffi.Pointer<struct_udev_enumerate>)>();

  int udev_enumerate_add_syspath(
    ffi.Pointer<struct_udev_enumerate> udev_enumerate,
    ffi.Pointer<ffi.Char> syspath,
  ) {
    return _udev_enumerate_add_syspath(
      udev_enumerate,
      syspath,
    );
  }

  late final _udev_enumerate_add_syspathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<struct_udev_enumerate>,
              ffi.Pointer<ffi.Char>)>>('udev_enumerate_add_syspath');
  late final _udev_enumerate_add_syspath =
      _udev_enumerate_add_syspathPtr.asFunction<
          int Function(
              ffi.Pointer<struct_udev_enumerate>, ffi.Pointer<ffi.Char>)>();

  int udev_enumerate_scan_devices(
    ffi.Pointer<struct_udev_enumerate> udev_enumerate,
  ) {
    return _udev_enumerate_scan_devices(
      udev_enumerate,
    );
  }

  late final _udev_enumerate_scan_devicesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<struct_udev_enumerate>)>>(
      'udev_enumerate_scan_devices');
  late final _udev_enumerate_scan_devices = _udev_enumerate_scan_devicesPtr
      .asFunction<int Function(ffi.Pointer<struct_udev_enumerate>)>();

  int udev_enumerate_scan_subsystems(
    ffi.Pointer<struct_udev_enumerate> udev_enumerate,
  ) {
    return _udev_enumerate_scan_subsystems(
      udev_enumerate,
    );
  }

  late final _udev_enumerate_scan_subsystemsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<struct_udev_enumerate>)>>(
      'udev_enumerate_scan_subsystems');
  late final _udev_enumerate_scan_subsystems =
      _udev_enumerate_scan_subsystemsPtr
          .asFunction<int Function(ffi.Pointer<struct_udev_enumerate>)>();

  ffi.Pointer<struct_udev_list_entry> udev_enumerate_get_list_entry(
    ffi.Pointer<struct_udev_enumerate> udev_enumerate,
  ) {
    return _udev_enumerate_get_list_entry(
      udev_enumerate,
    );
  }

  late final _udev_enumerate_get_list_entryPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<struct_udev_list_entry> Function(
                  ffi.Pointer<struct_udev_enumerate>)>>(
      'udev_enumerate_get_list_entry');
  late final _udev_enumerate_get_list_entry =
      _udev_enumerate_get_list_entryPtr.asFunction<
          ffi.Pointer<struct_udev_list_entry> Function(
              ffi.Pointer<struct_udev_enumerate>)>();

  ffi.Pointer<struct_udev_queue> udev_queue_ref(
    ffi.Pointer<struct_udev_queue> udev_queue,
  ) {
    return _udev_queue_ref(
      udev_queue,
    );
  }

  late final _udev_queue_refPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<struct_udev_queue> Function(
              ffi.Pointer<struct_udev_queue>)>>('udev_queue_ref');
  late final _udev_queue_ref = _udev_queue_refPtr.asFunction<
      ffi.Pointer<struct_udev_queue> Function(
          ffi.Pointer<struct_udev_queue>)>();

  ffi.Pointer<struct_udev_queue> udev_queue_unref(
    ffi.Pointer<struct_udev_queue> udev_queue,
  ) {
    return _udev_queue_unref(
      udev_queue,
    );
  }

  late final _udev_queue_unrefPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<struct_udev_queue> Function(
              ffi.Pointer<struct_udev_queue>)>>('udev_queue_unref');
  late final _udev_queue_unref = _udev_queue_unrefPtr.asFunction<
      ffi.Pointer<struct_udev_queue> Function(
          ffi.Pointer<struct_udev_queue>)>();

  ffi.Pointer<struct_udev> udev_queue_get_udev(
    ffi.Pointer<struct_udev_queue> udev_queue,
  ) {
    return _udev_queue_get_udev(
      udev_queue,
    );
  }

  late final _udev_queue_get_udevPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<struct_udev> Function(
              ffi.Pointer<struct_udev_queue>)>>('udev_queue_get_udev');
  late final _udev_queue_get_udev = _udev_queue_get_udevPtr.asFunction<
      ffi.Pointer<struct_udev> Function(ffi.Pointer<struct_udev_queue>)>();

  ffi.Pointer<struct_udev_queue> udev_queue_new(
    ffi.Pointer<struct_udev> udev,
  ) {
    return _udev_queue_new(
      udev,
    );
  }

  late final _udev_queue_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<struct_udev_queue> Function(
              ffi.Pointer<struct_udev>)>>('udev_queue_new');
  late final _udev_queue_new = _udev_queue_newPtr.asFunction<
      ffi.Pointer<struct_udev_queue> Function(ffi.Pointer<struct_udev>)>();

  int udev_queue_get_kernel_seqnum(
    ffi.Pointer<struct_udev_queue> udev_queue,
  ) {
    return _udev_queue_get_kernel_seqnum(
      udev_queue,
    );
  }

  late final _udev_queue_get_kernel_seqnumPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(
              ffi.Pointer<struct_udev_queue>)>>('udev_queue_get_kernel_seqnum');
  late final _udev_queue_get_kernel_seqnum = _udev_queue_get_kernel_seqnumPtr
      .asFunction<int Function(ffi.Pointer<struct_udev_queue>)>();

  int udev_queue_get_udev_seqnum(
    ffi.Pointer<struct_udev_queue> udev_queue,
  ) {
    return _udev_queue_get_udev_seqnum(
      udev_queue,
    );
  }

  late final _udev_queue_get_udev_seqnumPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(
              ffi.Pointer<struct_udev_queue>)>>('udev_queue_get_udev_seqnum');
  late final _udev_queue_get_udev_seqnum = _udev_queue_get_udev_seqnumPtr
      .asFunction<int Function(ffi.Pointer<struct_udev_queue>)>();

  int udev_queue_get_udev_is_active(
    ffi.Pointer<struct_udev_queue> udev_queue,
  ) {
    return _udev_queue_get_udev_is_active(
      udev_queue,
    );
  }

  late final _udev_queue_get_udev_is_activePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<struct_udev_queue>)>>(
      'udev_queue_get_udev_is_active');
  late final _udev_queue_get_udev_is_active = _udev_queue_get_udev_is_activePtr
      .asFunction<int Function(ffi.Pointer<struct_udev_queue>)>();

  int udev_queue_get_queue_is_empty(
    ffi.Pointer<struct_udev_queue> udev_queue,
  ) {
    return _udev_queue_get_queue_is_empty(
      udev_queue,
    );
  }

  late final _udev_queue_get_queue_is_emptyPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<struct_udev_queue>)>>(
      'udev_queue_get_queue_is_empty');
  late final _udev_queue_get_queue_is_empty = _udev_queue_get_queue_is_emptyPtr
      .asFunction<int Function(ffi.Pointer<struct_udev_queue>)>();

  int udev_queue_get_seqnum_is_finished(
    ffi.Pointer<struct_udev_queue> udev_queue,
    int seqnum,
  ) {
    return _udev_queue_get_seqnum_is_finished(
      udev_queue,
      seqnum,
    );
  }

  late final _udev_queue_get_seqnum_is_finishedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<struct_udev_queue>,
              ffi.UnsignedLongLong)>>('udev_queue_get_seqnum_is_finished');
  late final _udev_queue_get_seqnum_is_finished =
      _udev_queue_get_seqnum_is_finishedPtr
          .asFunction<int Function(ffi.Pointer<struct_udev_queue>, int)>();

  int udev_queue_get_seqnum_sequence_is_finished(
    ffi.Pointer<struct_udev_queue> udev_queue,
    int start,
    int end,
  ) {
    return _udev_queue_get_seqnum_sequence_is_finished(
      udev_queue,
      start,
      end,
    );
  }

  late final _udev_queue_get_seqnum_sequence_is_finishedPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<struct_udev_queue>,
                  ffi.UnsignedLongLong, ffi.UnsignedLongLong)>>(
      'udev_queue_get_seqnum_sequence_is_finished');
  late final _udev_queue_get_seqnum_sequence_is_finished =
      _udev_queue_get_seqnum_sequence_is_finishedPtr
          .asFunction<int Function(ffi.Pointer<struct_udev_queue>, int, int)>();

  int udev_queue_get_fd(
    ffi.Pointer<struct_udev_queue> udev_queue,
  ) {
    return _udev_queue_get_fd(
      udev_queue,
    );
  }

  late final _udev_queue_get_fdPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<struct_udev_queue>)>>(
      'udev_queue_get_fd');
  late final _udev_queue_get_fd = _udev_queue_get_fdPtr
      .asFunction<int Function(ffi.Pointer<struct_udev_queue>)>();

  int udev_queue_flush(
    ffi.Pointer<struct_udev_queue> udev_queue,
  ) {
    return _udev_queue_flush(
      udev_queue,
    );
  }

  late final _udev_queue_flushPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<struct_udev_queue>)>>(
      'udev_queue_flush');
  late final _udev_queue_flush = _udev_queue_flushPtr
      .asFunction<int Function(ffi.Pointer<struct_udev_queue>)>();

  ffi.Pointer<struct_udev_list_entry> udev_queue_get_queued_list_entry(
    ffi.Pointer<struct_udev_queue> udev_queue,
  ) {
    return _udev_queue_get_queued_list_entry(
      udev_queue,
    );
  }

  late final _udev_queue_get_queued_list_entryPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<struct_udev_list_entry> Function(
                  ffi.Pointer<struct_udev_queue>)>>(
      'udev_queue_get_queued_list_entry');
  late final _udev_queue_get_queued_list_entry =
      _udev_queue_get_queued_list_entryPtr.asFunction<
          ffi.Pointer<struct_udev_list_entry> Function(
              ffi.Pointer<struct_udev_queue>)>();

  ffi.Pointer<struct_udev_hwdb> udev_hwdb_new(
    ffi.Pointer<struct_udev> udev,
  ) {
    return _udev_hwdb_new(
      udev,
    );
  }

  late final _udev_hwdb_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<struct_udev_hwdb> Function(
              ffi.Pointer<struct_udev>)>>('udev_hwdb_new');
  late final _udev_hwdb_new = _udev_hwdb_newPtr.asFunction<
      ffi.Pointer<struct_udev_hwdb> Function(ffi.Pointer<struct_udev>)>();

  ffi.Pointer<struct_udev_hwdb> udev_hwdb_ref(
    ffi.Pointer<struct_udev_hwdb> hwdb,
  ) {
    return _udev_hwdb_ref(
      hwdb,
    );
  }

  late final _udev_hwdb_refPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<struct_udev_hwdb> Function(
              ffi.Pointer<struct_udev_hwdb>)>>('udev_hwdb_ref');
  late final _udev_hwdb_ref = _udev_hwdb_refPtr.asFunction<
      ffi.Pointer<struct_udev_hwdb> Function(ffi.Pointer<struct_udev_hwdb>)>();

  ffi.Pointer<struct_udev_hwdb> udev_hwdb_unref(
    ffi.Pointer<struct_udev_hwdb> hwdb,
  ) {
    return _udev_hwdb_unref(
      hwdb,
    );
  }

  late final _udev_hwdb_unrefPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<struct_udev_hwdb> Function(
              ffi.Pointer<struct_udev_hwdb>)>>('udev_hwdb_unref');
  late final _udev_hwdb_unref = _udev_hwdb_unrefPtr.asFunction<
      ffi.Pointer<struct_udev_hwdb> Function(ffi.Pointer<struct_udev_hwdb>)>();

  ffi.Pointer<struct_udev_list_entry> udev_hwdb_get_properties_list_entry(
    ffi.Pointer<struct_udev_hwdb> hwdb,
    ffi.Pointer<ffi.Char> modalias,
    int flags,
  ) {
    return _udev_hwdb_get_properties_list_entry(
      hwdb,
      modalias,
      flags,
    );
  }

  late final _udev_hwdb_get_properties_list_entryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<struct_udev_list_entry> Function(
              ffi.Pointer<struct_udev_hwdb>,
              ffi.Pointer<ffi.Char>,
              ffi.UnsignedInt)>>('udev_hwdb_get_properties_list_entry');
  late final _udev_hwdb_get_properties_list_entry =
      _udev_hwdb_get_properties_list_entryPtr.asFunction<
          ffi.Pointer<struct_udev_list_entry> Function(
              ffi.Pointer<struct_udev_hwdb>, ffi.Pointer<ffi.Char>, int)>();

  int udev_util_encode_string(
    ffi.Pointer<ffi.Char> str,
    ffi.Pointer<ffi.Char> str_enc,
    int len,
  ) {
    return _udev_util_encode_string(
      str,
      str_enc,
      len,
    );
  }

  late final _udev_util_encode_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('udev_util_encode_string');
  late final _udev_util_encode_string = _udev_util_encode_stringPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<struct_wlr_session> wlr_session_create(
    ffi.Pointer<struct_wl_display> disp,
  ) {
    return _wlr_session_create(
      disp,
    );
  }

  late final _wlr_session_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<struct_wlr_session> Function(
              ffi.Pointer<struct_wl_display>)>>('wlr_session_create');
  late final _wlr_session_create = _wlr_session_createPtr.asFunction<
      ffi.Pointer<struct_wlr_session> Function(
          ffi.Pointer<struct_wl_display>)>();

  void wlr_session_destroy(
    ffi.Pointer<struct_wlr_session> session,
  ) {
    return _wlr_session_destroy(
      session,
    );
  }

  late final _wlr_session_destroyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wlr_session>)>>('wlr_session_destroy');
  late final _wlr_session_destroy = _wlr_session_destroyPtr
      .asFunction<void Function(ffi.Pointer<struct_wlr_session>)>();

  ffi.Pointer<struct_wlr_device> wlr_session_open_file(
    ffi.Pointer<struct_wlr_session> session,
    ffi.Pointer<ffi.Char> path,
  ) {
    return _wlr_session_open_file(
      session,
      path,
    );
  }

  late final _wlr_session_open_filePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<struct_wlr_device> Function(
              ffi.Pointer<struct_wlr_session>,
              ffi.Pointer<ffi.Char>)>>('wlr_session_open_file');
  late final _wlr_session_open_file = _wlr_session_open_filePtr.asFunction<
      ffi.Pointer<struct_wlr_device> Function(
          ffi.Pointer<struct_wlr_session>, ffi.Pointer<ffi.Char>)>();

  void wlr_session_close_file(
    ffi.Pointer<struct_wlr_session> session,
    ffi.Pointer<struct_wlr_device> device,
  ) {
    return _wlr_session_close_file(
      session,
      device,
    );
  }

  late final _wlr_session_close_filePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wlr_session>,
              ffi.Pointer<struct_wlr_device>)>>('wlr_session_close_file');
  late final _wlr_session_close_file = _wlr_session_close_filePtr.asFunction<
      void Function(
          ffi.Pointer<struct_wlr_session>, ffi.Pointer<struct_wlr_device>)>();

  bool wlr_session_change_vt(
    ffi.Pointer<struct_wlr_session> session,
    int vt,
  ) {
    return _wlr_session_change_vt(
      session,
      vt,
    );
  }

  late final _wlr_session_change_vtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<struct_wlr_session>,
              ffi.UnsignedInt)>>('wlr_session_change_vt');
  late final _wlr_session_change_vt = _wlr_session_change_vtPtr
      .asFunction<bool Function(ffi.Pointer<struct_wlr_session>, int)>();

  int wlr_session_find_gpus(
    ffi.Pointer<struct_wlr_session> session,
    int ret_len,
    ffi.Pointer<ffi.Pointer<struct_wlr_device>> ret,
  ) {
    return _wlr_session_find_gpus(
      session,
      ret_len,
      ret,
    );
  }

  late final _wlr_session_find_gpusPtr = _lookup<
          ffi.NativeFunction<
              ssize_t Function(ffi.Pointer<struct_wlr_session>, ffi.Size,
                  ffi.Pointer<ffi.Pointer<struct_wlr_device>>)>>(
      'wlr_session_find_gpus');
  late final _wlr_session_find_gpus = _wlr_session_find_gpusPtr.asFunction<
      int Function(ffi.Pointer<struct_wlr_session>, int,
          ffi.Pointer<ffi.Pointer<struct_wlr_device>>)>();

  ffi.Pointer<struct_wlr_backend> wlr_backend_autocreate(
    ffi.Pointer<struct_wl_display> display,
  ) {
    return _wlr_backend_autocreate(
      display,
    );
  }

  late final _wlr_backend_autocreatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<struct_wlr_backend> Function(
              ffi.Pointer<struct_wl_display>)>>('wlr_backend_autocreate');
  late final _wlr_backend_autocreate = _wlr_backend_autocreatePtr.asFunction<
      ffi.Pointer<struct_wlr_backend> Function(
          ffi.Pointer<struct_wl_display>)>();

  bool wlr_backend_start(
    ffi.Pointer<struct_wlr_backend> backend,
  ) {
    return _wlr_backend_start(
      backend,
    );
  }

  late final _wlr_backend_startPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<struct_wlr_backend>)>>('wlr_backend_start');
  late final _wlr_backend_start = _wlr_backend_startPtr
      .asFunction<bool Function(ffi.Pointer<struct_wlr_backend>)>();

  void wlr_backend_destroy(
    ffi.Pointer<struct_wlr_backend> backend,
  ) {
    return _wlr_backend_destroy(
      backend,
    );
  }

  late final _wlr_backend_destroyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wlr_backend>)>>('wlr_backend_destroy');
  late final _wlr_backend_destroy = _wlr_backend_destroyPtr
      .asFunction<void Function(ffi.Pointer<struct_wlr_backend>)>();

  ffi.Pointer<struct_wlr_session> wlr_backend_get_session(
    ffi.Pointer<struct_wlr_backend> backend,
  ) {
    return _wlr_backend_get_session(
      backend,
    );
  }

  late final _wlr_backend_get_sessionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<struct_wlr_session> Function(
              ffi.Pointer<struct_wlr_backend>)>>('wlr_backend_get_session');
  late final _wlr_backend_get_session = _wlr_backend_get_sessionPtr.asFunction<
      ffi.Pointer<struct_wlr_session> Function(
          ffi.Pointer<struct_wlr_backend>)>();

  int wlr_backend_get_presentation_clock(
    ffi.Pointer<struct_wlr_backend> backend,
  ) {
    return _wlr_backend_get_presentation_clock(
      backend,
    );
  }

  late final _wlr_backend_get_presentation_clockPtr = _lookup<
          ffi.NativeFunction<
              clockid_t Function(ffi.Pointer<struct_wlr_backend>)>>(
      'wlr_backend_get_presentation_clock');
  late final _wlr_backend_get_presentation_clock =
      _wlr_backend_get_presentation_clockPtr
          .asFunction<int Function(ffi.Pointer<struct_wlr_backend>)>();

  int wlr_backend_get_drm_fd(
    ffi.Pointer<struct_wlr_backend> backend,
  ) {
    return _wlr_backend_get_drm_fd(
      backend,
    );
  }

  late final _wlr_backend_get_drm_fdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<struct_wlr_backend>)>>('wlr_backend_get_drm_fd');
  late final _wlr_backend_get_drm_fd = _wlr_backend_get_drm_fdPtr
      .asFunction<int Function(ffi.Pointer<struct_wlr_backend>)>();

  void wlr_allocator_init(
    ffi.Pointer<struct_wlr_allocator> alloc,
    ffi.Pointer<struct_wlr_allocator_interface> impl,
    int buffer_caps,
  ) {
    return _wlr_allocator_init(
      alloc,
      impl,
      buffer_caps,
    );
  }

  late final _wlr_allocator_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wlr_allocator>,
              ffi.Pointer<struct_wlr_allocator_interface>,
              ffi.Uint32)>>('wlr_allocator_init');
  late final _wlr_allocator_init = _wlr_allocator_initPtr.asFunction<
      void Function(ffi.Pointer<struct_wlr_allocator>,
          ffi.Pointer<struct_wlr_allocator_interface>, int)>();

  ffi.Pointer<struct_wlr_allocator> wlr_allocator_autocreate(
    ffi.Pointer<struct_wlr_backend> backend,
    ffi.Pointer<struct_wlr_renderer> renderer,
  ) {
    return _wlr_allocator_autocreate(
      backend,
      renderer,
    );
  }

  late final _wlr_allocator_autocreatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<struct_wlr_allocator> Function(
              ffi.Pointer<struct_wlr_backend>,
              ffi.Pointer<struct_wlr_renderer>)>>('wlr_allocator_autocreate');
  late final _wlr_allocator_autocreate =
      _wlr_allocator_autocreatePtr.asFunction<
          ffi.Pointer<struct_wlr_allocator> Function(
              ffi.Pointer<struct_wlr_backend>,
              ffi.Pointer<struct_wlr_renderer>)>();

  void wlr_allocator_destroy(
    ffi.Pointer<struct_wlr_allocator> alloc,
  ) {
    return _wlr_allocator_destroy(
      alloc,
    );
  }

  late final _wlr_allocator_destroyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wlr_allocator>)>>('wlr_allocator_destroy');
  late final _wlr_allocator_destroy = _wlr_allocator_destroyPtr
      .asFunction<void Function(ffi.Pointer<struct_wlr_allocator>)>();

  ffi.Pointer<struct_wlr_buffer> wlr_allocator_create_buffer(
    ffi.Pointer<struct_wlr_allocator> alloc,
    int width,
    int height,
    ffi.Pointer<struct_wlr_drm_format> format,
  ) {
    return _wlr_allocator_create_buffer(
      alloc,
      width,
      height,
      format,
    );
  }

  late final _wlr_allocator_create_bufferPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<struct_wlr_buffer> Function(
                  ffi.Pointer<struct_wlr_allocator>,
                  ffi.Int,
                  ffi.Int,
                  ffi.Pointer<struct_wlr_drm_format>)>>(
      'wlr_allocator_create_buffer');
  late final _wlr_allocator_create_buffer =
      _wlr_allocator_create_bufferPtr.asFunction<
          ffi.Pointer<struct_wlr_buffer> Function(
              ffi.Pointer<struct_wlr_allocator>,
              int,
              int,
              ffi.Pointer<struct_wlr_drm_format>)>();

  void wlr_dmabuf_attributes_finish(
    ffi.Pointer<struct_wlr_dmabuf_attributes> attribs,
  ) {
    return _wlr_dmabuf_attributes_finish(
      attribs,
    );
  }

  late final _wlr_dmabuf_attributes_finishPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<struct_wlr_dmabuf_attributes>)>>(
      'wlr_dmabuf_attributes_finish');
  late final _wlr_dmabuf_attributes_finish = _wlr_dmabuf_attributes_finishPtr
      .asFunction<void Function(ffi.Pointer<struct_wlr_dmabuf_attributes>)>();

  bool wlr_dmabuf_attributes_copy(
    ffi.Pointer<struct_wlr_dmabuf_attributes> dst,
    ffi.Pointer<struct_wlr_dmabuf_attributes> src,
  ) {
    return _wlr_dmabuf_attributes_copy(
      dst,
      src,
    );
  }

  late final _wlr_dmabuf_attributes_copyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Bool Function(ffi.Pointer<struct_wlr_dmabuf_attributes>,
                  ffi.Pointer<struct_wlr_dmabuf_attributes>)>>(
      'wlr_dmabuf_attributes_copy');
  late final _wlr_dmabuf_attributes_copy =
      _wlr_dmabuf_attributes_copyPtr.asFunction<
          bool Function(ffi.Pointer<struct_wlr_dmabuf_attributes>,
              ffi.Pointer<struct_wlr_dmabuf_attributes>)>();

  ffi.Pointer<struct_wlr_texture> wlr_texture_from_pixels(
    ffi.Pointer<struct_wlr_renderer> renderer,
    int fmt,
    int stride,
    int width,
    int height,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _wlr_texture_from_pixels(
      renderer,
      fmt,
      stride,
      width,
      height,
      data,
    );
  }

  late final _wlr_texture_from_pixelsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<struct_wlr_texture> Function(
              ffi.Pointer<struct_wlr_renderer>,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Pointer<ffi.Void>)>>('wlr_texture_from_pixels');
  late final _wlr_texture_from_pixels = _wlr_texture_from_pixelsPtr.asFunction<
      ffi.Pointer<struct_wlr_texture> Function(ffi.Pointer<struct_wlr_renderer>,
          int, int, int, int, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<struct_wlr_texture> wlr_texture_from_dmabuf(
    ffi.Pointer<struct_wlr_renderer> renderer,
    ffi.Pointer<struct_wlr_dmabuf_attributes> attribs,
  ) {
    return _wlr_texture_from_dmabuf(
      renderer,
      attribs,
    );
  }

  late final _wlr_texture_from_dmabufPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<struct_wlr_texture> Function(
                  ffi.Pointer<struct_wlr_renderer>,
                  ffi.Pointer<struct_wlr_dmabuf_attributes>)>>(
      'wlr_texture_from_dmabuf');
  late final _wlr_texture_from_dmabuf = _wlr_texture_from_dmabufPtr.asFunction<
      ffi.Pointer<struct_wlr_texture> Function(ffi.Pointer<struct_wlr_renderer>,
          ffi.Pointer<struct_wlr_dmabuf_attributes>)>();

  bool wlr_texture_is_opaque(
    ffi.Pointer<struct_wlr_texture> texture,
  ) {
    return _wlr_texture_is_opaque(
      texture,
    );
  }

  late final _wlr_texture_is_opaquePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<struct_wlr_texture>)>>('wlr_texture_is_opaque');
  late final _wlr_texture_is_opaque = _wlr_texture_is_opaquePtr
      .asFunction<bool Function(ffi.Pointer<struct_wlr_texture>)>();

  bool wlr_texture_write_pixels(
    ffi.Pointer<struct_wlr_texture> texture,
    int stride,
    int width,
    int height,
    int src_x,
    int src_y,
    int dst_x,
    int dst_y,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _wlr_texture_write_pixels(
      texture,
      stride,
      width,
      height,
      src_x,
      src_y,
      dst_x,
      dst_y,
      data,
    );
  }

  late final _wlr_texture_write_pixelsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<struct_wlr_texture>,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Pointer<ffi.Void>)>>('wlr_texture_write_pixels');
  late final _wlr_texture_write_pixels =
      _wlr_texture_write_pixelsPtr.asFunction<
          bool Function(ffi.Pointer<struct_wlr_texture>, int, int, int, int,
              int, int, int, ffi.Pointer<ffi.Void>)>();

  void wlr_texture_destroy(
    ffi.Pointer<struct_wlr_texture> texture,
  ) {
    return _wlr_texture_destroy(
      texture,
    );
  }

  late final _wlr_texture_destroyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wlr_texture>)>>('wlr_texture_destroy');
  late final _wlr_texture_destroy = _wlr_texture_destroyPtr
      .asFunction<void Function(ffi.Pointer<struct_wlr_texture>)>();

  ffi.Pointer<struct_wlr_texture> wlr_texture_from_buffer(
    ffi.Pointer<struct_wlr_renderer> renderer,
    ffi.Pointer<struct_wlr_buffer> buffer,
  ) {
    return _wlr_texture_from_buffer(
      renderer,
      buffer,
    );
  }

  late final _wlr_texture_from_bufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<struct_wlr_texture> Function(
              ffi.Pointer<struct_wlr_renderer>,
              ffi.Pointer<struct_wlr_buffer>)>>('wlr_texture_from_buffer');
  late final _wlr_texture_from_buffer = _wlr_texture_from_bufferPtr.asFunction<
      ffi.Pointer<struct_wlr_texture> Function(
          ffi.Pointer<struct_wlr_renderer>, ffi.Pointer<struct_wlr_buffer>)>();

  ffi.Pointer<struct_wlr_renderer> wlr_renderer_autocreate(
    ffi.Pointer<struct_wlr_backend> backend,
  ) {
    return _wlr_renderer_autocreate(
      backend,
    );
  }

  late final _wlr_renderer_autocreatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<struct_wlr_renderer> Function(
              ffi.Pointer<struct_wlr_backend>)>>('wlr_renderer_autocreate');
  late final _wlr_renderer_autocreate = _wlr_renderer_autocreatePtr.asFunction<
      ffi.Pointer<struct_wlr_renderer> Function(
          ffi.Pointer<struct_wlr_backend>)>();

  void wlr_renderer_begin(
    ffi.Pointer<struct_wlr_renderer> r,
    int width,
    int height,
  ) {
    return _wlr_renderer_begin(
      r,
      width,
      height,
    );
  }

  late final _wlr_renderer_beginPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wlr_renderer>, ffi.Uint32,
              ffi.Uint32)>>('wlr_renderer_begin');
  late final _wlr_renderer_begin = _wlr_renderer_beginPtr
      .asFunction<void Function(ffi.Pointer<struct_wlr_renderer>, int, int)>();

  bool wlr_renderer_begin_with_buffer(
    ffi.Pointer<struct_wlr_renderer> r,
    ffi.Pointer<struct_wlr_buffer> buffer,
  ) {
    return _wlr_renderer_begin_with_buffer(
      r,
      buffer,
    );
  }

  late final _wlr_renderer_begin_with_bufferPtr = _lookup<
          ffi.NativeFunction<
              ffi.Bool Function(ffi.Pointer<struct_wlr_renderer>,
                  ffi.Pointer<struct_wlr_buffer>)>>(
      'wlr_renderer_begin_with_buffer');
  late final _wlr_renderer_begin_with_buffer =
      _wlr_renderer_begin_with_bufferPtr.asFunction<
          bool Function(ffi.Pointer<struct_wlr_renderer>,
              ffi.Pointer<struct_wlr_buffer>)>();

  void wlr_renderer_end(
    ffi.Pointer<struct_wlr_renderer> r,
  ) {
    return _wlr_renderer_end(
      r,
    );
  }

  late final _wlr_renderer_endPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wlr_renderer>)>>('wlr_renderer_end');
  late final _wlr_renderer_end = _wlr_renderer_endPtr
      .asFunction<void Function(ffi.Pointer<struct_wlr_renderer>)>();

  void wlr_renderer_clear(
    ffi.Pointer<struct_wlr_renderer> r,
    ffi.Pointer<ffi.Float> color,
  ) {
    return _wlr_renderer_clear(
      r,
      color,
    );
  }

  late final _wlr_renderer_clearPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wlr_renderer>,
              ffi.Pointer<ffi.Float>)>>('wlr_renderer_clear');
  late final _wlr_renderer_clear = _wlr_renderer_clearPtr.asFunction<
      void Function(
          ffi.Pointer<struct_wlr_renderer>, ffi.Pointer<ffi.Float>)>();

  void wlr_renderer_scissor(
    ffi.Pointer<struct_wlr_renderer> r,
    ffi.Pointer<struct_wlr_box> box,
  ) {
    return _wlr_renderer_scissor(
      r,
      box,
    );
  }

  late final _wlr_renderer_scissorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wlr_renderer>,
              ffi.Pointer<struct_wlr_box>)>>('wlr_renderer_scissor');
  late final _wlr_renderer_scissor = _wlr_renderer_scissorPtr.asFunction<
      void Function(
          ffi.Pointer<struct_wlr_renderer>, ffi.Pointer<struct_wlr_box>)>();

  bool wlr_render_texture(
    ffi.Pointer<struct_wlr_renderer> r,
    ffi.Pointer<struct_wlr_texture> texture,
    ffi.Pointer<ffi.Float> projection,
    int x,
    int y,
    double alpha,
  ) {
    return _wlr_render_texture(
      r,
      texture,
      projection,
      x,
      y,
      alpha,
    );
  }

  late final _wlr_render_texturePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<struct_wlr_renderer>,
              ffi.Pointer<struct_wlr_texture>,
              ffi.Pointer<ffi.Float>,
              ffi.Int,
              ffi.Int,
              ffi.Float)>>('wlr_render_texture');
  late final _wlr_render_texture = _wlr_render_texturePtr.asFunction<
      bool Function(
          ffi.Pointer<struct_wlr_renderer>,
          ffi.Pointer<struct_wlr_texture>,
          ffi.Pointer<ffi.Float>,
          int,
          int,
          double)>();

  bool wlr_render_texture_with_matrix(
    ffi.Pointer<struct_wlr_renderer> r,
    ffi.Pointer<struct_wlr_texture> texture,
    ffi.Pointer<ffi.Float> matrix,
    double alpha,
  ) {
    return _wlr_render_texture_with_matrix(
      r,
      texture,
      matrix,
      alpha,
    );
  }

  late final _wlr_render_texture_with_matrixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<struct_wlr_renderer>,
              ffi.Pointer<struct_wlr_texture>,
              ffi.Pointer<ffi.Float>,
              ffi.Float)>>('wlr_render_texture_with_matrix');
  late final _wlr_render_texture_with_matrix =
      _wlr_render_texture_with_matrixPtr.asFunction<
          bool Function(
              ffi.Pointer<struct_wlr_renderer>,
              ffi.Pointer<struct_wlr_texture>,
              ffi.Pointer<ffi.Float>,
              double)>();

  bool wlr_render_subtexture_with_matrix(
    ffi.Pointer<struct_wlr_renderer> r,
    ffi.Pointer<struct_wlr_texture> texture,
    ffi.Pointer<struct_wlr_fbox> box,
    ffi.Pointer<ffi.Float> matrix,
    double alpha,
  ) {
    return _wlr_render_subtexture_with_matrix(
      r,
      texture,
      box,
      matrix,
      alpha,
    );
  }

  late final _wlr_render_subtexture_with_matrixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<struct_wlr_renderer>,
              ffi.Pointer<struct_wlr_texture>,
              ffi.Pointer<struct_wlr_fbox>,
              ffi.Pointer<ffi.Float>,
              ffi.Float)>>('wlr_render_subtexture_with_matrix');
  late final _wlr_render_subtexture_with_matrix =
      _wlr_render_subtexture_with_matrixPtr.asFunction<
          bool Function(
              ffi.Pointer<struct_wlr_renderer>,
              ffi.Pointer<struct_wlr_texture>,
              ffi.Pointer<struct_wlr_fbox>,
              ffi.Pointer<ffi.Float>,
              double)>();

  void wlr_render_rect(
    ffi.Pointer<struct_wlr_renderer> r,
    ffi.Pointer<struct_wlr_box> box,
    ffi.Pointer<ffi.Float> color,
    ffi.Pointer<ffi.Float> projection,
  ) {
    return _wlr_render_rect(
      r,
      box,
      color,
      projection,
    );
  }

  late final _wlr_render_rectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wlr_renderer>,
              ffi.Pointer<struct_wlr_box>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>)>>('wlr_render_rect');
  late final _wlr_render_rect = _wlr_render_rectPtr.asFunction<
      void Function(
          ffi.Pointer<struct_wlr_renderer>,
          ffi.Pointer<struct_wlr_box>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>)>();

  void wlr_render_quad_with_matrix(
    ffi.Pointer<struct_wlr_renderer> r,
    ffi.Pointer<ffi.Float> color,
    ffi.Pointer<ffi.Float> matrix,
  ) {
    return _wlr_render_quad_with_matrix(
      r,
      color,
      matrix,
    );
  }

  late final _wlr_render_quad_with_matrixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wlr_renderer>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>)>>('wlr_render_quad_with_matrix');
  late final _wlr_render_quad_with_matrix =
      _wlr_render_quad_with_matrixPtr.asFunction<
          void Function(ffi.Pointer<struct_wlr_renderer>,
              ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Float>)>();

  ffi.Pointer<ffi.Uint32> wlr_renderer_get_shm_texture_formats(
    ffi.Pointer<struct_wlr_renderer> r,
    ffi.Pointer<ffi.Size> len,
  ) {
    return _wlr_renderer_get_shm_texture_formats(
      r,
      len,
    );
  }

  late final _wlr_renderer_get_shm_texture_formatsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Uint32> Function(ffi.Pointer<struct_wlr_renderer>,
              ffi.Pointer<ffi.Size>)>>('wlr_renderer_get_shm_texture_formats');
  late final _wlr_renderer_get_shm_texture_formats =
      _wlr_renderer_get_shm_texture_formatsPtr.asFunction<
          ffi.Pointer<ffi.Uint32> Function(
              ffi.Pointer<struct_wlr_renderer>, ffi.Pointer<ffi.Size>)>();

  ffi.Pointer<struct_wlr_drm_format_set>
      wlr_renderer_get_dmabuf_texture_formats(
    ffi.Pointer<struct_wlr_renderer> renderer,
  ) {
    return _wlr_renderer_get_dmabuf_texture_formats(
      renderer,
    );
  }

  late final _wlr_renderer_get_dmabuf_texture_formatsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<struct_wlr_drm_format_set> Function(
                  ffi.Pointer<struct_wlr_renderer>)>>(
      'wlr_renderer_get_dmabuf_texture_formats');
  late final _wlr_renderer_get_dmabuf_texture_formats =
      _wlr_renderer_get_dmabuf_texture_formatsPtr.asFunction<
          ffi.Pointer<struct_wlr_drm_format_set> Function(
              ffi.Pointer<struct_wlr_renderer>)>();

  bool wlr_renderer_read_pixels(
    ffi.Pointer<struct_wlr_renderer> r,
    int fmt,
    ffi.Pointer<ffi.Uint32> flags,
    int stride,
    int width,
    int height,
    int src_x,
    int src_y,
    int dst_x,
    int dst_y,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _wlr_renderer_read_pixels(
      r,
      fmt,
      flags,
      stride,
      width,
      height,
      src_x,
      src_y,
      dst_x,
      dst_y,
      data,
    );
  }

  late final _wlr_renderer_read_pixelsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<struct_wlr_renderer>,
              ffi.Uint32,
              ffi.Pointer<ffi.Uint32>,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Pointer<ffi.Void>)>>('wlr_renderer_read_pixels');
  late final _wlr_renderer_read_pixels =
      _wlr_renderer_read_pixelsPtr.asFunction<
          bool Function(
              ffi.Pointer<struct_wlr_renderer>,
              int,
              ffi.Pointer<ffi.Uint32>,
              int,
              int,
              int,
              int,
              int,
              int,
              int,
              ffi.Pointer<ffi.Void>)>();

  bool wlr_renderer_init_wl_display(
    ffi.Pointer<struct_wlr_renderer> r,
    ffi.Pointer<struct_wl_display> wl_display,
  ) {
    return _wlr_renderer_init_wl_display(
      r,
      wl_display,
    );
  }

  late final _wlr_renderer_init_wl_displayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<struct_wlr_renderer>,
              ffi.Pointer<struct_wl_display>)>>('wlr_renderer_init_wl_display');
  late final _wlr_renderer_init_wl_display =
      _wlr_renderer_init_wl_displayPtr.asFunction<
          bool Function(ffi.Pointer<struct_wlr_renderer>,
              ffi.Pointer<struct_wl_display>)>();

  bool wlr_renderer_init_wl_shm(
    ffi.Pointer<struct_wlr_renderer> r,
    ffi.Pointer<struct_wl_display> wl_display,
  ) {
    return _wlr_renderer_init_wl_shm(
      r,
      wl_display,
    );
  }

  late final _wlr_renderer_init_wl_shmPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<struct_wlr_renderer>,
              ffi.Pointer<struct_wl_display>)>>('wlr_renderer_init_wl_shm');
  late final _wlr_renderer_init_wl_shm =
      _wlr_renderer_init_wl_shmPtr.asFunction<
          bool Function(ffi.Pointer<struct_wlr_renderer>,
              ffi.Pointer<struct_wl_display>)>();

  int wlr_renderer_get_drm_fd(
    ffi.Pointer<struct_wlr_renderer> r,
  ) {
    return _wlr_renderer_get_drm_fd(
      r,
    );
  }

  late final _wlr_renderer_get_drm_fdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<struct_wlr_renderer>)>>('wlr_renderer_get_drm_fd');
  late final _wlr_renderer_get_drm_fd = _wlr_renderer_get_drm_fdPtr
      .asFunction<int Function(ffi.Pointer<struct_wlr_renderer>)>();

  void wlr_renderer_destroy(
    ffi.Pointer<struct_wlr_renderer> renderer,
  ) {
    return _wlr_renderer_destroy(
      renderer,
    );
  }

  late final _wlr_renderer_destroyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wlr_renderer>)>>('wlr_renderer_destroy');
  late final _wlr_renderer_destroy = _wlr_renderer_destroyPtr
      .asFunction<void Function(ffi.Pointer<struct_wlr_renderer>)>();

  ffi.Pointer<struct_wlr_compositor> wlr_compositor_create(
    ffi.Pointer<struct_wl_display> display,
    ffi.Pointer<struct_wlr_renderer> renderer,
  ) {
    return _wlr_compositor_create(
      display,
      renderer,
    );
  }

  late final _wlr_compositor_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<struct_wlr_compositor> Function(
              ffi.Pointer<struct_wl_display>,
              ffi.Pointer<struct_wlr_renderer>)>>('wlr_compositor_create');
  late final _wlr_compositor_create = _wlr_compositor_createPtr.asFunction<
      ffi.Pointer<struct_wlr_compositor> Function(
          ffi.Pointer<struct_wl_display>, ffi.Pointer<struct_wlr_renderer>)>();

  bool wlr_surface_is_subsurface(
    ffi.Pointer<struct_wlr_surface> surface,
  ) {
    return _wlr_surface_is_subsurface(
      surface,
    );
  }

  late final _wlr_surface_is_subsurfacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<struct_wlr_surface>)>>('wlr_surface_is_subsurface');
  late final _wlr_surface_is_subsurface = _wlr_surface_is_subsurfacePtr
      .asFunction<bool Function(ffi.Pointer<struct_wlr_surface>)>();

  ffi.Pointer<struct_wlr_subsurface> wlr_subsurface_from_wlr_surface(
    ffi.Pointer<struct_wlr_surface> surface,
  ) {
    return _wlr_subsurface_from_wlr_surface(
      surface,
    );
  }

  late final _wlr_subsurface_from_wlr_surfacePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<struct_wlr_subsurface> Function(
                  ffi.Pointer<struct_wlr_surface>)>>(
      'wlr_subsurface_from_wlr_surface');
  late final _wlr_subsurface_from_wlr_surface =
      _wlr_subsurface_from_wlr_surfacePtr.asFunction<
          ffi.Pointer<struct_wlr_subsurface> Function(
              ffi.Pointer<struct_wlr_surface>)>();

  int wl_client_add_resource(
    ffi.Pointer<struct_wl_client> client,
    ffi.Pointer<struct_wl_resource> resource,
  ) {
    return _wl_client_add_resource(
      client,
      resource,
    );
  }

  late final _wl_client_add_resourcePtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint32 Function(ffi.Pointer<struct_wl_client>,
              ffi.Pointer<struct_wl_resource>)>>('wl_client_add_resource');
  late final _wl_client_add_resource = _wl_client_add_resourcePtr.asFunction<
      int Function(
          ffi.Pointer<struct_wl_client>, ffi.Pointer<struct_wl_resource>)>();

  ffi.Pointer<struct_wl_resource> wl_client_add_object(
    ffi.Pointer<struct_wl_client> client,
    ffi.Pointer<struct_wl_interface> interface1,
    ffi.Pointer<ffi.Void> implementation,
    int id,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _wl_client_add_object(
      client,
      interface1,
      implementation,
      id,
      data,
    );
  }

  late final _wl_client_add_objectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<struct_wl_resource> Function(
              ffi.Pointer<struct_wl_client>,
              ffi.Pointer<struct_wl_interface>,
              ffi.Pointer<ffi.Void>,
              ffi.Uint32,
              ffi.Pointer<ffi.Void>)>>('wl_client_add_object');
  late final _wl_client_add_object = _wl_client_add_objectPtr.asFunction<
      ffi.Pointer<struct_wl_resource> Function(
          ffi.Pointer<struct_wl_client>,
          ffi.Pointer<struct_wl_interface>,
          ffi.Pointer<ffi.Void>,
          int,
          ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<struct_wl_resource> wl_client_new_object(
    ffi.Pointer<struct_wl_client> client,
    ffi.Pointer<struct_wl_interface> interface1,
    ffi.Pointer<ffi.Void> implementation,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _wl_client_new_object(
      client,
      interface1,
      implementation,
      data,
    );
  }

  late final _wl_client_new_objectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<struct_wl_resource> Function(
              ffi.Pointer<struct_wl_client>,
              ffi.Pointer<struct_wl_interface>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>>('wl_client_new_object');
  late final _wl_client_new_object = _wl_client_new_objectPtr.asFunction<
      ffi.Pointer<struct_wl_resource> Function(
          ffi.Pointer<struct_wl_client>,
          ffi.Pointer<struct_wl_interface>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<struct_wl_global> wl_display_add_global(
    ffi.Pointer<struct_wl_display> display,
    ffi.Pointer<struct_wl_interface> interface1,
    ffi.Pointer<ffi.Void> data,
    wl_global_bind_func_t bind,
  ) {
    return _wl_display_add_global(
      display,
      interface1,
      data,
      bind,
    );
  }

  late final _wl_display_add_globalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<struct_wl_global> Function(
              ffi.Pointer<struct_wl_display>,
              ffi.Pointer<struct_wl_interface>,
              ffi.Pointer<ffi.Void>,
              wl_global_bind_func_t)>>('wl_display_add_global');
  late final _wl_display_add_global = _wl_display_add_globalPtr.asFunction<
      ffi.Pointer<struct_wl_global> Function(
          ffi.Pointer<struct_wl_display>,
          ffi.Pointer<struct_wl_interface>,
          ffi.Pointer<ffi.Void>,
          wl_global_bind_func_t)>();

  void wl_display_remove_global(
    ffi.Pointer<struct_wl_display> display,
    ffi.Pointer<struct_wl_global> global,
  ) {
    return _wl_display_remove_global(
      display,
      global,
    );
  }

  late final _wl_display_remove_globalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wl_display>,
              ffi.Pointer<struct_wl_global>)>>('wl_display_remove_global');
  late final _wl_display_remove_global =
      _wl_display_remove_globalPtr.asFunction<
          void Function(
              ffi.Pointer<struct_wl_display>, ffi.Pointer<struct_wl_global>)>();

  late final ffi.Pointer<struct_wl_interface> _wl_display_interface =
      _lookup<struct_wl_interface>('wl_display_interface');

  struct_wl_interface get wl_display_interface => _wl_display_interface.ref;

  late final ffi.Pointer<struct_wl_interface> _wl_registry_interface =
      _lookup<struct_wl_interface>('wl_registry_interface');

  struct_wl_interface get wl_registry_interface => _wl_registry_interface.ref;

  late final ffi.Pointer<struct_wl_interface> _wl_callback_interface =
      _lookup<struct_wl_interface>('wl_callback_interface');

  struct_wl_interface get wl_callback_interface => _wl_callback_interface.ref;

  late final ffi.Pointer<struct_wl_interface> _wl_compositor_interface =
      _lookup<struct_wl_interface>('wl_compositor_interface');

  struct_wl_interface get wl_compositor_interface =>
      _wl_compositor_interface.ref;

  late final ffi.Pointer<struct_wl_interface> _wl_shm_pool_interface =
      _lookup<struct_wl_interface>('wl_shm_pool_interface');

  struct_wl_interface get wl_shm_pool_interface => _wl_shm_pool_interface.ref;

  late final ffi.Pointer<struct_wl_interface> _wl_shm_interface =
      _lookup<struct_wl_interface>('wl_shm_interface');

  struct_wl_interface get wl_shm_interface => _wl_shm_interface.ref;

  late final ffi.Pointer<struct_wl_interface> _wl_buffer_interface =
      _lookup<struct_wl_interface>('wl_buffer_interface');

  struct_wl_interface get wl_buffer_interface => _wl_buffer_interface.ref;

  late final ffi.Pointer<struct_wl_interface> _wl_data_offer_interface =
      _lookup<struct_wl_interface>('wl_data_offer_interface');

  struct_wl_interface get wl_data_offer_interface =>
      _wl_data_offer_interface.ref;

  late final ffi.Pointer<struct_wl_interface> _wl_data_source_interface =
      _lookup<struct_wl_interface>('wl_data_source_interface');

  struct_wl_interface get wl_data_source_interface =>
      _wl_data_source_interface.ref;

  late final ffi.Pointer<struct_wl_interface> _wl_data_device_interface =
      _lookup<struct_wl_interface>('wl_data_device_interface');

  struct_wl_interface get wl_data_device_interface =>
      _wl_data_device_interface.ref;

  late final ffi.Pointer<struct_wl_interface>
      _wl_data_device_manager_interface =
      _lookup<struct_wl_interface>('wl_data_device_manager_interface');

  struct_wl_interface get wl_data_device_manager_interface =>
      _wl_data_device_manager_interface.ref;

  late final ffi.Pointer<struct_wl_interface> _wl_shell_interface =
      _lookup<struct_wl_interface>('wl_shell_interface');

  struct_wl_interface get wl_shell_interface => _wl_shell_interface.ref;

  late final ffi.Pointer<struct_wl_interface> _wl_shell_surface_interface =
      _lookup<struct_wl_interface>('wl_shell_surface_interface');

  struct_wl_interface get wl_shell_surface_interface =>
      _wl_shell_surface_interface.ref;

  late final ffi.Pointer<struct_wl_interface> _wl_surface_interface =
      _lookup<struct_wl_interface>('wl_surface_interface');

  struct_wl_interface get wl_surface_interface => _wl_surface_interface.ref;

  late final ffi.Pointer<struct_wl_interface> _wl_seat_interface =
      _lookup<struct_wl_interface>('wl_seat_interface');

  struct_wl_interface get wl_seat_interface => _wl_seat_interface.ref;

  late final ffi.Pointer<struct_wl_interface> _wl_pointer_interface =
      _lookup<struct_wl_interface>('wl_pointer_interface');

  struct_wl_interface get wl_pointer_interface => _wl_pointer_interface.ref;

  late final ffi.Pointer<struct_wl_interface> _wl_keyboard_interface =
      _lookup<struct_wl_interface>('wl_keyboard_interface');

  struct_wl_interface get wl_keyboard_interface => _wl_keyboard_interface.ref;

  late final ffi.Pointer<struct_wl_interface> _wl_touch_interface =
      _lookup<struct_wl_interface>('wl_touch_interface');

  struct_wl_interface get wl_touch_interface => _wl_touch_interface.ref;

  late final ffi.Pointer<struct_wl_interface> _wl_output_interface =
      _lookup<struct_wl_interface>('wl_output_interface');

  struct_wl_interface get wl_output_interface => _wl_output_interface.ref;

  late final ffi.Pointer<struct_wl_interface> _wl_region_interface =
      _lookup<struct_wl_interface>('wl_region_interface');

  struct_wl_interface get wl_region_interface => _wl_region_interface.ref;

  late final ffi.Pointer<struct_wl_interface> _wl_subcompositor_interface =
      _lookup<struct_wl_interface>('wl_subcompositor_interface');

  struct_wl_interface get wl_subcompositor_interface =>
      _wl_subcompositor_interface.ref;

  late final ffi.Pointer<struct_wl_interface> _wl_subsurface_interface =
      _lookup<struct_wl_interface>('wl_subsurface_interface');

  struct_wl_interface get wl_subsurface_interface =>
      _wl_subsurface_interface.ref;

  late final ffi.Pointer<ffi.Pointer<FILE>> _stdin =
      _lookup<ffi.Pointer<FILE>>('stdin');

  ffi.Pointer<FILE> get stdin => _stdin.value;

  set stdin(ffi.Pointer<FILE> value) => _stdin.value = value;

  late final ffi.Pointer<ffi.Pointer<FILE>> _stdout =
      _lookup<ffi.Pointer<FILE>>('stdout');

  ffi.Pointer<FILE> get stdout => _stdout.value;

  set stdout(ffi.Pointer<FILE> value) => _stdout.value = value;

  late final ffi.Pointer<ffi.Pointer<FILE>> _stderr =
      _lookup<ffi.Pointer<FILE>>('stderr');

  ffi.Pointer<FILE> get stderr => _stderr.value;

  set stderr(ffi.Pointer<FILE> value) => _stderr.value = value;

  int remove(
    ffi.Pointer<ffi.Char> __filename,
  ) {
    return _remove(
      __filename,
    );
  }

  late final _removePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'remove');
  late final _remove =
      _removePtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int rename(
    ffi.Pointer<ffi.Char> __old,
    ffi.Pointer<ffi.Char> __new,
  ) {
    return _rename(
      __old,
      __new,
    );
  }

  late final _renamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('rename');
  late final _rename = _renamePtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int renameat(
    int __oldfd,
    ffi.Pointer<ffi.Char> __old,
    int __newfd,
    ffi.Pointer<ffi.Char> __new,
  ) {
    return _renameat(
      __oldfd,
      __old,
      __newfd,
      __new,
    );
  }

  late final _renameatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('renameat');
  late final _renameat = _renameatPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  int fclose(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fclose(
      __stream,
    );
  }

  late final _fclosePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fclose');
  late final _fclose = _fclosePtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> tmpfile() {
    return _tmpfile();
  }

  late final _tmpfilePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<FILE> Function()>>('tmpfile');
  late final _tmpfile = _tmpfilePtr.asFunction<ffi.Pointer<FILE> Function()>();

  ffi.Pointer<ffi.Char> tmpnam(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _tmpnam(
      arg0,
    );
  }

  late final _tmpnamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('tmpnam');
  late final _tmpnam = _tmpnamPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> tmpnam_r(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _tmpnam_r(
      __s,
    );
  }

  late final _tmpnam_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('tmpnam_r');
  late final _tmpnam_r = _tmpnam_rPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> tempnam(
    ffi.Pointer<ffi.Char> __dir,
    ffi.Pointer<ffi.Char> __pfx,
  ) {
    return _tempnam(
      __dir,
      __pfx,
    );
  }

  late final _tempnamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('tempnam');
  late final _tempnam = _tempnamPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int fflush(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fflush(
      __stream,
    );
  }

  late final _fflushPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fflush');
  late final _fflush = _fflushPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fflush_unlocked(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fflush_unlocked(
      __stream,
    );
  }

  late final _fflush_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fflush_unlocked');
  late final _fflush_unlocked =
      _fflush_unlockedPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> fopen(
    ffi.Pointer<ffi.Char> __filename,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _fopen(
      __filename,
      __modes,
    );
  }

  late final _fopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('fopen');
  late final _fopen = _fopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> freopen(
    ffi.Pointer<ffi.Char> __filename,
    ffi.Pointer<ffi.Char> __modes,
    ffi.Pointer<FILE> __stream,
  ) {
    return _freopen(
      __filename,
      __modes,
      __stream,
    );
  }

  late final _freopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>>('freopen');
  late final _freopen = _freopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> fdopen(
    int __fd,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _fdopen(
      __fd,
      __modes,
    );
  }

  late final _fdopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Int, ffi.Pointer<ffi.Char>)>>('fdopen');
  late final _fdopen = _fdopenPtr
      .asFunction<ffi.Pointer<FILE> Function(int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> fmemopen(
    ffi.Pointer<ffi.Void> __s,
    int __len,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _fmemopen(
      __s,
      __len,
      __modes,
    );
  }

  late final _fmemopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Void>, ffi.Size,
              ffi.Pointer<ffi.Char>)>>('fmemopen');
  late final _fmemopen = _fmemopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> open_memstream(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __bufloc,
    ffi.Pointer<ffi.Size> __sizeloc,
  ) {
    return _open_memstream(
      __bufloc,
      __sizeloc,
    );
  }

  late final _open_memstreamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Size>)>>('open_memstream');
  late final _open_memstream = _open_memstreamPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Size>)>();

  void setbuf(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __buf,
  ) {
    return _setbuf(
      __stream,
      __buf,
    );
  }

  late final _setbufPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('setbuf');
  late final _setbuf = _setbufPtr
      .asFunction<void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int setvbuf(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __buf,
    int __modes,
    int __n,
  ) {
    return _setvbuf(
      __stream,
      __buf,
      __modes,
      __n,
    );
  }

  late final _setvbufPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Size)>>('setvbuf');
  late final _setvbuf = _setvbufPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int, int)>();

  void setbuffer(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __buf,
    int __size,
  ) {
    return _setbuffer(
      __stream,
      __buf,
      __size,
    );
  }

  late final _setbufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('setbuffer');
  late final _setbuffer = _setbufferPtr.asFunction<
      void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  void setlinebuf(
    ffi.Pointer<FILE> __stream,
  ) {
    return _setlinebuf(
      __stream,
    );
  }

  late final _setlinebufPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'setlinebuf');
  late final _setlinebuf =
      _setlinebufPtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int fprintf(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _fprintf(
      __stream,
      __format,
    );
  }

  late final _fprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fprintf');
  late final _fprintf = _fprintfPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int printf(
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _printf(
      __format,
    );
  }

  late final _printfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'printf');
  late final _printf =
      _printfPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int sprintf(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _sprintf(
      __s,
      __format,
    );
  }

  late final _sprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sprintf');
  late final _sprintf = _sprintfPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int vfprintf(
    ffi.Pointer<FILE> __s,
    ffi.Pointer<ffi.Char> __format,
    ffi.Pointer<struct___va_list_tag> __arg,
  ) {
    return _vfprintf(
      __s,
      __format,
      __arg,
    );
  }

  late final _vfprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<struct___va_list_tag>)>>('vfprintf');
  late final _vfprintf = _vfprintfPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<struct___va_list_tag>)>();

  int vprintf(
    ffi.Pointer<ffi.Char> __format,
    ffi.Pointer<struct___va_list_tag> __arg,
  ) {
    return _vprintf(
      __format,
      __arg,
    );
  }

  late final _vprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<struct___va_list_tag>)>>('vprintf');
  late final _vprintf = _vprintfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<struct___va_list_tag>)>();

  int vsprintf(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
    ffi.Pointer<struct___va_list_tag> __arg,
  ) {
    return _vsprintf(
      __s,
      __format,
      __arg,
    );
  }

  late final _vsprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<struct___va_list_tag>)>>('vsprintf');
  late final _vsprintf = _vsprintfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<struct___va_list_tag>)>();

  int snprintf(
    ffi.Pointer<ffi.Char> __s,
    int __maxlen,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _snprintf(
      __s,
      __maxlen,
      __format,
    );
  }

  late final _snprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size,
              ffi.Pointer<ffi.Char>)>>('snprintf');
  late final _snprintf = _snprintfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  int vsnprintf(
    ffi.Pointer<ffi.Char> __s,
    int __maxlen,
    ffi.Pointer<ffi.Char> __format,
    ffi.Pointer<struct___va_list_tag> __arg,
  ) {
    return _vsnprintf(
      __s,
      __maxlen,
      __format,
      __arg,
    );
  }

  late final _vsnprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<struct___va_list_tag>)>>('vsnprintf');
  late final _vsnprintf = _vsnprintfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>,
          ffi.Pointer<struct___va_list_tag>)>();

  int vdprintf(
    int __fd,
    ffi.Pointer<ffi.Char> __fmt,
    ffi.Pointer<struct___va_list_tag> __arg,
  ) {
    return _vdprintf(
      __fd,
      __fmt,
      __arg,
    );
  }

  late final _vdprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>,
              ffi.Pointer<struct___va_list_tag>)>>('vdprintf');
  late final _vdprintf = _vdprintfPtr.asFunction<
      int Function(
          int, ffi.Pointer<ffi.Char>, ffi.Pointer<struct___va_list_tag>)>();

  int dprintf(
    int __fd,
    ffi.Pointer<ffi.Char> __fmt,
  ) {
    return _dprintf(
      __fd,
      __fmt,
    );
  }

  late final _dprintfPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>)>>(
      'dprintf');
  late final _dprintf =
      _dprintfPtr.asFunction<int Function(int, ffi.Pointer<ffi.Char>)>();

  int fscanf(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _fscanf(
      __stream,
      __format,
    );
  }

  late final _fscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fscanf');
  late final _fscanf = _fscanfPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int scanf(
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _scanf(
      __format,
    );
  }

  late final _scanfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'scanf');
  late final _scanf =
      _scanfPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int sscanf(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _sscanf(
      __s,
      __format,
    );
  }

  late final _sscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sscanf');
  late final _sscanf = _sscanfPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int vfscanf(
    ffi.Pointer<FILE> __s,
    ffi.Pointer<ffi.Char> __format,
    ffi.Pointer<struct___va_list_tag> __arg,
  ) {
    return _vfscanf(
      __s,
      __format,
      __arg,
    );
  }

  late final _vfscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<struct___va_list_tag>)>>('vfscanf');
  late final _vfscanf = _vfscanfPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<struct___va_list_tag>)>();

  int vscanf(
    ffi.Pointer<ffi.Char> __format,
    ffi.Pointer<struct___va_list_tag> __arg,
  ) {
    return _vscanf(
      __format,
      __arg,
    );
  }

  late final _vscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<struct___va_list_tag>)>>('vscanf');
  late final _vscanf = _vscanfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<struct___va_list_tag>)>();

  int vsscanf(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
    ffi.Pointer<struct___va_list_tag> __arg,
  ) {
    return _vsscanf(
      __s,
      __format,
      __arg,
    );
  }

  late final _vsscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<struct___va_list_tag>)>>('vsscanf');
  late final _vsscanf = _vsscanfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<struct___va_list_tag>)>();

  int fgetc(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fgetc(
      __stream,
    );
  }

  late final _fgetcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('fgetc');
  late final _fgetc = _fgetcPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getc(
    ffi.Pointer<FILE> __stream,
  ) {
    return _getc(
      __stream,
    );
  }

  late final _getcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('getc');
  late final _getc = _getcPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getchar() {
    return _getchar();
  }

  late final _getcharPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('getchar');
  late final _getchar = _getcharPtr.asFunction<int Function()>();

  int getc_unlocked(
    ffi.Pointer<FILE> __stream,
  ) {
    return _getc_unlocked(
      __stream,
    );
  }

  late final _getc_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'getc_unlocked');
  late final _getc_unlocked =
      _getc_unlockedPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getchar_unlocked() {
    return _getchar_unlocked();
  }

  late final _getchar_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('getchar_unlocked');
  late final _getchar_unlocked =
      _getchar_unlockedPtr.asFunction<int Function()>();

  int fgetc_unlocked(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fgetc_unlocked(
      __stream,
    );
  }

  late final _fgetc_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fgetc_unlocked');
  late final _fgetc_unlocked =
      _fgetc_unlockedPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fputc(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fputc(
      __c,
      __stream,
    );
  }

  late final _fputcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'fputc');
  late final _fputc =
      _fputcPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putc(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _putc(
      __c,
      __stream,
    );
  }

  late final _putcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putc');
  late final _putc =
      _putcPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putchar(
    int __c,
  ) {
    return _putchar(
      __c,
    );
  }

  late final _putcharPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('putchar');
  late final _putchar = _putcharPtr.asFunction<int Function(int)>();

  int fputc_unlocked(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fputc_unlocked(
      __c,
      __stream,
    );
  }

  late final _fputc_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'fputc_unlocked');
  late final _fputc_unlocked =
      _fputc_unlockedPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putc_unlocked(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _putc_unlocked(
      __c,
      __stream,
    );
  }

  late final _putc_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putc_unlocked');
  late final _putc_unlocked =
      _putc_unlockedPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putchar_unlocked(
    int __c,
  ) {
    return _putchar_unlocked(
      __c,
    );
  }

  late final _putchar_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'putchar_unlocked');
  late final _putchar_unlocked =
      _putchar_unlockedPtr.asFunction<int Function(int)>();

  int getw(
    ffi.Pointer<FILE> __stream,
  ) {
    return _getw(
      __stream,
    );
  }

  late final _getwPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('getw');
  late final _getw = _getwPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int putw(
    int __w,
    ffi.Pointer<FILE> __stream,
  ) {
    return _putw(
      __w,
      __stream,
    );
  }

  late final _putwPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putw');
  late final _putw =
      _putwPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  ffi.Pointer<ffi.Char> fgets(
    ffi.Pointer<ffi.Char> __s,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fgets(
      __s,
      __n,
      __stream,
    );
  }

  late final _fgetsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int, ffi.Pointer<FILE>)>>('fgets');
  late final _fgets = _fgetsPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<FILE>)>();

  int __getdelim(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __lineptr,
    ffi.Pointer<ffi.Size> __n,
    int __delimiter,
    ffi.Pointer<FILE> __stream,
  ) {
    return ___getdelim(
      __lineptr,
      __n,
      __delimiter,
      __stream,
    );
  }

  late final ___getdelimPtr = _lookup<
      ffi.NativeFunction<
          __ssize_t Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Size>,
              ffi.Int,
              ffi.Pointer<FILE>)>>('__getdelim');
  late final ___getdelim = ___getdelimPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Size>,
          int, ffi.Pointer<FILE>)>();

  int getdelim(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __lineptr,
    ffi.Pointer<ffi.Size> __n,
    int __delimiter,
    ffi.Pointer<FILE> __stream,
  ) {
    return _getdelim(
      __lineptr,
      __n,
      __delimiter,
      __stream,
    );
  }

  late final _getdelimPtr = _lookup<
      ffi.NativeFunction<
          __ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Size>, ffi.Int, ffi.Pointer<FILE>)>>('getdelim');
  late final _getdelim = _getdelimPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Size>,
          int, ffi.Pointer<FILE>)>();

  int getline(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __lineptr,
    ffi.Pointer<ffi.Size> __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _getline(
      __lineptr,
      __n,
      __stream,
    );
  }

  late final _getlinePtr = _lookup<
      ffi.NativeFunction<
          __ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Size>, ffi.Pointer<FILE>)>>('getline');
  late final _getline = _getlinePtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Size>,
          ffi.Pointer<FILE>)>();

  int fputs(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fputs(
      __s,
      __stream,
    );
  }

  late final _fputsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>>('fputs');
  late final _fputs = _fputsPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>();

  int puts(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _puts(
      __s,
    );
  }

  late final _putsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'puts');
  late final _puts = _putsPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int ungetc(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _ungetc(
      __c,
      __stream,
    );
  }

  late final _ungetcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'ungetc');
  late final _ungetc =
      _ungetcPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int fread(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fread(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _freadPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size,
              ffi.Pointer<FILE>)>>('fread');
  late final _fread = _freadPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fwrite(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __s,
  ) {
    return _fwrite(
      __ptr,
      __size,
      __n,
      __s,
    );
  }

  late final _fwritePtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size,
              ffi.Pointer<FILE>)>>('fwrite');
  late final _fwrite = _fwritePtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fread_unlocked(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fread_unlocked(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _fread_unlockedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size,
              ffi.Pointer<FILE>)>>('fread_unlocked');
  late final _fread_unlocked = _fread_unlockedPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fwrite_unlocked(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fwrite_unlocked(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _fwrite_unlockedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size,
              ffi.Pointer<FILE>)>>('fwrite_unlocked');
  late final _fwrite_unlocked = _fwrite_unlockedPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fseek(
    ffi.Pointer<FILE> __stream,
    int __off,
    int __whence,
  ) {
    return _fseek(
      __stream,
      __off,
      __whence,
    );
  }

  late final _fseekPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Long, ffi.Int)>>('fseek');
  late final _fseek =
      _fseekPtr.asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int ftell(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftell(
      __stream,
    );
  }

  late final _ftellPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<FILE>)>>(
          'ftell');
  late final _ftell = _ftellPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void rewind(
    ffi.Pointer<FILE> __stream,
  ) {
    return _rewind(
      __stream,
    );
  }

  late final _rewindPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'rewind');
  late final _rewind =
      _rewindPtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int fseeko(
    ffi.Pointer<FILE> __stream,
    int __off,
    int __whence,
  ) {
    return _fseeko(
      __stream,
      __off,
      __whence,
    );
  }

  late final _fseekoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, __off_t, ffi.Int)>>('fseeko');
  late final _fseeko =
      _fseekoPtr.asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int ftello(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftello(
      __stream,
    );
  }

  late final _ftelloPtr =
      _lookup<ffi.NativeFunction<__off_t Function(ffi.Pointer<FILE>)>>(
          'ftello');
  late final _ftello = _ftelloPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fgetpos(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<fpos_t> __pos,
  ) {
    return _fgetpos(
      __stream,
      __pos,
    );
  }

  late final _fgetposPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>>('fgetpos');
  late final _fgetpos = _fgetposPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>();

  int fsetpos(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<fpos_t> __pos,
  ) {
    return _fsetpos(
      __stream,
      __pos,
    );
  }

  late final _fsetposPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>>('fsetpos');
  late final _fsetpos = _fsetposPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>();

  void clearerr(
    ffi.Pointer<FILE> __stream,
  ) {
    return _clearerr(
      __stream,
    );
  }

  late final _clearerrPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'clearerr');
  late final _clearerr =
      _clearerrPtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int feof(
    ffi.Pointer<FILE> __stream,
  ) {
    return _feof(
      __stream,
    );
  }

  late final _feofPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('feof');
  late final _feof = _feofPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int ferror(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ferror(
      __stream,
    );
  }

  late final _ferrorPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ferror');
  late final _ferror = _ferrorPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void clearerr_unlocked(
    ffi.Pointer<FILE> __stream,
  ) {
    return _clearerr_unlocked(
      __stream,
    );
  }

  late final _clearerr_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'clearerr_unlocked');
  late final _clearerr_unlocked =
      _clearerr_unlockedPtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int feof_unlocked(
    ffi.Pointer<FILE> __stream,
  ) {
    return _feof_unlocked(
      __stream,
    );
  }

  late final _feof_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'feof_unlocked');
  late final _feof_unlocked =
      _feof_unlockedPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int ferror_unlocked(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ferror_unlocked(
      __stream,
    );
  }

  late final _ferror_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ferror_unlocked');
  late final _ferror_unlocked =
      _ferror_unlockedPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void perror(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _perror(
      __s,
    );
  }

  late final _perrorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'perror');
  late final _perror =
      _perrorPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  int fileno(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fileno(
      __stream,
    );
  }

  late final _filenoPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fileno');
  late final _fileno = _filenoPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fileno_unlocked(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fileno_unlocked(
      __stream,
    );
  }

  late final _fileno_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fileno_unlocked');
  late final _fileno_unlocked =
      _fileno_unlockedPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int pclose(
    ffi.Pointer<FILE> __stream,
  ) {
    return _pclose(
      __stream,
    );
  }

  late final _pclosePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'pclose');
  late final _pclose = _pclosePtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> popen(
    ffi.Pointer<ffi.Char> __command,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _popen(
      __command,
      __modes,
    );
  }

  late final _popenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('popen');
  late final _popen = _popenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> ctermid(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _ctermid(
      __s,
    );
  }

  late final _ctermidPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('ctermid');
  late final _ctermid = _ctermidPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  void flockfile(
    ffi.Pointer<FILE> __stream,
  ) {
    return _flockfile(
      __stream,
    );
  }

  late final _flockfilePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'flockfile');
  late final _flockfile =
      _flockfilePtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int ftrylockfile(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftrylockfile(
      __stream,
    );
  }

  late final _ftrylockfilePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ftrylockfile');
  late final _ftrylockfile =
      _ftrylockfilePtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void funlockfile(
    ffi.Pointer<FILE> __stream,
  ) {
    return _funlockfile(
      __stream,
    );
  }

  late final _funlockfilePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'funlockfile');
  late final _funlockfile =
      _funlockfilePtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int __uflow(
    ffi.Pointer<FILE> arg0,
  ) {
    return ___uflow(
      arg0,
    );
  }

  late final ___uflowPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          '__uflow');
  late final ___uflow =
      ___uflowPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int __overflow(
    ffi.Pointer<FILE> arg0,
    int arg1,
  ) {
    return ___overflow(
      arg0,
      arg1,
    );
  }

  late final ___overflowPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>, ffi.Int)>>(
          '__overflow');
  late final ___overflow =
      ___overflowPtr.asFunction<int Function(ffi.Pointer<FILE>, int)>();

  int xkb_keysym_get_name(
    int keysym,
    ffi.Pointer<ffi.Char> buffer,
    int size,
  ) {
    return _xkb_keysym_get_name(
      keysym,
      buffer,
      size,
    );
  }

  late final _xkb_keysym_get_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(xkb_keysym_t, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('xkb_keysym_get_name');
  late final _xkb_keysym_get_name = _xkb_keysym_get_namePtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  int xkb_keysym_from_name(
    ffi.Pointer<ffi.Char> name,
    int flags,
  ) {
    return _xkb_keysym_from_name(
      name,
      flags,
    );
  }

  late final _xkb_keysym_from_namePtr = _lookup<
      ffi.NativeFunction<
          xkb_keysym_t Function(
              ffi.Pointer<ffi.Char>, ffi.Int32)>>('xkb_keysym_from_name');
  late final _xkb_keysym_from_name = _xkb_keysym_from_namePtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int xkb_keysym_to_utf8(
    int keysym,
    ffi.Pointer<ffi.Char> buffer,
    int size,
  ) {
    return _xkb_keysym_to_utf8(
      keysym,
      buffer,
      size,
    );
  }

  late final _xkb_keysym_to_utf8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(xkb_keysym_t, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('xkb_keysym_to_utf8');
  late final _xkb_keysym_to_utf8 = _xkb_keysym_to_utf8Ptr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  int xkb_keysym_to_utf32(
    int keysym,
  ) {
    return _xkb_keysym_to_utf32(
      keysym,
    );
  }

  late final _xkb_keysym_to_utf32Ptr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(xkb_keysym_t)>>(
          'xkb_keysym_to_utf32');
  late final _xkb_keysym_to_utf32 =
      _xkb_keysym_to_utf32Ptr.asFunction<int Function(int)>();

  int xkb_utf32_to_keysym(
    int ucs,
  ) {
    return _xkb_utf32_to_keysym(
      ucs,
    );
  }

  late final _xkb_utf32_to_keysymPtr =
      _lookup<ffi.NativeFunction<xkb_keysym_t Function(ffi.Uint32)>>(
          'xkb_utf32_to_keysym');
  late final _xkb_utf32_to_keysym =
      _xkb_utf32_to_keysymPtr.asFunction<int Function(int)>();

  int xkb_keysym_to_upper(
    int ks,
  ) {
    return _xkb_keysym_to_upper(
      ks,
    );
  }

  late final _xkb_keysym_to_upperPtr =
      _lookup<ffi.NativeFunction<xkb_keysym_t Function(xkb_keysym_t)>>(
          'xkb_keysym_to_upper');
  late final _xkb_keysym_to_upper =
      _xkb_keysym_to_upperPtr.asFunction<int Function(int)>();

  int xkb_keysym_to_lower(
    int ks,
  ) {
    return _xkb_keysym_to_lower(
      ks,
    );
  }

  late final _xkb_keysym_to_lowerPtr =
      _lookup<ffi.NativeFunction<xkb_keysym_t Function(xkb_keysym_t)>>(
          'xkb_keysym_to_lower');
  late final _xkb_keysym_to_lower =
      _xkb_keysym_to_lowerPtr.asFunction<int Function(int)>();

  ffi.Pointer<struct_xkb_context> xkb_context_new(
    int flags,
  ) {
    return _xkb_context_new(
      flags,
    );
  }

  late final _xkb_context_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<struct_xkb_context> Function(
              ffi.Int32)>>('xkb_context_new');
  late final _xkb_context_new = _xkb_context_newPtr
      .asFunction<ffi.Pointer<struct_xkb_context> Function(int)>();

  ffi.Pointer<struct_xkb_context> xkb_context_ref(
    ffi.Pointer<struct_xkb_context> context,
  ) {
    return _xkb_context_ref(
      context,
    );
  }

  late final _xkb_context_refPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<struct_xkb_context> Function(
              ffi.Pointer<struct_xkb_context>)>>('xkb_context_ref');
  late final _xkb_context_ref = _xkb_context_refPtr.asFunction<
      ffi.Pointer<struct_xkb_context> Function(
          ffi.Pointer<struct_xkb_context>)>();

  void xkb_context_unref(
    ffi.Pointer<struct_xkb_context> context,
  ) {
    return _xkb_context_unref(
      context,
    );
  }

  late final _xkb_context_unrefPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_xkb_context>)>>('xkb_context_unref');
  late final _xkb_context_unref = _xkb_context_unrefPtr
      .asFunction<void Function(ffi.Pointer<struct_xkb_context>)>();

  void xkb_context_set_user_data(
    ffi.Pointer<struct_xkb_context> context,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _xkb_context_set_user_data(
      context,
      user_data,
    );
  }

  late final _xkb_context_set_user_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_xkb_context>,
              ffi.Pointer<ffi.Void>)>>('xkb_context_set_user_data');
  late final _xkb_context_set_user_data =
      _xkb_context_set_user_dataPtr.asFunction<
          void Function(
              ffi.Pointer<struct_xkb_context>, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> xkb_context_get_user_data(
    ffi.Pointer<struct_xkb_context> context,
  ) {
    return _xkb_context_get_user_data(
      context,
    );
  }

  late final _xkb_context_get_user_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<struct_xkb_context>)>>('xkb_context_get_user_data');
  late final _xkb_context_get_user_data =
      _xkb_context_get_user_dataPtr.asFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<struct_xkb_context>)>();

  int xkb_context_include_path_append(
    ffi.Pointer<struct_xkb_context> context,
    ffi.Pointer<ffi.Char> path,
  ) {
    return _xkb_context_include_path_append(
      context,
      path,
    );
  }

  late final _xkb_context_include_path_appendPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<struct_xkb_context>,
              ffi.Pointer<ffi.Char>)>>('xkb_context_include_path_append');
  late final _xkb_context_include_path_append =
      _xkb_context_include_path_appendPtr.asFunction<
          int Function(
              ffi.Pointer<struct_xkb_context>, ffi.Pointer<ffi.Char>)>();

  int xkb_context_include_path_append_default(
    ffi.Pointer<struct_xkb_context> context,
  ) {
    return _xkb_context_include_path_append_default(
      context,
    );
  }

  late final _xkb_context_include_path_append_defaultPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<struct_xkb_context>)>>(
      'xkb_context_include_path_append_default');
  late final _xkb_context_include_path_append_default =
      _xkb_context_include_path_append_defaultPtr
          .asFunction<int Function(ffi.Pointer<struct_xkb_context>)>();

  int xkb_context_include_path_reset_defaults(
    ffi.Pointer<struct_xkb_context> context,
  ) {
    return _xkb_context_include_path_reset_defaults(
      context,
    );
  }

  late final _xkb_context_include_path_reset_defaultsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<struct_xkb_context>)>>(
      'xkb_context_include_path_reset_defaults');
  late final _xkb_context_include_path_reset_defaults =
      _xkb_context_include_path_reset_defaultsPtr
          .asFunction<int Function(ffi.Pointer<struct_xkb_context>)>();

  void xkb_context_include_path_clear(
    ffi.Pointer<struct_xkb_context> context,
  ) {
    return _xkb_context_include_path_clear(
      context,
    );
  }

  late final _xkb_context_include_path_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<struct_xkb_context>)>>(
      'xkb_context_include_path_clear');
  late final _xkb_context_include_path_clear =
      _xkb_context_include_path_clearPtr
          .asFunction<void Function(ffi.Pointer<struct_xkb_context>)>();

  int xkb_context_num_include_paths(
    ffi.Pointer<struct_xkb_context> context,
  ) {
    return _xkb_context_num_include_paths(
      context,
    );
  }

  late final _xkb_context_num_include_pathsPtr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedInt Function(ffi.Pointer<struct_xkb_context>)>>(
      'xkb_context_num_include_paths');
  late final _xkb_context_num_include_paths = _xkb_context_num_include_pathsPtr
      .asFunction<int Function(ffi.Pointer<struct_xkb_context>)>();

  ffi.Pointer<ffi.Char> xkb_context_include_path_get(
    ffi.Pointer<struct_xkb_context> context,
    int index,
  ) {
    return _xkb_context_include_path_get(
      context,
      index,
    );
  }

  late final _xkb_context_include_path_getPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<struct_xkb_context>,
              ffi.UnsignedInt)>>('xkb_context_include_path_get');
  late final _xkb_context_include_path_get =
      _xkb_context_include_path_getPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<struct_xkb_context>, int)>();

  void xkb_context_set_log_level(
    ffi.Pointer<struct_xkb_context> context,
    int level,
  ) {
    return _xkb_context_set_log_level(
      context,
      level,
    );
  }

  late final _xkb_context_set_log_levelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_xkb_context>,
              ffi.Int32)>>('xkb_context_set_log_level');
  late final _xkb_context_set_log_level = _xkb_context_set_log_levelPtr
      .asFunction<void Function(ffi.Pointer<struct_xkb_context>, int)>();

  int xkb_context_get_log_level(
    ffi.Pointer<struct_xkb_context> context,
  ) {
    return _xkb_context_get_log_level(
      context,
    );
  }

  late final _xkb_context_get_log_levelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<struct_xkb_context>)>>('xkb_context_get_log_level');
  late final _xkb_context_get_log_level = _xkb_context_get_log_levelPtr
      .asFunction<int Function(ffi.Pointer<struct_xkb_context>)>();

  void xkb_context_set_log_verbosity(
    ffi.Pointer<struct_xkb_context> context,
    int verbosity,
  ) {
    return _xkb_context_set_log_verbosity(
      context,
      verbosity,
    );
  }

  late final _xkb_context_set_log_verbosityPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_xkb_context>,
              ffi.Int)>>('xkb_context_set_log_verbosity');
  late final _xkb_context_set_log_verbosity = _xkb_context_set_log_verbosityPtr
      .asFunction<void Function(ffi.Pointer<struct_xkb_context>, int)>();

  int xkb_context_get_log_verbosity(
    ffi.Pointer<struct_xkb_context> context,
  ) {
    return _xkb_context_get_log_verbosity(
      context,
    );
  }

  late final _xkb_context_get_log_verbosityPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<struct_xkb_context>)>>(
      'xkb_context_get_log_verbosity');
  late final _xkb_context_get_log_verbosity = _xkb_context_get_log_verbosityPtr
      .asFunction<int Function(ffi.Pointer<struct_xkb_context>)>();

  void xkb_context_set_log_fn(
    ffi.Pointer<struct_xkb_context> context,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<struct_xkb_context>, ffi.Int32,
                    ffi.Pointer<ffi.Char>, ffi.Pointer<struct___va_list_tag>)>>
        log_fn,
  ) {
    return _xkb_context_set_log_fn(
      context,
      log_fn,
    );
  }

  late final _xkb_context_set_log_fnPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<struct_xkb_context>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Void Function(
                              ffi.Pointer<struct_xkb_context>,
                              ffi.Int32,
                              ffi.Pointer<ffi.Char>,
                              ffi.Pointer<struct___va_list_tag>)>>)>>(
      'xkb_context_set_log_fn');
  late final _xkb_context_set_log_fn = _xkb_context_set_log_fnPtr.asFunction<
      void Function(
          ffi.Pointer<struct_xkb_context>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<struct_xkb_context>,
                      ffi.Int32,
                      ffi.Pointer<ffi.Char>,
                      ffi.Pointer<struct___va_list_tag>)>>)>();

  ffi.Pointer<struct_xkb_keymap> xkb_keymap_new_from_names(
    ffi.Pointer<struct_xkb_context> context,
    ffi.Pointer<struct_xkb_rule_names> names,
    int flags,
  ) {
    return _xkb_keymap_new_from_names(
      context,
      names,
      flags,
    );
  }

  late final _xkb_keymap_new_from_namesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<struct_xkb_keymap> Function(
              ffi.Pointer<struct_xkb_context>,
              ffi.Pointer<struct_xkb_rule_names>,
              ffi.Int32)>>('xkb_keymap_new_from_names');
  late final _xkb_keymap_new_from_names =
      _xkb_keymap_new_from_namesPtr.asFunction<
          ffi.Pointer<struct_xkb_keymap> Function(
              ffi.Pointer<struct_xkb_context>,
              ffi.Pointer<struct_xkb_rule_names>,
              int)>();

  ffi.Pointer<struct_xkb_keymap> xkb_keymap_new_from_file(
    ffi.Pointer<struct_xkb_context> context,
    ffi.Pointer<FILE> file,
    int format,
    int flags,
  ) {
    return _xkb_keymap_new_from_file(
      context,
      file,
      format,
      flags,
    );
  }

  late final _xkb_keymap_new_from_filePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<struct_xkb_keymap> Function(
              ffi.Pointer<struct_xkb_context>,
              ffi.Pointer<FILE>,
              ffi.Int32,
              ffi.Int32)>>('xkb_keymap_new_from_file');
  late final _xkb_keymap_new_from_file =
      _xkb_keymap_new_from_filePtr.asFunction<
          ffi.Pointer<struct_xkb_keymap> Function(
              ffi.Pointer<struct_xkb_context>, ffi.Pointer<FILE>, int, int)>();

  ffi.Pointer<struct_xkb_keymap> xkb_keymap_new_from_string(
    ffi.Pointer<struct_xkb_context> context,
    ffi.Pointer<ffi.Char> string,
    int format,
    int flags,
  ) {
    return _xkb_keymap_new_from_string(
      context,
      string,
      format,
      flags,
    );
  }

  late final _xkb_keymap_new_from_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<struct_xkb_keymap> Function(
              ffi.Pointer<struct_xkb_context>,
              ffi.Pointer<ffi.Char>,
              ffi.Int32,
              ffi.Int32)>>('xkb_keymap_new_from_string');
  late final _xkb_keymap_new_from_string =
      _xkb_keymap_new_from_stringPtr.asFunction<
          ffi.Pointer<struct_xkb_keymap> Function(
              ffi.Pointer<struct_xkb_context>,
              ffi.Pointer<ffi.Char>,
              int,
              int)>();

  ffi.Pointer<struct_xkb_keymap> xkb_keymap_new_from_buffer(
    ffi.Pointer<struct_xkb_context> context,
    ffi.Pointer<ffi.Char> buffer,
    int length,
    int format,
    int flags,
  ) {
    return _xkb_keymap_new_from_buffer(
      context,
      buffer,
      length,
      format,
      flags,
    );
  }

  late final _xkb_keymap_new_from_bufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<struct_xkb_keymap> Function(
              ffi.Pointer<struct_xkb_context>,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Int32,
              ffi.Int32)>>('xkb_keymap_new_from_buffer');
  late final _xkb_keymap_new_from_buffer =
      _xkb_keymap_new_from_bufferPtr.asFunction<
          ffi.Pointer<struct_xkb_keymap> Function(
              ffi.Pointer<struct_xkb_context>,
              ffi.Pointer<ffi.Char>,
              int,
              int,
              int)>();

  ffi.Pointer<struct_xkb_keymap> xkb_keymap_ref(
    ffi.Pointer<struct_xkb_keymap> keymap,
  ) {
    return _xkb_keymap_ref(
      keymap,
    );
  }

  late final _xkb_keymap_refPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<struct_xkb_keymap> Function(
              ffi.Pointer<struct_xkb_keymap>)>>('xkb_keymap_ref');
  late final _xkb_keymap_ref = _xkb_keymap_refPtr.asFunction<
      ffi.Pointer<struct_xkb_keymap> Function(
          ffi.Pointer<struct_xkb_keymap>)>();

  void xkb_keymap_unref(
    ffi.Pointer<struct_xkb_keymap> keymap,
  ) {
    return _xkb_keymap_unref(
      keymap,
    );
  }

  late final _xkb_keymap_unrefPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_xkb_keymap>)>>('xkb_keymap_unref');
  late final _xkb_keymap_unref = _xkb_keymap_unrefPtr
      .asFunction<void Function(ffi.Pointer<struct_xkb_keymap>)>();

  ffi.Pointer<ffi.Char> xkb_keymap_get_as_string(
    ffi.Pointer<struct_xkb_keymap> keymap,
    int format,
  ) {
    return _xkb_keymap_get_as_string(
      keymap,
      format,
    );
  }

  late final _xkb_keymap_get_as_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<struct_xkb_keymap>,
              ffi.Int32)>>('xkb_keymap_get_as_string');
  late final _xkb_keymap_get_as_string =
      _xkb_keymap_get_as_stringPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<struct_xkb_keymap>, int)>();

  int xkb_keymap_min_keycode(
    ffi.Pointer<struct_xkb_keymap> keymap,
  ) {
    return _xkb_keymap_min_keycode(
      keymap,
    );
  }

  late final _xkb_keymap_min_keycodePtr = _lookup<
      ffi.NativeFunction<
          xkb_keycode_t Function(
              ffi.Pointer<struct_xkb_keymap>)>>('xkb_keymap_min_keycode');
  late final _xkb_keymap_min_keycode = _xkb_keymap_min_keycodePtr
      .asFunction<int Function(ffi.Pointer<struct_xkb_keymap>)>();

  int xkb_keymap_max_keycode(
    ffi.Pointer<struct_xkb_keymap> keymap,
  ) {
    return _xkb_keymap_max_keycode(
      keymap,
    );
  }

  late final _xkb_keymap_max_keycodePtr = _lookup<
      ffi.NativeFunction<
          xkb_keycode_t Function(
              ffi.Pointer<struct_xkb_keymap>)>>('xkb_keymap_max_keycode');
  late final _xkb_keymap_max_keycode = _xkb_keymap_max_keycodePtr
      .asFunction<int Function(ffi.Pointer<struct_xkb_keymap>)>();

  void xkb_keymap_key_for_each(
    ffi.Pointer<struct_xkb_keymap> keymap,
    xkb_keymap_key_iter_t iter,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _xkb_keymap_key_for_each(
      keymap,
      iter,
      data,
    );
  }

  late final _xkb_keymap_key_for_eachPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_xkb_keymap>,
              xkb_keymap_key_iter_t,
              ffi.Pointer<ffi.Void>)>>('xkb_keymap_key_for_each');
  late final _xkb_keymap_key_for_each = _xkb_keymap_key_for_eachPtr.asFunction<
      void Function(ffi.Pointer<struct_xkb_keymap>, xkb_keymap_key_iter_t,
          ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Char> xkb_keymap_key_get_name(
    ffi.Pointer<struct_xkb_keymap> keymap,
    int key,
  ) {
    return _xkb_keymap_key_get_name(
      keymap,
      key,
    );
  }

  late final _xkb_keymap_key_get_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<struct_xkb_keymap>,
              xkb_keycode_t)>>('xkb_keymap_key_get_name');
  late final _xkb_keymap_key_get_name = _xkb_keymap_key_get_namePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<struct_xkb_keymap>, int)>();

  int xkb_keymap_key_by_name(
    ffi.Pointer<struct_xkb_keymap> keymap,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _xkb_keymap_key_by_name(
      keymap,
      name,
    );
  }

  late final _xkb_keymap_key_by_namePtr = _lookup<
      ffi.NativeFunction<
          xkb_keycode_t Function(ffi.Pointer<struct_xkb_keymap>,
              ffi.Pointer<ffi.Char>)>>('xkb_keymap_key_by_name');
  late final _xkb_keymap_key_by_name = _xkb_keymap_key_by_namePtr.asFunction<
      int Function(ffi.Pointer<struct_xkb_keymap>, ffi.Pointer<ffi.Char>)>();

  int xkb_keymap_num_mods(
    ffi.Pointer<struct_xkb_keymap> keymap,
  ) {
    return _xkb_keymap_num_mods(
      keymap,
    );
  }

  late final _xkb_keymap_num_modsPtr = _lookup<
      ffi.NativeFunction<
          xkb_mod_index_t Function(
              ffi.Pointer<struct_xkb_keymap>)>>('xkb_keymap_num_mods');
  late final _xkb_keymap_num_mods = _xkb_keymap_num_modsPtr
      .asFunction<int Function(ffi.Pointer<struct_xkb_keymap>)>();

  ffi.Pointer<ffi.Char> xkb_keymap_mod_get_name(
    ffi.Pointer<struct_xkb_keymap> keymap,
    int idx,
  ) {
    return _xkb_keymap_mod_get_name(
      keymap,
      idx,
    );
  }

  late final _xkb_keymap_mod_get_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<struct_xkb_keymap>,
              xkb_mod_index_t)>>('xkb_keymap_mod_get_name');
  late final _xkb_keymap_mod_get_name = _xkb_keymap_mod_get_namePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<struct_xkb_keymap>, int)>();

  int xkb_keymap_mod_get_index(
    ffi.Pointer<struct_xkb_keymap> keymap,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _xkb_keymap_mod_get_index(
      keymap,
      name,
    );
  }

  late final _xkb_keymap_mod_get_indexPtr = _lookup<
      ffi.NativeFunction<
          xkb_mod_index_t Function(ffi.Pointer<struct_xkb_keymap>,
              ffi.Pointer<ffi.Char>)>>('xkb_keymap_mod_get_index');
  late final _xkb_keymap_mod_get_index =
      _xkb_keymap_mod_get_indexPtr.asFunction<
          int Function(
              ffi.Pointer<struct_xkb_keymap>, ffi.Pointer<ffi.Char>)>();

  int xkb_keymap_num_layouts(
    ffi.Pointer<struct_xkb_keymap> keymap,
  ) {
    return _xkb_keymap_num_layouts(
      keymap,
    );
  }

  late final _xkb_keymap_num_layoutsPtr = _lookup<
      ffi.NativeFunction<
          xkb_layout_index_t Function(
              ffi.Pointer<struct_xkb_keymap>)>>('xkb_keymap_num_layouts');
  late final _xkb_keymap_num_layouts = _xkb_keymap_num_layoutsPtr
      .asFunction<int Function(ffi.Pointer<struct_xkb_keymap>)>();

  ffi.Pointer<ffi.Char> xkb_keymap_layout_get_name(
    ffi.Pointer<struct_xkb_keymap> keymap,
    int idx,
  ) {
    return _xkb_keymap_layout_get_name(
      keymap,
      idx,
    );
  }

  late final _xkb_keymap_layout_get_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<struct_xkb_keymap>,
              xkb_layout_index_t)>>('xkb_keymap_layout_get_name');
  late final _xkb_keymap_layout_get_name =
      _xkb_keymap_layout_get_namePtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<struct_xkb_keymap>, int)>();

  int xkb_keymap_layout_get_index(
    ffi.Pointer<struct_xkb_keymap> keymap,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _xkb_keymap_layout_get_index(
      keymap,
      name,
    );
  }

  late final _xkb_keymap_layout_get_indexPtr = _lookup<
      ffi.NativeFunction<
          xkb_layout_index_t Function(ffi.Pointer<struct_xkb_keymap>,
              ffi.Pointer<ffi.Char>)>>('xkb_keymap_layout_get_index');
  late final _xkb_keymap_layout_get_index =
      _xkb_keymap_layout_get_indexPtr.asFunction<
          int Function(
              ffi.Pointer<struct_xkb_keymap>, ffi.Pointer<ffi.Char>)>();

  int xkb_keymap_num_leds(
    ffi.Pointer<struct_xkb_keymap> keymap,
  ) {
    return _xkb_keymap_num_leds(
      keymap,
    );
  }

  late final _xkb_keymap_num_ledsPtr = _lookup<
      ffi.NativeFunction<
          xkb_led_index_t Function(
              ffi.Pointer<struct_xkb_keymap>)>>('xkb_keymap_num_leds');
  late final _xkb_keymap_num_leds = _xkb_keymap_num_ledsPtr
      .asFunction<int Function(ffi.Pointer<struct_xkb_keymap>)>();

  ffi.Pointer<ffi.Char> xkb_keymap_led_get_name(
    ffi.Pointer<struct_xkb_keymap> keymap,
    int idx,
  ) {
    return _xkb_keymap_led_get_name(
      keymap,
      idx,
    );
  }

  late final _xkb_keymap_led_get_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<struct_xkb_keymap>,
              xkb_led_index_t)>>('xkb_keymap_led_get_name');
  late final _xkb_keymap_led_get_name = _xkb_keymap_led_get_namePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<struct_xkb_keymap>, int)>();

  int xkb_keymap_led_get_index(
    ffi.Pointer<struct_xkb_keymap> keymap,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _xkb_keymap_led_get_index(
      keymap,
      name,
    );
  }

  late final _xkb_keymap_led_get_indexPtr = _lookup<
      ffi.NativeFunction<
          xkb_led_index_t Function(ffi.Pointer<struct_xkb_keymap>,
              ffi.Pointer<ffi.Char>)>>('xkb_keymap_led_get_index');
  late final _xkb_keymap_led_get_index =
      _xkb_keymap_led_get_indexPtr.asFunction<
          int Function(
              ffi.Pointer<struct_xkb_keymap>, ffi.Pointer<ffi.Char>)>();

  int xkb_keymap_num_layouts_for_key(
    ffi.Pointer<struct_xkb_keymap> keymap,
    int key,
  ) {
    return _xkb_keymap_num_layouts_for_key(
      keymap,
      key,
    );
  }

  late final _xkb_keymap_num_layouts_for_keyPtr = _lookup<
      ffi.NativeFunction<
          xkb_layout_index_t Function(ffi.Pointer<struct_xkb_keymap>,
              xkb_keycode_t)>>('xkb_keymap_num_layouts_for_key');
  late final _xkb_keymap_num_layouts_for_key =
      _xkb_keymap_num_layouts_for_keyPtr
          .asFunction<int Function(ffi.Pointer<struct_xkb_keymap>, int)>();

  int xkb_keymap_num_levels_for_key(
    ffi.Pointer<struct_xkb_keymap> keymap,
    int key,
    int layout,
  ) {
    return _xkb_keymap_num_levels_for_key(
      keymap,
      key,
      layout,
    );
  }

  late final _xkb_keymap_num_levels_for_keyPtr = _lookup<
      ffi.NativeFunction<
          xkb_level_index_t Function(
              ffi.Pointer<struct_xkb_keymap>,
              xkb_keycode_t,
              xkb_layout_index_t)>>('xkb_keymap_num_levels_for_key');
  late final _xkb_keymap_num_levels_for_key = _xkb_keymap_num_levels_for_keyPtr
      .asFunction<int Function(ffi.Pointer<struct_xkb_keymap>, int, int)>();

  int xkb_keymap_key_get_mods_for_level(
    ffi.Pointer<struct_xkb_keymap> keymap,
    int key,
    int layout,
    int level,
    ffi.Pointer<xkb_mod_mask_t> masks_out,
    int masks_size,
  ) {
    return _xkb_keymap_key_get_mods_for_level(
      keymap,
      key,
      layout,
      level,
      masks_out,
      masks_size,
    );
  }

  late final _xkb_keymap_key_get_mods_for_levelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(
              ffi.Pointer<struct_xkb_keymap>,
              xkb_keycode_t,
              xkb_layout_index_t,
              xkb_level_index_t,
              ffi.Pointer<xkb_mod_mask_t>,
              ffi.Size)>>('xkb_keymap_key_get_mods_for_level');
  late final _xkb_keymap_key_get_mods_for_level =
      _xkb_keymap_key_get_mods_for_levelPtr.asFunction<
          int Function(ffi.Pointer<struct_xkb_keymap>, int, int, int,
              ffi.Pointer<xkb_mod_mask_t>, int)>();

  int xkb_keymap_key_get_syms_by_level(
    ffi.Pointer<struct_xkb_keymap> keymap,
    int key,
    int layout,
    int level,
    ffi.Pointer<ffi.Pointer<xkb_keysym_t>> syms_out,
  ) {
    return _xkb_keymap_key_get_syms_by_level(
      keymap,
      key,
      layout,
      level,
      syms_out,
    );
  }

  late final _xkb_keymap_key_get_syms_by_levelPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<struct_xkb_keymap>,
                  xkb_keycode_t,
                  xkb_layout_index_t,
                  xkb_level_index_t,
                  ffi.Pointer<ffi.Pointer<xkb_keysym_t>>)>>(
      'xkb_keymap_key_get_syms_by_level');
  late final _xkb_keymap_key_get_syms_by_level =
      _xkb_keymap_key_get_syms_by_levelPtr.asFunction<
          int Function(ffi.Pointer<struct_xkb_keymap>, int, int, int,
              ffi.Pointer<ffi.Pointer<xkb_keysym_t>>)>();

  int xkb_keymap_key_repeats(
    ffi.Pointer<struct_xkb_keymap> keymap,
    int key,
  ) {
    return _xkb_keymap_key_repeats(
      keymap,
      key,
    );
  }

  late final _xkb_keymap_key_repeatsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<struct_xkb_keymap>,
              xkb_keycode_t)>>('xkb_keymap_key_repeats');
  late final _xkb_keymap_key_repeats = _xkb_keymap_key_repeatsPtr
      .asFunction<int Function(ffi.Pointer<struct_xkb_keymap>, int)>();

  ffi.Pointer<struct_xkb_state> xkb_state_new(
    ffi.Pointer<struct_xkb_keymap> keymap,
  ) {
    return _xkb_state_new(
      keymap,
    );
  }

  late final _xkb_state_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<struct_xkb_state> Function(
              ffi.Pointer<struct_xkb_keymap>)>>('xkb_state_new');
  late final _xkb_state_new = _xkb_state_newPtr.asFunction<
      ffi.Pointer<struct_xkb_state> Function(ffi.Pointer<struct_xkb_keymap>)>();

  ffi.Pointer<struct_xkb_state> xkb_state_ref(
    ffi.Pointer<struct_xkb_state> state,
  ) {
    return _xkb_state_ref(
      state,
    );
  }

  late final _xkb_state_refPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<struct_xkb_state> Function(
              ffi.Pointer<struct_xkb_state>)>>('xkb_state_ref');
  late final _xkb_state_ref = _xkb_state_refPtr.asFunction<
      ffi.Pointer<struct_xkb_state> Function(ffi.Pointer<struct_xkb_state>)>();

  void xkb_state_unref(
    ffi.Pointer<struct_xkb_state> state,
  ) {
    return _xkb_state_unref(
      state,
    );
  }

  late final _xkb_state_unrefPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<struct_xkb_state>)>>(
      'xkb_state_unref');
  late final _xkb_state_unref = _xkb_state_unrefPtr
      .asFunction<void Function(ffi.Pointer<struct_xkb_state>)>();

  ffi.Pointer<struct_xkb_keymap> xkb_state_get_keymap(
    ffi.Pointer<struct_xkb_state> state,
  ) {
    return _xkb_state_get_keymap(
      state,
    );
  }

  late final _xkb_state_get_keymapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<struct_xkb_keymap> Function(
              ffi.Pointer<struct_xkb_state>)>>('xkb_state_get_keymap');
  late final _xkb_state_get_keymap = _xkb_state_get_keymapPtr.asFunction<
      ffi.Pointer<struct_xkb_keymap> Function(ffi.Pointer<struct_xkb_state>)>();

  int xkb_state_update_key(
    ffi.Pointer<struct_xkb_state> state,
    int key,
    int direction,
  ) {
    return _xkb_state_update_key(
      state,
      key,
      direction,
    );
  }

  late final _xkb_state_update_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<struct_xkb_state>, xkb_keycode_t,
              ffi.Int32)>>('xkb_state_update_key');
  late final _xkb_state_update_key = _xkb_state_update_keyPtr
      .asFunction<int Function(ffi.Pointer<struct_xkb_state>, int, int)>();

  int xkb_state_update_mask(
    ffi.Pointer<struct_xkb_state> state,
    int depressed_mods,
    int latched_mods,
    int locked_mods,
    int depressed_layout,
    int latched_layout,
    int locked_layout,
  ) {
    return _xkb_state_update_mask(
      state,
      depressed_mods,
      latched_mods,
      locked_mods,
      depressed_layout,
      latched_layout,
      locked_layout,
    );
  }

  late final _xkb_state_update_maskPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<struct_xkb_state>,
              xkb_mod_mask_t,
              xkb_mod_mask_t,
              xkb_mod_mask_t,
              xkb_layout_index_t,
              xkb_layout_index_t,
              xkb_layout_index_t)>>('xkb_state_update_mask');
  late final _xkb_state_update_mask = _xkb_state_update_maskPtr.asFunction<
      int Function(
          ffi.Pointer<struct_xkb_state>, int, int, int, int, int, int)>();

  int xkb_state_key_get_syms(
    ffi.Pointer<struct_xkb_state> state,
    int key,
    ffi.Pointer<ffi.Pointer<xkb_keysym_t>> syms_out,
  ) {
    return _xkb_state_key_get_syms(
      state,
      key,
      syms_out,
    );
  }

  late final _xkb_state_key_get_symsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<struct_xkb_state>, xkb_keycode_t,
                  ffi.Pointer<ffi.Pointer<xkb_keysym_t>>)>>(
      'xkb_state_key_get_syms');
  late final _xkb_state_key_get_syms = _xkb_state_key_get_symsPtr.asFunction<
      int Function(ffi.Pointer<struct_xkb_state>, int,
          ffi.Pointer<ffi.Pointer<xkb_keysym_t>>)>();

  int xkb_state_key_get_utf8(
    ffi.Pointer<struct_xkb_state> state,
    int key,
    ffi.Pointer<ffi.Char> buffer,
    int size,
  ) {
    return _xkb_state_key_get_utf8(
      state,
      key,
      buffer,
      size,
    );
  }

  late final _xkb_state_key_get_utf8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<struct_xkb_state>, xkb_keycode_t,
              ffi.Pointer<ffi.Char>, ffi.Size)>>('xkb_state_key_get_utf8');
  late final _xkb_state_key_get_utf8 = _xkb_state_key_get_utf8Ptr.asFunction<
      int Function(
          ffi.Pointer<struct_xkb_state>, int, ffi.Pointer<ffi.Char>, int)>();

  int xkb_state_key_get_utf32(
    ffi.Pointer<struct_xkb_state> state,
    int key,
  ) {
    return _xkb_state_key_get_utf32(
      state,
      key,
    );
  }

  late final _xkb_state_key_get_utf32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Uint32 Function(ffi.Pointer<struct_xkb_state>,
              xkb_keycode_t)>>('xkb_state_key_get_utf32');
  late final _xkb_state_key_get_utf32 = _xkb_state_key_get_utf32Ptr
      .asFunction<int Function(ffi.Pointer<struct_xkb_state>, int)>();

  int xkb_state_key_get_one_sym(
    ffi.Pointer<struct_xkb_state> state,
    int key,
  ) {
    return _xkb_state_key_get_one_sym(
      state,
      key,
    );
  }

  late final _xkb_state_key_get_one_symPtr = _lookup<
      ffi.NativeFunction<
          xkb_keysym_t Function(ffi.Pointer<struct_xkb_state>,
              xkb_keycode_t)>>('xkb_state_key_get_one_sym');
  late final _xkb_state_key_get_one_sym = _xkb_state_key_get_one_symPtr
      .asFunction<int Function(ffi.Pointer<struct_xkb_state>, int)>();

  int xkb_state_key_get_layout(
    ffi.Pointer<struct_xkb_state> state,
    int key,
  ) {
    return _xkb_state_key_get_layout(
      state,
      key,
    );
  }

  late final _xkb_state_key_get_layoutPtr = _lookup<
      ffi.NativeFunction<
          xkb_layout_index_t Function(ffi.Pointer<struct_xkb_state>,
              xkb_keycode_t)>>('xkb_state_key_get_layout');
  late final _xkb_state_key_get_layout = _xkb_state_key_get_layoutPtr
      .asFunction<int Function(ffi.Pointer<struct_xkb_state>, int)>();

  int xkb_state_key_get_level(
    ffi.Pointer<struct_xkb_state> state,
    int key,
    int layout,
  ) {
    return _xkb_state_key_get_level(
      state,
      key,
      layout,
    );
  }

  late final _xkb_state_key_get_levelPtr = _lookup<
      ffi.NativeFunction<
          xkb_level_index_t Function(ffi.Pointer<struct_xkb_state>,
              xkb_keycode_t, xkb_layout_index_t)>>('xkb_state_key_get_level');
  late final _xkb_state_key_get_level = _xkb_state_key_get_levelPtr
      .asFunction<int Function(ffi.Pointer<struct_xkb_state>, int, int)>();

  int xkb_state_serialize_mods(
    ffi.Pointer<struct_xkb_state> state,
    int components,
  ) {
    return _xkb_state_serialize_mods(
      state,
      components,
    );
  }

  late final _xkb_state_serialize_modsPtr = _lookup<
      ffi.NativeFunction<
          xkb_mod_mask_t Function(ffi.Pointer<struct_xkb_state>,
              ffi.Int32)>>('xkb_state_serialize_mods');
  late final _xkb_state_serialize_mods = _xkb_state_serialize_modsPtr
      .asFunction<int Function(ffi.Pointer<struct_xkb_state>, int)>();

  int xkb_state_serialize_layout(
    ffi.Pointer<struct_xkb_state> state,
    int components,
  ) {
    return _xkb_state_serialize_layout(
      state,
      components,
    );
  }

  late final _xkb_state_serialize_layoutPtr = _lookup<
      ffi.NativeFunction<
          xkb_layout_index_t Function(ffi.Pointer<struct_xkb_state>,
              ffi.Int32)>>('xkb_state_serialize_layout');
  late final _xkb_state_serialize_layout = _xkb_state_serialize_layoutPtr
      .asFunction<int Function(ffi.Pointer<struct_xkb_state>, int)>();

  int xkb_state_mod_name_is_active(
    ffi.Pointer<struct_xkb_state> state,
    ffi.Pointer<ffi.Char> name,
    int type,
  ) {
    return _xkb_state_mod_name_is_active(
      state,
      name,
      type,
    );
  }

  late final _xkb_state_mod_name_is_activePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<struct_xkb_state>, ffi.Pointer<ffi.Char>,
              ffi.Int32)>>('xkb_state_mod_name_is_active');
  late final _xkb_state_mod_name_is_active =
      _xkb_state_mod_name_is_activePtr.asFunction<
          int Function(
              ffi.Pointer<struct_xkb_state>, ffi.Pointer<ffi.Char>, int)>();

  int xkb_state_mod_names_are_active(
    ffi.Pointer<struct_xkb_state> state,
    int type,
    int match,
  ) {
    return _xkb_state_mod_names_are_active(
      state,
      type,
      match,
    );
  }

  late final _xkb_state_mod_names_are_activePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<struct_xkb_state>, ffi.Int32,
              ffi.Int32)>>('xkb_state_mod_names_are_active');
  late final _xkb_state_mod_names_are_active =
      _xkb_state_mod_names_are_activePtr
          .asFunction<int Function(ffi.Pointer<struct_xkb_state>, int, int)>();

  int xkb_state_mod_index_is_active(
    ffi.Pointer<struct_xkb_state> state,
    int idx,
    int type,
  ) {
    return _xkb_state_mod_index_is_active(
      state,
      idx,
      type,
    );
  }

  late final _xkb_state_mod_index_is_activePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<struct_xkb_state>, xkb_mod_index_t,
              ffi.Int32)>>('xkb_state_mod_index_is_active');
  late final _xkb_state_mod_index_is_active = _xkb_state_mod_index_is_activePtr
      .asFunction<int Function(ffi.Pointer<struct_xkb_state>, int, int)>();

  int xkb_state_mod_indices_are_active(
    ffi.Pointer<struct_xkb_state> state,
    int type,
    int match,
  ) {
    return _xkb_state_mod_indices_are_active(
      state,
      type,
      match,
    );
  }

  late final _xkb_state_mod_indices_are_activePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<struct_xkb_state>, ffi.Int32,
              ffi.Int32)>>('xkb_state_mod_indices_are_active');
  late final _xkb_state_mod_indices_are_active =
      _xkb_state_mod_indices_are_activePtr
          .asFunction<int Function(ffi.Pointer<struct_xkb_state>, int, int)>();

  int xkb_state_key_get_consumed_mods2(
    ffi.Pointer<struct_xkb_state> state,
    int key,
    int mode,
  ) {
    return _xkb_state_key_get_consumed_mods2(
      state,
      key,
      mode,
    );
  }

  late final _xkb_state_key_get_consumed_mods2Ptr = _lookup<
      ffi.NativeFunction<
          xkb_mod_mask_t Function(ffi.Pointer<struct_xkb_state>, xkb_keycode_t,
              ffi.Int32)>>('xkb_state_key_get_consumed_mods2');
  late final _xkb_state_key_get_consumed_mods2 =
      _xkb_state_key_get_consumed_mods2Ptr
          .asFunction<int Function(ffi.Pointer<struct_xkb_state>, int, int)>();

  int xkb_state_key_get_consumed_mods(
    ffi.Pointer<struct_xkb_state> state,
    int key,
  ) {
    return _xkb_state_key_get_consumed_mods(
      state,
      key,
    );
  }

  late final _xkb_state_key_get_consumed_modsPtr = _lookup<
      ffi.NativeFunction<
          xkb_mod_mask_t Function(ffi.Pointer<struct_xkb_state>,
              xkb_keycode_t)>>('xkb_state_key_get_consumed_mods');
  late final _xkb_state_key_get_consumed_mods =
      _xkb_state_key_get_consumed_modsPtr
          .asFunction<int Function(ffi.Pointer<struct_xkb_state>, int)>();

  int xkb_state_mod_index_is_consumed2(
    ffi.Pointer<struct_xkb_state> state,
    int key,
    int idx,
    int mode,
  ) {
    return _xkb_state_mod_index_is_consumed2(
      state,
      key,
      idx,
      mode,
    );
  }

  late final _xkb_state_mod_index_is_consumed2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<struct_xkb_state>, xkb_keycode_t,
              xkb_mod_index_t, ffi.Int32)>>('xkb_state_mod_index_is_consumed2');
  late final _xkb_state_mod_index_is_consumed2 =
      _xkb_state_mod_index_is_consumed2Ptr.asFunction<
          int Function(ffi.Pointer<struct_xkb_state>, int, int, int)>();

  int xkb_state_mod_index_is_consumed(
    ffi.Pointer<struct_xkb_state> state,
    int key,
    int idx,
  ) {
    return _xkb_state_mod_index_is_consumed(
      state,
      key,
      idx,
    );
  }

  late final _xkb_state_mod_index_is_consumedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<struct_xkb_state>, xkb_keycode_t,
              xkb_mod_index_t)>>('xkb_state_mod_index_is_consumed');
  late final _xkb_state_mod_index_is_consumed =
      _xkb_state_mod_index_is_consumedPtr
          .asFunction<int Function(ffi.Pointer<struct_xkb_state>, int, int)>();

  int xkb_state_mod_mask_remove_consumed(
    ffi.Pointer<struct_xkb_state> state,
    int key,
    int mask,
  ) {
    return _xkb_state_mod_mask_remove_consumed(
      state,
      key,
      mask,
    );
  }

  late final _xkb_state_mod_mask_remove_consumedPtr = _lookup<
      ffi.NativeFunction<
          xkb_mod_mask_t Function(ffi.Pointer<struct_xkb_state>, xkb_keycode_t,
              xkb_mod_mask_t)>>('xkb_state_mod_mask_remove_consumed');
  late final _xkb_state_mod_mask_remove_consumed =
      _xkb_state_mod_mask_remove_consumedPtr
          .asFunction<int Function(ffi.Pointer<struct_xkb_state>, int, int)>();

  int xkb_state_layout_name_is_active(
    ffi.Pointer<struct_xkb_state> state,
    ffi.Pointer<ffi.Char> name,
    int type,
  ) {
    return _xkb_state_layout_name_is_active(
      state,
      name,
      type,
    );
  }

  late final _xkb_state_layout_name_is_activePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<struct_xkb_state>, ffi.Pointer<ffi.Char>,
              ffi.Int32)>>('xkb_state_layout_name_is_active');
  late final _xkb_state_layout_name_is_active =
      _xkb_state_layout_name_is_activePtr.asFunction<
          int Function(
              ffi.Pointer<struct_xkb_state>, ffi.Pointer<ffi.Char>, int)>();

  int xkb_state_layout_index_is_active(
    ffi.Pointer<struct_xkb_state> state,
    int idx,
    int type,
  ) {
    return _xkb_state_layout_index_is_active(
      state,
      idx,
      type,
    );
  }

  late final _xkb_state_layout_index_is_activePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<struct_xkb_state>, xkb_layout_index_t,
              ffi.Int32)>>('xkb_state_layout_index_is_active');
  late final _xkb_state_layout_index_is_active =
      _xkb_state_layout_index_is_activePtr
          .asFunction<int Function(ffi.Pointer<struct_xkb_state>, int, int)>();

  int xkb_state_led_name_is_active(
    ffi.Pointer<struct_xkb_state> state,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _xkb_state_led_name_is_active(
      state,
      name,
    );
  }

  late final _xkb_state_led_name_is_activePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<struct_xkb_state>,
              ffi.Pointer<ffi.Char>)>>('xkb_state_led_name_is_active');
  late final _xkb_state_led_name_is_active =
      _xkb_state_led_name_is_activePtr.asFunction<
          int Function(ffi.Pointer<struct_xkb_state>, ffi.Pointer<ffi.Char>)>();

  int xkb_state_led_index_is_active(
    ffi.Pointer<struct_xkb_state> state,
    int idx,
  ) {
    return _xkb_state_led_index_is_active(
      state,
      idx,
    );
  }

  late final _xkb_state_led_index_is_activePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<struct_xkb_state>,
              xkb_led_index_t)>>('xkb_state_led_index_is_active');
  late final _xkb_state_led_index_is_active = _xkb_state_led_index_is_activePtr
      .asFunction<int Function(ffi.Pointer<struct_xkb_state>, int)>();

  bool wlr_keyboard_set_keymap(
    ffi.Pointer<struct_wlr_keyboard> kb,
    ffi.Pointer<struct_xkb_keymap> keymap,
  ) {
    return _wlr_keyboard_set_keymap(
      kb,
      keymap,
    );
  }

  late final _wlr_keyboard_set_keymapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<struct_wlr_keyboard>,
              ffi.Pointer<struct_xkb_keymap>)>>('wlr_keyboard_set_keymap');
  late final _wlr_keyboard_set_keymap = _wlr_keyboard_set_keymapPtr.asFunction<
      bool Function(
          ffi.Pointer<struct_wlr_keyboard>, ffi.Pointer<struct_xkb_keymap>)>();

  bool wlr_keyboard_keymaps_match(
    ffi.Pointer<struct_xkb_keymap> km1,
    ffi.Pointer<struct_xkb_keymap> km2,
  ) {
    return _wlr_keyboard_keymaps_match(
      km1,
      km2,
    );
  }

  late final _wlr_keyboard_keymaps_matchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<struct_xkb_keymap>,
              ffi.Pointer<struct_xkb_keymap>)>>('wlr_keyboard_keymaps_match');
  late final _wlr_keyboard_keymaps_match =
      _wlr_keyboard_keymaps_matchPtr.asFunction<
          bool Function(ffi.Pointer<struct_xkb_keymap>,
              ffi.Pointer<struct_xkb_keymap>)>();

  void wlr_keyboard_set_repeat_info(
    ffi.Pointer<struct_wlr_keyboard> kb,
    int rate,
    int delay,
  ) {
    return _wlr_keyboard_set_repeat_info(
      kb,
      rate,
      delay,
    );
  }

  late final _wlr_keyboard_set_repeat_infoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wlr_keyboard>, ffi.Int32,
              ffi.Int32)>>('wlr_keyboard_set_repeat_info');
  late final _wlr_keyboard_set_repeat_info = _wlr_keyboard_set_repeat_infoPtr
      .asFunction<void Function(ffi.Pointer<struct_wlr_keyboard>, int, int)>();

  void wlr_keyboard_led_update(
    ffi.Pointer<struct_wlr_keyboard> keyboard,
    int leds,
  ) {
    return _wlr_keyboard_led_update(
      keyboard,
      leds,
    );
  }

  late final _wlr_keyboard_led_updatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wlr_keyboard>,
              ffi.Uint32)>>('wlr_keyboard_led_update');
  late final _wlr_keyboard_led_update = _wlr_keyboard_led_updatePtr
      .asFunction<void Function(ffi.Pointer<struct_wlr_keyboard>, int)>();

  int wlr_keyboard_get_modifiers(
    ffi.Pointer<struct_wlr_keyboard> keyboard,
  ) {
    return _wlr_keyboard_get_modifiers(
      keyboard,
    );
  }

  late final _wlr_keyboard_get_modifiersPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint32 Function(
              ffi.Pointer<struct_wlr_keyboard>)>>('wlr_keyboard_get_modifiers');
  late final _wlr_keyboard_get_modifiers = _wlr_keyboard_get_modifiersPtr
      .asFunction<int Function(ffi.Pointer<struct_wlr_keyboard>)>();

  void pixman_transform_init_identity(
    ffi.Pointer<struct_pixman_transform> matrix,
  ) {
    return _pixman_transform_init_identity(
      matrix,
    );
  }

  late final _pixman_transform_init_identityPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<struct_pixman_transform>)>>(
      'pixman_transform_init_identity');
  late final _pixman_transform_init_identity =
      _pixman_transform_init_identityPtr
          .asFunction<void Function(ffi.Pointer<struct_pixman_transform>)>();

  int pixman_transform_point_3d(
    ffi.Pointer<struct_pixman_transform> transform,
    ffi.Pointer<struct_pixman_vector> vector,
  ) {
    return _pixman_transform_point_3d(
      transform,
      vector,
    );
  }

  late final _pixman_transform_point_3dPtr = _lookup<
      ffi.NativeFunction<
          pixman_bool_t Function(ffi.Pointer<struct_pixman_transform>,
              ffi.Pointer<struct_pixman_vector>)>>('pixman_transform_point_3d');
  late final _pixman_transform_point_3d =
      _pixman_transform_point_3dPtr.asFunction<
          int Function(ffi.Pointer<struct_pixman_transform>,
              ffi.Pointer<struct_pixman_vector>)>();

  int pixman_transform_point(
    ffi.Pointer<struct_pixman_transform> transform,
    ffi.Pointer<struct_pixman_vector> vector,
  ) {
    return _pixman_transform_point(
      transform,
      vector,
    );
  }

  late final _pixman_transform_pointPtr = _lookup<
      ffi.NativeFunction<
          pixman_bool_t Function(ffi.Pointer<struct_pixman_transform>,
              ffi.Pointer<struct_pixman_vector>)>>('pixman_transform_point');
  late final _pixman_transform_point = _pixman_transform_pointPtr.asFunction<
      int Function(ffi.Pointer<struct_pixman_transform>,
          ffi.Pointer<struct_pixman_vector>)>();

  int pixman_transform_multiply(
    ffi.Pointer<struct_pixman_transform> dst,
    ffi.Pointer<struct_pixman_transform> l,
    ffi.Pointer<struct_pixman_transform> r,
  ) {
    return _pixman_transform_multiply(
      dst,
      l,
      r,
    );
  }

  late final _pixman_transform_multiplyPtr = _lookup<
          ffi.NativeFunction<
              pixman_bool_t Function(
                  ffi.Pointer<struct_pixman_transform>,
                  ffi.Pointer<struct_pixman_transform>,
                  ffi.Pointer<struct_pixman_transform>)>>(
      'pixman_transform_multiply');
  late final _pixman_transform_multiply =
      _pixman_transform_multiplyPtr.asFunction<
          int Function(
              ffi.Pointer<struct_pixman_transform>,
              ffi.Pointer<struct_pixman_transform>,
              ffi.Pointer<struct_pixman_transform>)>();

  void pixman_transform_init_scale(
    ffi.Pointer<struct_pixman_transform> t,
    int sx,
    int sy,
  ) {
    return _pixman_transform_init_scale(
      t,
      sx,
      sy,
    );
  }

  late final _pixman_transform_init_scalePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_pixman_transform>,
              pixman_fixed_t, pixman_fixed_t)>>('pixman_transform_init_scale');
  late final _pixman_transform_init_scale =
      _pixman_transform_init_scalePtr.asFunction<
          void Function(ffi.Pointer<struct_pixman_transform>, int, int)>();

  int pixman_transform_scale(
    ffi.Pointer<struct_pixman_transform> forward,
    ffi.Pointer<struct_pixman_transform> reverse,
    int sx,
    int sy,
  ) {
    return _pixman_transform_scale(
      forward,
      reverse,
      sx,
      sy,
    );
  }

  late final _pixman_transform_scalePtr = _lookup<
      ffi.NativeFunction<
          pixman_bool_t Function(
              ffi.Pointer<struct_pixman_transform>,
              ffi.Pointer<struct_pixman_transform>,
              pixman_fixed_t,
              pixman_fixed_t)>>('pixman_transform_scale');
  late final _pixman_transform_scale = _pixman_transform_scalePtr.asFunction<
      int Function(ffi.Pointer<struct_pixman_transform>,
          ffi.Pointer<struct_pixman_transform>, int, int)>();

  void pixman_transform_init_rotate(
    ffi.Pointer<struct_pixman_transform> t,
    int cos,
    int sin,
  ) {
    return _pixman_transform_init_rotate(
      t,
      cos,
      sin,
    );
  }

  late final _pixman_transform_init_rotatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_pixman_transform>,
              pixman_fixed_t, pixman_fixed_t)>>('pixman_transform_init_rotate');
  late final _pixman_transform_init_rotate =
      _pixman_transform_init_rotatePtr.asFunction<
          void Function(ffi.Pointer<struct_pixman_transform>, int, int)>();

  int pixman_transform_rotate(
    ffi.Pointer<struct_pixman_transform> forward,
    ffi.Pointer<struct_pixman_transform> reverse,
    int c,
    int s,
  ) {
    return _pixman_transform_rotate(
      forward,
      reverse,
      c,
      s,
    );
  }

  late final _pixman_transform_rotatePtr = _lookup<
      ffi.NativeFunction<
          pixman_bool_t Function(
              ffi.Pointer<struct_pixman_transform>,
              ffi.Pointer<struct_pixman_transform>,
              pixman_fixed_t,
              pixman_fixed_t)>>('pixman_transform_rotate');
  late final _pixman_transform_rotate = _pixman_transform_rotatePtr.asFunction<
      int Function(ffi.Pointer<struct_pixman_transform>,
          ffi.Pointer<struct_pixman_transform>, int, int)>();

  void pixman_transform_init_translate(
    ffi.Pointer<struct_pixman_transform> t,
    int tx,
    int ty,
  ) {
    return _pixman_transform_init_translate(
      t,
      tx,
      ty,
    );
  }

  late final _pixman_transform_init_translatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_pixman_transform>,
              pixman_fixed_t,
              pixman_fixed_t)>>('pixman_transform_init_translate');
  late final _pixman_transform_init_translate =
      _pixman_transform_init_translatePtr.asFunction<
          void Function(ffi.Pointer<struct_pixman_transform>, int, int)>();

  int pixman_transform_translate(
    ffi.Pointer<struct_pixman_transform> forward,
    ffi.Pointer<struct_pixman_transform> reverse,
    int tx,
    int ty,
  ) {
    return _pixman_transform_translate(
      forward,
      reverse,
      tx,
      ty,
    );
  }

  late final _pixman_transform_translatePtr = _lookup<
      ffi.NativeFunction<
          pixman_bool_t Function(
              ffi.Pointer<struct_pixman_transform>,
              ffi.Pointer<struct_pixman_transform>,
              pixman_fixed_t,
              pixman_fixed_t)>>('pixman_transform_translate');
  late final _pixman_transform_translate =
      _pixman_transform_translatePtr.asFunction<
          int Function(ffi.Pointer<struct_pixman_transform>,
              ffi.Pointer<struct_pixman_transform>, int, int)>();

  int pixman_transform_bounds(
    ffi.Pointer<struct_pixman_transform> matrix,
    ffi.Pointer<struct_pixman_box16> b,
  ) {
    return _pixman_transform_bounds(
      matrix,
      b,
    );
  }

  late final _pixman_transform_boundsPtr = _lookup<
      ffi.NativeFunction<
          pixman_bool_t Function(ffi.Pointer<struct_pixman_transform>,
              ffi.Pointer<struct_pixman_box16>)>>('pixman_transform_bounds');
  late final _pixman_transform_bounds = _pixman_transform_boundsPtr.asFunction<
      int Function(ffi.Pointer<struct_pixman_transform>,
          ffi.Pointer<struct_pixman_box16>)>();

  int pixman_transform_invert(
    ffi.Pointer<struct_pixman_transform> dst,
    ffi.Pointer<struct_pixman_transform> src,
  ) {
    return _pixman_transform_invert(
      dst,
      src,
    );
  }

  late final _pixman_transform_invertPtr = _lookup<
          ffi.NativeFunction<
              pixman_bool_t Function(ffi.Pointer<struct_pixman_transform>,
                  ffi.Pointer<struct_pixman_transform>)>>(
      'pixman_transform_invert');
  late final _pixman_transform_invert = _pixman_transform_invertPtr.asFunction<
      int Function(ffi.Pointer<struct_pixman_transform>,
          ffi.Pointer<struct_pixman_transform>)>();

  int pixman_transform_is_identity(
    ffi.Pointer<struct_pixman_transform> t,
  ) {
    return _pixman_transform_is_identity(
      t,
    );
  }

  late final _pixman_transform_is_identityPtr = _lookup<
          ffi.NativeFunction<
              pixman_bool_t Function(ffi.Pointer<struct_pixman_transform>)>>(
      'pixman_transform_is_identity');
  late final _pixman_transform_is_identity = _pixman_transform_is_identityPtr
      .asFunction<int Function(ffi.Pointer<struct_pixman_transform>)>();

  int pixman_transform_is_scale(
    ffi.Pointer<struct_pixman_transform> t,
  ) {
    return _pixman_transform_is_scale(
      t,
    );
  }

  late final _pixman_transform_is_scalePtr = _lookup<
          ffi.NativeFunction<
              pixman_bool_t Function(ffi.Pointer<struct_pixman_transform>)>>(
      'pixman_transform_is_scale');
  late final _pixman_transform_is_scale = _pixman_transform_is_scalePtr
      .asFunction<int Function(ffi.Pointer<struct_pixman_transform>)>();

  int pixman_transform_is_int_translate(
    ffi.Pointer<struct_pixman_transform> t,
  ) {
    return _pixman_transform_is_int_translate(
      t,
    );
  }

  late final _pixman_transform_is_int_translatePtr = _lookup<
          ffi.NativeFunction<
              pixman_bool_t Function(ffi.Pointer<struct_pixman_transform>)>>(
      'pixman_transform_is_int_translate');
  late final _pixman_transform_is_int_translate =
      _pixman_transform_is_int_translatePtr
          .asFunction<int Function(ffi.Pointer<struct_pixman_transform>)>();

  int pixman_transform_is_inverse(
    ffi.Pointer<struct_pixman_transform> a,
    ffi.Pointer<struct_pixman_transform> b,
  ) {
    return _pixman_transform_is_inverse(
      a,
      b,
    );
  }

  late final _pixman_transform_is_inversePtr = _lookup<
          ffi.NativeFunction<
              pixman_bool_t Function(ffi.Pointer<struct_pixman_transform>,
                  ffi.Pointer<struct_pixman_transform>)>>(
      'pixman_transform_is_inverse');
  late final _pixman_transform_is_inverse =
      _pixman_transform_is_inversePtr.asFunction<
          int Function(ffi.Pointer<struct_pixman_transform>,
              ffi.Pointer<struct_pixman_transform>)>();

  int pixman_transform_from_pixman_f_transform(
    ffi.Pointer<struct_pixman_transform> t,
    ffi.Pointer<struct_pixman_f_transform> ft,
  ) {
    return _pixman_transform_from_pixman_f_transform(
      t,
      ft,
    );
  }

  late final _pixman_transform_from_pixman_f_transformPtr = _lookup<
          ffi.NativeFunction<
              pixman_bool_t Function(ffi.Pointer<struct_pixman_transform>,
                  ffi.Pointer<struct_pixman_f_transform>)>>(
      'pixman_transform_from_pixman_f_transform');
  late final _pixman_transform_from_pixman_f_transform =
      _pixman_transform_from_pixman_f_transformPtr.asFunction<
          int Function(ffi.Pointer<struct_pixman_transform>,
              ffi.Pointer<struct_pixman_f_transform>)>();

  void pixman_f_transform_from_pixman_transform(
    ffi.Pointer<struct_pixman_f_transform> ft,
    ffi.Pointer<struct_pixman_transform> t,
  ) {
    return _pixman_f_transform_from_pixman_transform(
      ft,
      t,
    );
  }

  late final _pixman_f_transform_from_pixman_transformPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<struct_pixman_f_transform>,
                  ffi.Pointer<struct_pixman_transform>)>>(
      'pixman_f_transform_from_pixman_transform');
  late final _pixman_f_transform_from_pixman_transform =
      _pixman_f_transform_from_pixman_transformPtr.asFunction<
          void Function(ffi.Pointer<struct_pixman_f_transform>,
              ffi.Pointer<struct_pixman_transform>)>();

  int pixman_f_transform_invert(
    ffi.Pointer<struct_pixman_f_transform> dst,
    ffi.Pointer<struct_pixman_f_transform> src,
  ) {
    return _pixman_f_transform_invert(
      dst,
      src,
    );
  }

  late final _pixman_f_transform_invertPtr = _lookup<
          ffi.NativeFunction<
              pixman_bool_t Function(ffi.Pointer<struct_pixman_f_transform>,
                  ffi.Pointer<struct_pixman_f_transform>)>>(
      'pixman_f_transform_invert');
  late final _pixman_f_transform_invert =
      _pixman_f_transform_invertPtr.asFunction<
          int Function(ffi.Pointer<struct_pixman_f_transform>,
              ffi.Pointer<struct_pixman_f_transform>)>();

  int pixman_f_transform_point(
    ffi.Pointer<struct_pixman_f_transform> t,
    ffi.Pointer<struct_pixman_f_vector> v,
  ) {
    return _pixman_f_transform_point(
      t,
      v,
    );
  }

  late final _pixman_f_transform_pointPtr = _lookup<
          ffi.NativeFunction<
              pixman_bool_t Function(ffi.Pointer<struct_pixman_f_transform>,
                  ffi.Pointer<struct_pixman_f_vector>)>>(
      'pixman_f_transform_point');
  late final _pixman_f_transform_point =
      _pixman_f_transform_pointPtr.asFunction<
          int Function(ffi.Pointer<struct_pixman_f_transform>,
              ffi.Pointer<struct_pixman_f_vector>)>();

  void pixman_f_transform_point_3d(
    ffi.Pointer<struct_pixman_f_transform> t,
    ffi.Pointer<struct_pixman_f_vector> v,
  ) {
    return _pixman_f_transform_point_3d(
      t,
      v,
    );
  }

  late final _pixman_f_transform_point_3dPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<struct_pixman_f_transform>,
                  ffi.Pointer<struct_pixman_f_vector>)>>(
      'pixman_f_transform_point_3d');
  late final _pixman_f_transform_point_3d =
      _pixman_f_transform_point_3dPtr.asFunction<
          void Function(ffi.Pointer<struct_pixman_f_transform>,
              ffi.Pointer<struct_pixman_f_vector>)>();

  void pixman_f_transform_multiply(
    ffi.Pointer<struct_pixman_f_transform> dst,
    ffi.Pointer<struct_pixman_f_transform> l,
    ffi.Pointer<struct_pixman_f_transform> r,
  ) {
    return _pixman_f_transform_multiply(
      dst,
      l,
      r,
    );
  }

  late final _pixman_f_transform_multiplyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<struct_pixman_f_transform>,
                  ffi.Pointer<struct_pixman_f_transform>,
                  ffi.Pointer<struct_pixman_f_transform>)>>(
      'pixman_f_transform_multiply');
  late final _pixman_f_transform_multiply =
      _pixman_f_transform_multiplyPtr.asFunction<
          void Function(
              ffi.Pointer<struct_pixman_f_transform>,
              ffi.Pointer<struct_pixman_f_transform>,
              ffi.Pointer<struct_pixman_f_transform>)>();

  void pixman_f_transform_init_scale(
    ffi.Pointer<struct_pixman_f_transform> t,
    double sx,
    double sy,
  ) {
    return _pixman_f_transform_init_scale(
      t,
      sx,
      sy,
    );
  }

  late final _pixman_f_transform_init_scalePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_pixman_f_transform>, ffi.Double,
              ffi.Double)>>('pixman_f_transform_init_scale');
  late final _pixman_f_transform_init_scale =
      _pixman_f_transform_init_scalePtr.asFunction<
          void Function(
              ffi.Pointer<struct_pixman_f_transform>, double, double)>();

  int pixman_f_transform_scale(
    ffi.Pointer<struct_pixman_f_transform> forward,
    ffi.Pointer<struct_pixman_f_transform> reverse,
    double sx,
    double sy,
  ) {
    return _pixman_f_transform_scale(
      forward,
      reverse,
      sx,
      sy,
    );
  }

  late final _pixman_f_transform_scalePtr = _lookup<
      ffi.NativeFunction<
          pixman_bool_t Function(
              ffi.Pointer<struct_pixman_f_transform>,
              ffi.Pointer<struct_pixman_f_transform>,
              ffi.Double,
              ffi.Double)>>('pixman_f_transform_scale');
  late final _pixman_f_transform_scale =
      _pixman_f_transform_scalePtr.asFunction<
          int Function(ffi.Pointer<struct_pixman_f_transform>,
              ffi.Pointer<struct_pixman_f_transform>, double, double)>();

  void pixman_f_transform_init_rotate(
    ffi.Pointer<struct_pixman_f_transform> t,
    double cos,
    double sin,
  ) {
    return _pixman_f_transform_init_rotate(
      t,
      cos,
      sin,
    );
  }

  late final _pixman_f_transform_init_rotatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_pixman_f_transform>, ffi.Double,
              ffi.Double)>>('pixman_f_transform_init_rotate');
  late final _pixman_f_transform_init_rotate =
      _pixman_f_transform_init_rotatePtr.asFunction<
          void Function(
              ffi.Pointer<struct_pixman_f_transform>, double, double)>();

  int pixman_f_transform_rotate(
    ffi.Pointer<struct_pixman_f_transform> forward,
    ffi.Pointer<struct_pixman_f_transform> reverse,
    double c,
    double s,
  ) {
    return _pixman_f_transform_rotate(
      forward,
      reverse,
      c,
      s,
    );
  }

  late final _pixman_f_transform_rotatePtr = _lookup<
      ffi.NativeFunction<
          pixman_bool_t Function(
              ffi.Pointer<struct_pixman_f_transform>,
              ffi.Pointer<struct_pixman_f_transform>,
              ffi.Double,
              ffi.Double)>>('pixman_f_transform_rotate');
  late final _pixman_f_transform_rotate =
      _pixman_f_transform_rotatePtr.asFunction<
          int Function(ffi.Pointer<struct_pixman_f_transform>,
              ffi.Pointer<struct_pixman_f_transform>, double, double)>();

  void pixman_f_transform_init_translate(
    ffi.Pointer<struct_pixman_f_transform> t,
    double tx,
    double ty,
  ) {
    return _pixman_f_transform_init_translate(
      t,
      tx,
      ty,
    );
  }

  late final _pixman_f_transform_init_translatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_pixman_f_transform>, ffi.Double,
              ffi.Double)>>('pixman_f_transform_init_translate');
  late final _pixman_f_transform_init_translate =
      _pixman_f_transform_init_translatePtr.asFunction<
          void Function(
              ffi.Pointer<struct_pixman_f_transform>, double, double)>();

  int pixman_f_transform_translate(
    ffi.Pointer<struct_pixman_f_transform> forward,
    ffi.Pointer<struct_pixman_f_transform> reverse,
    double tx,
    double ty,
  ) {
    return _pixman_f_transform_translate(
      forward,
      reverse,
      tx,
      ty,
    );
  }

  late final _pixman_f_transform_translatePtr = _lookup<
      ffi.NativeFunction<
          pixman_bool_t Function(
              ffi.Pointer<struct_pixman_f_transform>,
              ffi.Pointer<struct_pixman_f_transform>,
              ffi.Double,
              ffi.Double)>>('pixman_f_transform_translate');
  late final _pixman_f_transform_translate =
      _pixman_f_transform_translatePtr.asFunction<
          int Function(ffi.Pointer<struct_pixman_f_transform>,
              ffi.Pointer<struct_pixman_f_transform>, double, double)>();

  int pixman_f_transform_bounds(
    ffi.Pointer<struct_pixman_f_transform> t,
    ffi.Pointer<struct_pixman_box16> b,
  ) {
    return _pixman_f_transform_bounds(
      t,
      b,
    );
  }

  late final _pixman_f_transform_boundsPtr = _lookup<
      ffi.NativeFunction<
          pixman_bool_t Function(ffi.Pointer<struct_pixman_f_transform>,
              ffi.Pointer<struct_pixman_box16>)>>('pixman_f_transform_bounds');
  late final _pixman_f_transform_bounds =
      _pixman_f_transform_boundsPtr.asFunction<
          int Function(ffi.Pointer<struct_pixman_f_transform>,
              ffi.Pointer<struct_pixman_box16>)>();

  void pixman_f_transform_init_identity(
    ffi.Pointer<struct_pixman_f_transform> t,
  ) {
    return _pixman_f_transform_init_identity(
      t,
    );
  }

  late final _pixman_f_transform_init_identityPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<struct_pixman_f_transform>)>>(
      'pixman_f_transform_init_identity');
  late final _pixman_f_transform_init_identity =
      _pixman_f_transform_init_identityPtr
          .asFunction<void Function(ffi.Pointer<struct_pixman_f_transform>)>();

  void pixman_region_set_static_pointers(
    ffi.Pointer<pixman_box16_t> empty_box,
    ffi.Pointer<pixman_region16_data_t> empty_data,
    ffi.Pointer<pixman_region16_data_t> broken_data,
  ) {
    return _pixman_region_set_static_pointers(
      empty_box,
      empty_data,
      broken_data,
    );
  }

  late final _pixman_region_set_static_pointersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<pixman_box16_t>,
                  ffi.Pointer<pixman_region16_data_t>,
                  ffi.Pointer<pixman_region16_data_t>)>>(
      'pixman_region_set_static_pointers');
  late final _pixman_region_set_static_pointers =
      _pixman_region_set_static_pointersPtr.asFunction<
          void Function(
              ffi.Pointer<pixman_box16_t>,
              ffi.Pointer<pixman_region16_data_t>,
              ffi.Pointer<pixman_region16_data_t>)>();

  void pixman_region_init(
    ffi.Pointer<pixman_region16_t> region,
  ) {
    return _pixman_region_init(
      region,
    );
  }

  late final _pixman_region_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<pixman_region16_t>)>>('pixman_region_init');
  late final _pixman_region_init = _pixman_region_initPtr
      .asFunction<void Function(ffi.Pointer<pixman_region16_t>)>();

  void pixman_region_init_rect(
    ffi.Pointer<pixman_region16_t> region,
    int x,
    int y,
    int width,
    int height,
  ) {
    return _pixman_region_init_rect(
      region,
      x,
      y,
      width,
      height,
    );
  }

  late final _pixman_region_init_rectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<pixman_region16_t>, ffi.Int, ffi.Int,
              ffi.UnsignedInt, ffi.UnsignedInt)>>('pixman_region_init_rect');
  late final _pixman_region_init_rect = _pixman_region_init_rectPtr.asFunction<
      void Function(ffi.Pointer<pixman_region16_t>, int, int, int, int)>();

  int pixman_region_init_rects(
    ffi.Pointer<pixman_region16_t> region,
    ffi.Pointer<pixman_box16_t> boxes,
    int count,
  ) {
    return _pixman_region_init_rects(
      region,
      boxes,
      count,
    );
  }

  late final _pixman_region_init_rectsPtr = _lookup<
      ffi.NativeFunction<
          pixman_bool_t Function(
              ffi.Pointer<pixman_region16_t>,
              ffi.Pointer<pixman_box16_t>,
              ffi.Int)>>('pixman_region_init_rects');
  late final _pixman_region_init_rects =
      _pixman_region_init_rectsPtr.asFunction<
          int Function(ffi.Pointer<pixman_region16_t>,
              ffi.Pointer<pixman_box16_t>, int)>();

  void pixman_region_init_with_extents(
    ffi.Pointer<pixman_region16_t> region,
    ffi.Pointer<pixman_box16_t> extents,
  ) {
    return _pixman_region_init_with_extents(
      region,
      extents,
    );
  }

  late final _pixman_region_init_with_extentsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<pixman_region16_t>,
              ffi.Pointer<pixman_box16_t>)>>('pixman_region_init_with_extents');
  late final _pixman_region_init_with_extents =
      _pixman_region_init_with_extentsPtr.asFunction<
          void Function(
              ffi.Pointer<pixman_region16_t>, ffi.Pointer<pixman_box16_t>)>();

  void pixman_region_init_from_image(
    ffi.Pointer<pixman_region16_t> region,
    ffi.Pointer<pixman_image_t> image,
  ) {
    return _pixman_region_init_from_image(
      region,
      image,
    );
  }

  late final _pixman_region_init_from_imagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<pixman_region16_t>,
              ffi.Pointer<pixman_image_t>)>>('pixman_region_init_from_image');
  late final _pixman_region_init_from_image =
      _pixman_region_init_from_imagePtr.asFunction<
          void Function(
              ffi.Pointer<pixman_region16_t>, ffi.Pointer<pixman_image_t>)>();

  void pixman_region_fini(
    ffi.Pointer<pixman_region16_t> region,
  ) {
    return _pixman_region_fini(
      region,
    );
  }

  late final _pixman_region_finiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<pixman_region16_t>)>>('pixman_region_fini');
  late final _pixman_region_fini = _pixman_region_finiPtr
      .asFunction<void Function(ffi.Pointer<pixman_region16_t>)>();

  void pixman_region_translate(
    ffi.Pointer<pixman_region16_t> region,
    int x,
    int y,
  ) {
    return _pixman_region_translate(
      region,
      x,
      y,
    );
  }

  late final _pixman_region_translatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<pixman_region16_t>, ffi.Int,
              ffi.Int)>>('pixman_region_translate');
  late final _pixman_region_translate = _pixman_region_translatePtr
      .asFunction<void Function(ffi.Pointer<pixman_region16_t>, int, int)>();

  int pixman_region_copy(
    ffi.Pointer<pixman_region16_t> dest,
    ffi.Pointer<pixman_region16_t> source,
  ) {
    return _pixman_region_copy(
      dest,
      source,
    );
  }

  late final _pixman_region_copyPtr = _lookup<
      ffi.NativeFunction<
          pixman_bool_t Function(ffi.Pointer<pixman_region16_t>,
              ffi.Pointer<pixman_region16_t>)>>('pixman_region_copy');
  late final _pixman_region_copy = _pixman_region_copyPtr.asFunction<
      int Function(
          ffi.Pointer<pixman_region16_t>, ffi.Pointer<pixman_region16_t>)>();

  int pixman_region_intersect(
    ffi.Pointer<pixman_region16_t> new_reg,
    ffi.Pointer<pixman_region16_t> reg1,
    ffi.Pointer<pixman_region16_t> reg2,
  ) {
    return _pixman_region_intersect(
      new_reg,
      reg1,
      reg2,
    );
  }

  late final _pixman_region_intersectPtr = _lookup<
      ffi.NativeFunction<
          pixman_bool_t Function(
              ffi.Pointer<pixman_region16_t>,
              ffi.Pointer<pixman_region16_t>,
              ffi.Pointer<pixman_region16_t>)>>('pixman_region_intersect');
  late final _pixman_region_intersect = _pixman_region_intersectPtr.asFunction<
      int Function(ffi.Pointer<pixman_region16_t>,
          ffi.Pointer<pixman_region16_t>, ffi.Pointer<pixman_region16_t>)>();

  int pixman_region_union(
    ffi.Pointer<pixman_region16_t> new_reg,
    ffi.Pointer<pixman_region16_t> reg1,
    ffi.Pointer<pixman_region16_t> reg2,
  ) {
    return _pixman_region_union(
      new_reg,
      reg1,
      reg2,
    );
  }

  late final _pixman_region_unionPtr = _lookup<
      ffi.NativeFunction<
          pixman_bool_t Function(
              ffi.Pointer<pixman_region16_t>,
              ffi.Pointer<pixman_region16_t>,
              ffi.Pointer<pixman_region16_t>)>>('pixman_region_union');
  late final _pixman_region_union = _pixman_region_unionPtr.asFunction<
      int Function(ffi.Pointer<pixman_region16_t>,
          ffi.Pointer<pixman_region16_t>, ffi.Pointer<pixman_region16_t>)>();

  int pixman_region_union_rect(
    ffi.Pointer<pixman_region16_t> dest,
    ffi.Pointer<pixman_region16_t> source,
    int x,
    int y,
    int width,
    int height,
  ) {
    return _pixman_region_union_rect(
      dest,
      source,
      x,
      y,
      width,
      height,
    );
  }

  late final _pixman_region_union_rectPtr = _lookup<
      ffi.NativeFunction<
          pixman_bool_t Function(
              ffi.Pointer<pixman_region16_t>,
              ffi.Pointer<pixman_region16_t>,
              ffi.Int,
              ffi.Int,
              ffi.UnsignedInt,
              ffi.UnsignedInt)>>('pixman_region_union_rect');
  late final _pixman_region_union_rect =
      _pixman_region_union_rectPtr.asFunction<
          int Function(ffi.Pointer<pixman_region16_t>,
              ffi.Pointer<pixman_region16_t>, int, int, int, int)>();

  int pixman_region_intersect_rect(
    ffi.Pointer<pixman_region16_t> dest,
    ffi.Pointer<pixman_region16_t> source,
    int x,
    int y,
    int width,
    int height,
  ) {
    return _pixman_region_intersect_rect(
      dest,
      source,
      x,
      y,
      width,
      height,
    );
  }

  late final _pixman_region_intersect_rectPtr = _lookup<
      ffi.NativeFunction<
          pixman_bool_t Function(
              ffi.Pointer<pixman_region16_t>,
              ffi.Pointer<pixman_region16_t>,
              ffi.Int,
              ffi.Int,
              ffi.UnsignedInt,
              ffi.UnsignedInt)>>('pixman_region_intersect_rect');
  late final _pixman_region_intersect_rect =
      _pixman_region_intersect_rectPtr.asFunction<
          int Function(ffi.Pointer<pixman_region16_t>,
              ffi.Pointer<pixman_region16_t>, int, int, int, int)>();

  int pixman_region_subtract(
    ffi.Pointer<pixman_region16_t> reg_d,
    ffi.Pointer<pixman_region16_t> reg_m,
    ffi.Pointer<pixman_region16_t> reg_s,
  ) {
    return _pixman_region_subtract(
      reg_d,
      reg_m,
      reg_s,
    );
  }

  late final _pixman_region_subtractPtr = _lookup<
      ffi.NativeFunction<
          pixman_bool_t Function(
              ffi.Pointer<pixman_region16_t>,
              ffi.Pointer<pixman_region16_t>,
              ffi.Pointer<pixman_region16_t>)>>('pixman_region_subtract');
  late final _pixman_region_subtract = _pixman_region_subtractPtr.asFunction<
      int Function(ffi.Pointer<pixman_region16_t>,
          ffi.Pointer<pixman_region16_t>, ffi.Pointer<pixman_region16_t>)>();

  int pixman_region_inverse(
    ffi.Pointer<pixman_region16_t> new_reg,
    ffi.Pointer<pixman_region16_t> reg1,
    ffi.Pointer<pixman_box16_t> inv_rect,
  ) {
    return _pixman_region_inverse(
      new_reg,
      reg1,
      inv_rect,
    );
  }

  late final _pixman_region_inversePtr = _lookup<
      ffi.NativeFunction<
          pixman_bool_t Function(
              ffi.Pointer<pixman_region16_t>,
              ffi.Pointer<pixman_region16_t>,
              ffi.Pointer<pixman_box16_t>)>>('pixman_region_inverse');
  late final _pixman_region_inverse = _pixman_region_inversePtr.asFunction<
      int Function(ffi.Pointer<pixman_region16_t>,
          ffi.Pointer<pixman_region16_t>, ffi.Pointer<pixman_box16_t>)>();

  int pixman_region_contains_point(
    ffi.Pointer<pixman_region16_t> region,
    int x,
    int y,
    ffi.Pointer<pixman_box16_t> box,
  ) {
    return _pixman_region_contains_point(
      region,
      x,
      y,
      box,
    );
  }

  late final _pixman_region_contains_pointPtr = _lookup<
      ffi.NativeFunction<
          pixman_bool_t Function(
              ffi.Pointer<pixman_region16_t>,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<pixman_box16_t>)>>('pixman_region_contains_point');
  late final _pixman_region_contains_point =
      _pixman_region_contains_pointPtr.asFunction<
          int Function(ffi.Pointer<pixman_region16_t>, int, int,
              ffi.Pointer<pixman_box16_t>)>();

  int pixman_region_contains_rectangle(
    ffi.Pointer<pixman_region16_t> region,
    ffi.Pointer<pixman_box16_t> prect,
  ) {
    return _pixman_region_contains_rectangle(
      region,
      prect,
    );
  }

  late final _pixman_region_contains_rectanglePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<pixman_region16_t>,
                  ffi.Pointer<pixman_box16_t>)>>(
      'pixman_region_contains_rectangle');
  late final _pixman_region_contains_rectangle =
      _pixman_region_contains_rectanglePtr.asFunction<
          int Function(
              ffi.Pointer<pixman_region16_t>, ffi.Pointer<pixman_box16_t>)>();

  int pixman_region_not_empty(
    ffi.Pointer<pixman_region16_t> region,
  ) {
    return _pixman_region_not_empty(
      region,
    );
  }

  late final _pixman_region_not_emptyPtr = _lookup<
      ffi.NativeFunction<
          pixman_bool_t Function(
              ffi.Pointer<pixman_region16_t>)>>('pixman_region_not_empty');
  late final _pixman_region_not_empty = _pixman_region_not_emptyPtr
      .asFunction<int Function(ffi.Pointer<pixman_region16_t>)>();

  ffi.Pointer<pixman_box16_t> pixman_region_extents(
    ffi.Pointer<pixman_region16_t> region,
  ) {
    return _pixman_region_extents(
      region,
    );
  }

  late final _pixman_region_extentsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pixman_box16_t> Function(
              ffi.Pointer<pixman_region16_t>)>>('pixman_region_extents');
  late final _pixman_region_extents = _pixman_region_extentsPtr.asFunction<
      ffi.Pointer<pixman_box16_t> Function(ffi.Pointer<pixman_region16_t>)>();

  int pixman_region_n_rects(
    ffi.Pointer<pixman_region16_t> region,
  ) {
    return _pixman_region_n_rects(
      region,
    );
  }

  late final _pixman_region_n_rectsPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pixman_region16_t>)>>(
      'pixman_region_n_rects');
  late final _pixman_region_n_rects = _pixman_region_n_rectsPtr
      .asFunction<int Function(ffi.Pointer<pixman_region16_t>)>();

  ffi.Pointer<pixman_box16_t> pixman_region_rectangles(
    ffi.Pointer<pixman_region16_t> region,
    ffi.Pointer<ffi.Int> n_rects,
  ) {
    return _pixman_region_rectangles(
      region,
      n_rects,
    );
  }

  late final _pixman_region_rectanglesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pixman_box16_t> Function(ffi.Pointer<pixman_region16_t>,
              ffi.Pointer<ffi.Int>)>>('pixman_region_rectangles');
  late final _pixman_region_rectangles =
      _pixman_region_rectanglesPtr.asFunction<
          ffi.Pointer<pixman_box16_t> Function(
              ffi.Pointer<pixman_region16_t>, ffi.Pointer<ffi.Int>)>();

  int pixman_region_equal(
    ffi.Pointer<pixman_region16_t> region1,
    ffi.Pointer<pixman_region16_t> region2,
  ) {
    return _pixman_region_equal(
      region1,
      region2,
    );
  }

  late final _pixman_region_equalPtr = _lookup<
      ffi.NativeFunction<
          pixman_bool_t Function(ffi.Pointer<pixman_region16_t>,
              ffi.Pointer<pixman_region16_t>)>>('pixman_region_equal');
  late final _pixman_region_equal = _pixman_region_equalPtr.asFunction<
      int Function(
          ffi.Pointer<pixman_region16_t>, ffi.Pointer<pixman_region16_t>)>();

  int pixman_region_selfcheck(
    ffi.Pointer<pixman_region16_t> region,
  ) {
    return _pixman_region_selfcheck(
      region,
    );
  }

  late final _pixman_region_selfcheckPtr = _lookup<
      ffi.NativeFunction<
          pixman_bool_t Function(
              ffi.Pointer<pixman_region16_t>)>>('pixman_region_selfcheck');
  late final _pixman_region_selfcheck = _pixman_region_selfcheckPtr
      .asFunction<int Function(ffi.Pointer<pixman_region16_t>)>();

  void pixman_region_reset(
    ffi.Pointer<pixman_region16_t> region,
    ffi.Pointer<pixman_box16_t> box,
  ) {
    return _pixman_region_reset(
      region,
      box,
    );
  }

  late final _pixman_region_resetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<pixman_region16_t>,
              ffi.Pointer<pixman_box16_t>)>>('pixman_region_reset');
  late final _pixman_region_reset = _pixman_region_resetPtr.asFunction<
      void Function(
          ffi.Pointer<pixman_region16_t>, ffi.Pointer<pixman_box16_t>)>();

  void pixman_region_clear(
    ffi.Pointer<pixman_region16_t> region,
  ) {
    return _pixman_region_clear(
      region,
    );
  }

  late final _pixman_region_clearPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<pixman_region16_t>)>>('pixman_region_clear');
  late final _pixman_region_clear = _pixman_region_clearPtr
      .asFunction<void Function(ffi.Pointer<pixman_region16_t>)>();

  void pixman_region32_init(
    ffi.Pointer<pixman_region32_t> region,
  ) {
    return _pixman_region32_init(
      region,
    );
  }

  late final _pixman_region32_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<pixman_region32_t>)>>('pixman_region32_init');
  late final _pixman_region32_init = _pixman_region32_initPtr
      .asFunction<void Function(ffi.Pointer<pixman_region32_t>)>();

  void pixman_region32_init_rect(
    ffi.Pointer<pixman_region32_t> region,
    int x,
    int y,
    int width,
    int height,
  ) {
    return _pixman_region32_init_rect(
      region,
      x,
      y,
      width,
      height,
    );
  }

  late final _pixman_region32_init_rectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<pixman_region32_t>, ffi.Int, ffi.Int,
              ffi.UnsignedInt, ffi.UnsignedInt)>>('pixman_region32_init_rect');
  late final _pixman_region32_init_rect =
      _pixman_region32_init_rectPtr.asFunction<
          void Function(ffi.Pointer<pixman_region32_t>, int, int, int, int)>();

  int pixman_region32_init_rects(
    ffi.Pointer<pixman_region32_t> region,
    ffi.Pointer<pixman_box32_t> boxes,
    int count,
  ) {
    return _pixman_region32_init_rects(
      region,
      boxes,
      count,
    );
  }

  late final _pixman_region32_init_rectsPtr = _lookup<
      ffi.NativeFunction<
          pixman_bool_t Function(
              ffi.Pointer<pixman_region32_t>,
              ffi.Pointer<pixman_box32_t>,
              ffi.Int)>>('pixman_region32_init_rects');
  late final _pixman_region32_init_rects =
      _pixman_region32_init_rectsPtr.asFunction<
          int Function(ffi.Pointer<pixman_region32_t>,
              ffi.Pointer<pixman_box32_t>, int)>();

  void pixman_region32_init_with_extents(
    ffi.Pointer<pixman_region32_t> region,
    ffi.Pointer<pixman_box32_t> extents,
  ) {
    return _pixman_region32_init_with_extents(
      region,
      extents,
    );
  }

  late final _pixman_region32_init_with_extentsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<pixman_region32_t>,
                  ffi.Pointer<pixman_box32_t>)>>(
      'pixman_region32_init_with_extents');
  late final _pixman_region32_init_with_extents =
      _pixman_region32_init_with_extentsPtr.asFunction<
          void Function(
              ffi.Pointer<pixman_region32_t>, ffi.Pointer<pixman_box32_t>)>();

  void pixman_region32_init_from_image(
    ffi.Pointer<pixman_region32_t> region,
    ffi.Pointer<pixman_image_t> image,
  ) {
    return _pixman_region32_init_from_image(
      region,
      image,
    );
  }

  late final _pixman_region32_init_from_imagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<pixman_region32_t>,
              ffi.Pointer<pixman_image_t>)>>('pixman_region32_init_from_image');
  late final _pixman_region32_init_from_image =
      _pixman_region32_init_from_imagePtr.asFunction<
          void Function(
              ffi.Pointer<pixman_region32_t>, ffi.Pointer<pixman_image_t>)>();

  void pixman_region32_fini(
    ffi.Pointer<pixman_region32_t> region,
  ) {
    return _pixman_region32_fini(
      region,
    );
  }

  late final _pixman_region32_finiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<pixman_region32_t>)>>('pixman_region32_fini');
  late final _pixman_region32_fini = _pixman_region32_finiPtr
      .asFunction<void Function(ffi.Pointer<pixman_region32_t>)>();

  void pixman_region32_translate(
    ffi.Pointer<pixman_region32_t> region,
    int x,
    int y,
  ) {
    return _pixman_region32_translate(
      region,
      x,
      y,
    );
  }

  late final _pixman_region32_translatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<pixman_region32_t>, ffi.Int,
              ffi.Int)>>('pixman_region32_translate');
  late final _pixman_region32_translate = _pixman_region32_translatePtr
      .asFunction<void Function(ffi.Pointer<pixman_region32_t>, int, int)>();

  int pixman_region32_copy(
    ffi.Pointer<pixman_region32_t> dest,
    ffi.Pointer<pixman_region32_t> source,
  ) {
    return _pixman_region32_copy(
      dest,
      source,
    );
  }

  late final _pixman_region32_copyPtr = _lookup<
      ffi.NativeFunction<
          pixman_bool_t Function(ffi.Pointer<pixman_region32_t>,
              ffi.Pointer<pixman_region32_t>)>>('pixman_region32_copy');
  late final _pixman_region32_copy = _pixman_region32_copyPtr.asFunction<
      int Function(
          ffi.Pointer<pixman_region32_t>, ffi.Pointer<pixman_region32_t>)>();

  int pixman_region32_intersect(
    ffi.Pointer<pixman_region32_t> new_reg,
    ffi.Pointer<pixman_region32_t> reg1,
    ffi.Pointer<pixman_region32_t> reg2,
  ) {
    return _pixman_region32_intersect(
      new_reg,
      reg1,
      reg2,
    );
  }

  late final _pixman_region32_intersectPtr = _lookup<
      ffi.NativeFunction<
          pixman_bool_t Function(
              ffi.Pointer<pixman_region32_t>,
              ffi.Pointer<pixman_region32_t>,
              ffi.Pointer<pixman_region32_t>)>>('pixman_region32_intersect');
  late final _pixman_region32_intersect =
      _pixman_region32_intersectPtr.asFunction<
          int Function(
              ffi.Pointer<pixman_region32_t>,
              ffi.Pointer<pixman_region32_t>,
              ffi.Pointer<pixman_region32_t>)>();

  int pixman_region32_union(
    ffi.Pointer<pixman_region32_t> new_reg,
    ffi.Pointer<pixman_region32_t> reg1,
    ffi.Pointer<pixman_region32_t> reg2,
  ) {
    return _pixman_region32_union(
      new_reg,
      reg1,
      reg2,
    );
  }

  late final _pixman_region32_unionPtr = _lookup<
      ffi.NativeFunction<
          pixman_bool_t Function(
              ffi.Pointer<pixman_region32_t>,
              ffi.Pointer<pixman_region32_t>,
              ffi.Pointer<pixman_region32_t>)>>('pixman_region32_union');
  late final _pixman_region32_union = _pixman_region32_unionPtr.asFunction<
      int Function(ffi.Pointer<pixman_region32_t>,
          ffi.Pointer<pixman_region32_t>, ffi.Pointer<pixman_region32_t>)>();

  int pixman_region32_intersect_rect(
    ffi.Pointer<pixman_region32_t> dest,
    ffi.Pointer<pixman_region32_t> source,
    int x,
    int y,
    int width,
    int height,
  ) {
    return _pixman_region32_intersect_rect(
      dest,
      source,
      x,
      y,
      width,
      height,
    );
  }

  late final _pixman_region32_intersect_rectPtr = _lookup<
      ffi.NativeFunction<
          pixman_bool_t Function(
              ffi.Pointer<pixman_region32_t>,
              ffi.Pointer<pixman_region32_t>,
              ffi.Int,
              ffi.Int,
              ffi.UnsignedInt,
              ffi.UnsignedInt)>>('pixman_region32_intersect_rect');
  late final _pixman_region32_intersect_rect =
      _pixman_region32_intersect_rectPtr.asFunction<
          int Function(ffi.Pointer<pixman_region32_t>,
              ffi.Pointer<pixman_region32_t>, int, int, int, int)>();

  int pixman_region32_union_rect(
    ffi.Pointer<pixman_region32_t> dest,
    ffi.Pointer<pixman_region32_t> source,
    int x,
    int y,
    int width,
    int height,
  ) {
    return _pixman_region32_union_rect(
      dest,
      source,
      x,
      y,
      width,
      height,
    );
  }

  late final _pixman_region32_union_rectPtr = _lookup<
      ffi.NativeFunction<
          pixman_bool_t Function(
              ffi.Pointer<pixman_region32_t>,
              ffi.Pointer<pixman_region32_t>,
              ffi.Int,
              ffi.Int,
              ffi.UnsignedInt,
              ffi.UnsignedInt)>>('pixman_region32_union_rect');
  late final _pixman_region32_union_rect =
      _pixman_region32_union_rectPtr.asFunction<
          int Function(ffi.Pointer<pixman_region32_t>,
              ffi.Pointer<pixman_region32_t>, int, int, int, int)>();

  int pixman_region32_subtract(
    ffi.Pointer<pixman_region32_t> reg_d,
    ffi.Pointer<pixman_region32_t> reg_m,
    ffi.Pointer<pixman_region32_t> reg_s,
  ) {
    return _pixman_region32_subtract(
      reg_d,
      reg_m,
      reg_s,
    );
  }

  late final _pixman_region32_subtractPtr = _lookup<
      ffi.NativeFunction<
          pixman_bool_t Function(
              ffi.Pointer<pixman_region32_t>,
              ffi.Pointer<pixman_region32_t>,
              ffi.Pointer<pixman_region32_t>)>>('pixman_region32_subtract');
  late final _pixman_region32_subtract =
      _pixman_region32_subtractPtr.asFunction<
          int Function(
              ffi.Pointer<pixman_region32_t>,
              ffi.Pointer<pixman_region32_t>,
              ffi.Pointer<pixman_region32_t>)>();

  int pixman_region32_inverse(
    ffi.Pointer<pixman_region32_t> new_reg,
    ffi.Pointer<pixman_region32_t> reg1,
    ffi.Pointer<pixman_box32_t> inv_rect,
  ) {
    return _pixman_region32_inverse(
      new_reg,
      reg1,
      inv_rect,
    );
  }

  late final _pixman_region32_inversePtr = _lookup<
      ffi.NativeFunction<
          pixman_bool_t Function(
              ffi.Pointer<pixman_region32_t>,
              ffi.Pointer<pixman_region32_t>,
              ffi.Pointer<pixman_box32_t>)>>('pixman_region32_inverse');
  late final _pixman_region32_inverse = _pixman_region32_inversePtr.asFunction<
      int Function(ffi.Pointer<pixman_region32_t>,
          ffi.Pointer<pixman_region32_t>, ffi.Pointer<pixman_box32_t>)>();

  int pixman_region32_contains_point(
    ffi.Pointer<pixman_region32_t> region,
    int x,
    int y,
    ffi.Pointer<pixman_box32_t> box,
  ) {
    return _pixman_region32_contains_point(
      region,
      x,
      y,
      box,
    );
  }

  late final _pixman_region32_contains_pointPtr = _lookup<
      ffi.NativeFunction<
          pixman_bool_t Function(
              ffi.Pointer<pixman_region32_t>,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<pixman_box32_t>)>>('pixman_region32_contains_point');
  late final _pixman_region32_contains_point =
      _pixman_region32_contains_pointPtr.asFunction<
          int Function(ffi.Pointer<pixman_region32_t>, int, int,
              ffi.Pointer<pixman_box32_t>)>();

  int pixman_region32_contains_rectangle(
    ffi.Pointer<pixman_region32_t> region,
    ffi.Pointer<pixman_box32_t> prect,
  ) {
    return _pixman_region32_contains_rectangle(
      region,
      prect,
    );
  }

  late final _pixman_region32_contains_rectanglePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<pixman_region32_t>,
                  ffi.Pointer<pixman_box32_t>)>>(
      'pixman_region32_contains_rectangle');
  late final _pixman_region32_contains_rectangle =
      _pixman_region32_contains_rectanglePtr.asFunction<
          int Function(
              ffi.Pointer<pixman_region32_t>, ffi.Pointer<pixman_box32_t>)>();

  int pixman_region32_not_empty(
    ffi.Pointer<pixman_region32_t> region,
  ) {
    return _pixman_region32_not_empty(
      region,
    );
  }

  late final _pixman_region32_not_emptyPtr = _lookup<
      ffi.NativeFunction<
          pixman_bool_t Function(
              ffi.Pointer<pixman_region32_t>)>>('pixman_region32_not_empty');
  late final _pixman_region32_not_empty = _pixman_region32_not_emptyPtr
      .asFunction<int Function(ffi.Pointer<pixman_region32_t>)>();

  ffi.Pointer<pixman_box32_t> pixman_region32_extents(
    ffi.Pointer<pixman_region32_t> region,
  ) {
    return _pixman_region32_extents(
      region,
    );
  }

  late final _pixman_region32_extentsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pixman_box32_t> Function(
              ffi.Pointer<pixman_region32_t>)>>('pixman_region32_extents');
  late final _pixman_region32_extents = _pixman_region32_extentsPtr.asFunction<
      ffi.Pointer<pixman_box32_t> Function(ffi.Pointer<pixman_region32_t>)>();

  int pixman_region32_n_rects(
    ffi.Pointer<pixman_region32_t> region,
  ) {
    return _pixman_region32_n_rects(
      region,
    );
  }

  late final _pixman_region32_n_rectsPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pixman_region32_t>)>>(
      'pixman_region32_n_rects');
  late final _pixman_region32_n_rects = _pixman_region32_n_rectsPtr
      .asFunction<int Function(ffi.Pointer<pixman_region32_t>)>();

  ffi.Pointer<pixman_box32_t> pixman_region32_rectangles(
    ffi.Pointer<pixman_region32_t> region,
    ffi.Pointer<ffi.Int> n_rects,
  ) {
    return _pixman_region32_rectangles(
      region,
      n_rects,
    );
  }

  late final _pixman_region32_rectanglesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pixman_box32_t> Function(ffi.Pointer<pixman_region32_t>,
              ffi.Pointer<ffi.Int>)>>('pixman_region32_rectangles');
  late final _pixman_region32_rectangles =
      _pixman_region32_rectanglesPtr.asFunction<
          ffi.Pointer<pixman_box32_t> Function(
              ffi.Pointer<pixman_region32_t>, ffi.Pointer<ffi.Int>)>();

  int pixman_region32_equal(
    ffi.Pointer<pixman_region32_t> region1,
    ffi.Pointer<pixman_region32_t> region2,
  ) {
    return _pixman_region32_equal(
      region1,
      region2,
    );
  }

  late final _pixman_region32_equalPtr = _lookup<
      ffi.NativeFunction<
          pixman_bool_t Function(ffi.Pointer<pixman_region32_t>,
              ffi.Pointer<pixman_region32_t>)>>('pixman_region32_equal');
  late final _pixman_region32_equal = _pixman_region32_equalPtr.asFunction<
      int Function(
          ffi.Pointer<pixman_region32_t>, ffi.Pointer<pixman_region32_t>)>();

  int pixman_region32_selfcheck(
    ffi.Pointer<pixman_region32_t> region,
  ) {
    return _pixman_region32_selfcheck(
      region,
    );
  }

  late final _pixman_region32_selfcheckPtr = _lookup<
      ffi.NativeFunction<
          pixman_bool_t Function(
              ffi.Pointer<pixman_region32_t>)>>('pixman_region32_selfcheck');
  late final _pixman_region32_selfcheck = _pixman_region32_selfcheckPtr
      .asFunction<int Function(ffi.Pointer<pixman_region32_t>)>();

  void pixman_region32_reset(
    ffi.Pointer<pixman_region32_t> region,
    ffi.Pointer<pixman_box32_t> box,
  ) {
    return _pixman_region32_reset(
      region,
      box,
    );
  }

  late final _pixman_region32_resetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<pixman_region32_t>,
              ffi.Pointer<pixman_box32_t>)>>('pixman_region32_reset');
  late final _pixman_region32_reset = _pixman_region32_resetPtr.asFunction<
      void Function(
          ffi.Pointer<pixman_region32_t>, ffi.Pointer<pixman_box32_t>)>();

  void pixman_region32_clear(
    ffi.Pointer<pixman_region32_t> region,
  ) {
    return _pixman_region32_clear(
      region,
    );
  }

  late final _pixman_region32_clearPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<pixman_region32_t>)>>('pixman_region32_clear');
  late final _pixman_region32_clear = _pixman_region32_clearPtr
      .asFunction<void Function(ffi.Pointer<pixman_region32_t>)>();

  int pixman_blt(
    ffi.Pointer<ffi.Uint32> src_bits,
    ffi.Pointer<ffi.Uint32> dst_bits,
    int src_stride,
    int dst_stride,
    int src_bpp,
    int dst_bpp,
    int src_x,
    int src_y,
    int dest_x,
    int dest_y,
    int width,
    int height,
  ) {
    return _pixman_blt(
      src_bits,
      dst_bits,
      src_stride,
      dst_stride,
      src_bpp,
      dst_bpp,
      src_x,
      src_y,
      dest_x,
      dest_y,
      width,
      height,
    );
  }

  late final _pixman_bltPtr = _lookup<
      ffi.NativeFunction<
          pixman_bool_t Function(
              ffi.Pointer<ffi.Uint32>,
              ffi.Pointer<ffi.Uint32>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('pixman_blt');
  late final _pixman_blt = _pixman_bltPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint32>, ffi.Pointer<ffi.Uint32>, int, int,
          int, int, int, int, int, int, int, int)>();

  int pixman_fill(
    ffi.Pointer<ffi.Uint32> bits,
    int stride,
    int bpp,
    int x,
    int y,
    int width,
    int height,
    int _xor,
  ) {
    return _pixman_fill(
      bits,
      stride,
      bpp,
      x,
      y,
      width,
      height,
      _xor,
    );
  }

  late final _pixman_fillPtr = _lookup<
      ffi.NativeFunction<
          pixman_bool_t Function(ffi.Pointer<ffi.Uint32>, ffi.Int, ffi.Int,
              ffi.Int, ffi.Int, ffi.Int, ffi.Int, ffi.Uint32)>>('pixman_fill');
  late final _pixman_fill = _pixman_fillPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint32>, int, int, int, int, int, int, int)>();

  int pixman_version() {
    return _pixman_version();
  }

  late final _pixman_versionPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('pixman_version');
  late final _pixman_version = _pixman_versionPtr.asFunction<int Function()>();

  ffi.Pointer<ffi.Char> pixman_version_string() {
    return _pixman_version_string();
  }

  late final _pixman_version_stringPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'pixman_version_string');
  late final _pixman_version_string =
      _pixman_version_stringPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  int pixman_format_supported_destination(
    int format,
  ) {
    return _pixman_format_supported_destination(
      format,
    );
  }

  late final _pixman_format_supported_destinationPtr =
      _lookup<ffi.NativeFunction<pixman_bool_t Function(ffi.Int32)>>(
          'pixman_format_supported_destination');
  late final _pixman_format_supported_destination =
      _pixman_format_supported_destinationPtr.asFunction<int Function(int)>();

  int pixman_format_supported_source(
    int format,
  ) {
    return _pixman_format_supported_source(
      format,
    );
  }

  late final _pixman_format_supported_sourcePtr =
      _lookup<ffi.NativeFunction<pixman_bool_t Function(ffi.Int32)>>(
          'pixman_format_supported_source');
  late final _pixman_format_supported_source =
      _pixman_format_supported_sourcePtr.asFunction<int Function(int)>();

  ffi.Pointer<pixman_image_t> pixman_image_create_solid_fill(
    ffi.Pointer<pixman_color_t> color,
  ) {
    return _pixman_image_create_solid_fill(
      color,
    );
  }

  late final _pixman_image_create_solid_fillPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pixman_image_t> Function(
              ffi.Pointer<pixman_color_t>)>>('pixman_image_create_solid_fill');
  late final _pixman_image_create_solid_fill =
      _pixman_image_create_solid_fillPtr.asFunction<
          ffi.Pointer<pixman_image_t> Function(ffi.Pointer<pixman_color_t>)>();

  ffi.Pointer<pixman_image_t> pixman_image_create_linear_gradient(
    ffi.Pointer<pixman_point_fixed_t> p1,
    ffi.Pointer<pixman_point_fixed_t> p2,
    ffi.Pointer<pixman_gradient_stop_t> stops,
    int n_stops,
  ) {
    return _pixman_image_create_linear_gradient(
      p1,
      p2,
      stops,
      n_stops,
    );
  }

  late final _pixman_image_create_linear_gradientPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pixman_image_t> Function(
              ffi.Pointer<pixman_point_fixed_t>,
              ffi.Pointer<pixman_point_fixed_t>,
              ffi.Pointer<pixman_gradient_stop_t>,
              ffi.Int)>>('pixman_image_create_linear_gradient');
  late final _pixman_image_create_linear_gradient =
      _pixman_image_create_linear_gradientPtr.asFunction<
          ffi.Pointer<pixman_image_t> Function(
              ffi.Pointer<pixman_point_fixed_t>,
              ffi.Pointer<pixman_point_fixed_t>,
              ffi.Pointer<pixman_gradient_stop_t>,
              int)>();

  ffi.Pointer<pixman_image_t> pixman_image_create_radial_gradient(
    ffi.Pointer<pixman_point_fixed_t> inner,
    ffi.Pointer<pixman_point_fixed_t> outer,
    int inner_radius,
    int outer_radius,
    ffi.Pointer<pixman_gradient_stop_t> stops,
    int n_stops,
  ) {
    return _pixman_image_create_radial_gradient(
      inner,
      outer,
      inner_radius,
      outer_radius,
      stops,
      n_stops,
    );
  }

  late final _pixman_image_create_radial_gradientPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pixman_image_t> Function(
              ffi.Pointer<pixman_point_fixed_t>,
              ffi.Pointer<pixman_point_fixed_t>,
              pixman_fixed_t,
              pixman_fixed_t,
              ffi.Pointer<pixman_gradient_stop_t>,
              ffi.Int)>>('pixman_image_create_radial_gradient');
  late final _pixman_image_create_radial_gradient =
      _pixman_image_create_radial_gradientPtr.asFunction<
          ffi.Pointer<pixman_image_t> Function(
              ffi.Pointer<pixman_point_fixed_t>,
              ffi.Pointer<pixman_point_fixed_t>,
              int,
              int,
              ffi.Pointer<pixman_gradient_stop_t>,
              int)>();

  ffi.Pointer<pixman_image_t> pixman_image_create_conical_gradient(
    ffi.Pointer<pixman_point_fixed_t> center,
    int angle,
    ffi.Pointer<pixman_gradient_stop_t> stops,
    int n_stops,
  ) {
    return _pixman_image_create_conical_gradient(
      center,
      angle,
      stops,
      n_stops,
    );
  }

  late final _pixman_image_create_conical_gradientPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pixman_image_t> Function(
              ffi.Pointer<pixman_point_fixed_t>,
              pixman_fixed_t,
              ffi.Pointer<pixman_gradient_stop_t>,
              ffi.Int)>>('pixman_image_create_conical_gradient');
  late final _pixman_image_create_conical_gradient =
      _pixman_image_create_conical_gradientPtr.asFunction<
          ffi.Pointer<pixman_image_t> Function(
              ffi.Pointer<pixman_point_fixed_t>,
              int,
              ffi.Pointer<pixman_gradient_stop_t>,
              int)>();

  ffi.Pointer<pixman_image_t> pixman_image_create_bits(
    int format,
    int width,
    int height,
    ffi.Pointer<ffi.Uint32> bits,
    int rowstride_bytes,
  ) {
    return _pixman_image_create_bits(
      format,
      width,
      height,
      bits,
      rowstride_bytes,
    );
  }

  late final _pixman_image_create_bitsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pixman_image_t> Function(ffi.Int32, ffi.Int, ffi.Int,
              ffi.Pointer<ffi.Uint32>, ffi.Int)>>('pixman_image_create_bits');
  late final _pixman_image_create_bits =
      _pixman_image_create_bitsPtr.asFunction<
          ffi.Pointer<pixman_image_t> Function(
              int, int, int, ffi.Pointer<ffi.Uint32>, int)>();

  ffi.Pointer<pixman_image_t> pixman_image_create_bits_no_clear(
    int format,
    int width,
    int height,
    ffi.Pointer<ffi.Uint32> bits,
    int rowstride_bytes,
  ) {
    return _pixman_image_create_bits_no_clear(
      format,
      width,
      height,
      bits,
      rowstride_bytes,
    );
  }

  late final _pixman_image_create_bits_no_clearPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pixman_image_t> Function(
              ffi.Int32,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Uint32>,
              ffi.Int)>>('pixman_image_create_bits_no_clear');
  late final _pixman_image_create_bits_no_clear =
      _pixman_image_create_bits_no_clearPtr.asFunction<
          ffi.Pointer<pixman_image_t> Function(
              int, int, int, ffi.Pointer<ffi.Uint32>, int)>();

  ffi.Pointer<pixman_image_t> pixman_image_ref(
    ffi.Pointer<pixman_image_t> image,
  ) {
    return _pixman_image_ref(
      image,
    );
  }

  late final _pixman_image_refPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pixman_image_t> Function(
              ffi.Pointer<pixman_image_t>)>>('pixman_image_ref');
  late final _pixman_image_ref = _pixman_image_refPtr.asFunction<
      ffi.Pointer<pixman_image_t> Function(ffi.Pointer<pixman_image_t>)>();

  int pixman_image_unref(
    ffi.Pointer<pixman_image_t> image,
  ) {
    return _pixman_image_unref(
      image,
    );
  }

  late final _pixman_image_unrefPtr = _lookup<
      ffi.NativeFunction<
          pixman_bool_t Function(
              ffi.Pointer<pixman_image_t>)>>('pixman_image_unref');
  late final _pixman_image_unref = _pixman_image_unrefPtr
      .asFunction<int Function(ffi.Pointer<pixman_image_t>)>();

  void pixman_image_set_destroy_function(
    ffi.Pointer<pixman_image_t> image,
    pixman_image_destroy_func_t function,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _pixman_image_set_destroy_function(
      image,
      function,
      data,
    );
  }

  late final _pixman_image_set_destroy_functionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<pixman_image_t>,
              pixman_image_destroy_func_t,
              ffi.Pointer<ffi.Void>)>>('pixman_image_set_destroy_function');
  late final _pixman_image_set_destroy_function =
      _pixman_image_set_destroy_functionPtr.asFunction<
          void Function(ffi.Pointer<pixman_image_t>,
              pixman_image_destroy_func_t, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> pixman_image_get_destroy_data(
    ffi.Pointer<pixman_image_t> image,
  ) {
    return _pixman_image_get_destroy_data(
      image,
    );
  }

  late final _pixman_image_get_destroy_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<pixman_image_t>)>>('pixman_image_get_destroy_data');
  late final _pixman_image_get_destroy_data =
      _pixman_image_get_destroy_dataPtr.asFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<pixman_image_t>)>();

  int pixman_image_set_clip_region(
    ffi.Pointer<pixman_image_t> image,
    ffi.Pointer<pixman_region16_t> region,
  ) {
    return _pixman_image_set_clip_region(
      image,
      region,
    );
  }

  late final _pixman_image_set_clip_regionPtr = _lookup<
      ffi.NativeFunction<
          pixman_bool_t Function(ffi.Pointer<pixman_image_t>,
              ffi.Pointer<pixman_region16_t>)>>('pixman_image_set_clip_region');
  late final _pixman_image_set_clip_region =
      _pixman_image_set_clip_regionPtr.asFunction<
          int Function(
              ffi.Pointer<pixman_image_t>, ffi.Pointer<pixman_region16_t>)>();

  int pixman_image_set_clip_region32(
    ffi.Pointer<pixman_image_t> image,
    ffi.Pointer<pixman_region32_t> region,
  ) {
    return _pixman_image_set_clip_region32(
      image,
      region,
    );
  }

  late final _pixman_image_set_clip_region32Ptr = _lookup<
          ffi.NativeFunction<
              pixman_bool_t Function(ffi.Pointer<pixman_image_t>,
                  ffi.Pointer<pixman_region32_t>)>>(
      'pixman_image_set_clip_region32');
  late final _pixman_image_set_clip_region32 =
      _pixman_image_set_clip_region32Ptr.asFunction<
          int Function(
              ffi.Pointer<pixman_image_t>, ffi.Pointer<pixman_region32_t>)>();

  void pixman_image_set_has_client_clip(
    ffi.Pointer<pixman_image_t> image,
    int clien_clip,
  ) {
    return _pixman_image_set_has_client_clip(
      image,
      clien_clip,
    );
  }

  late final _pixman_image_set_has_client_clipPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<pixman_image_t>,
              pixman_bool_t)>>('pixman_image_set_has_client_clip');
  late final _pixman_image_set_has_client_clip =
      _pixman_image_set_has_client_clipPtr
          .asFunction<void Function(ffi.Pointer<pixman_image_t>, int)>();

  int pixman_image_set_transform(
    ffi.Pointer<pixman_image_t> image,
    ffi.Pointer<pixman_transform_t> transform,
  ) {
    return _pixman_image_set_transform(
      image,
      transform,
    );
  }

  late final _pixman_image_set_transformPtr = _lookup<
      ffi.NativeFunction<
          pixman_bool_t Function(ffi.Pointer<pixman_image_t>,
              ffi.Pointer<pixman_transform_t>)>>('pixman_image_set_transform');
  late final _pixman_image_set_transform =
      _pixman_image_set_transformPtr.asFunction<
          int Function(
              ffi.Pointer<pixman_image_t>, ffi.Pointer<pixman_transform_t>)>();

  void pixman_image_set_repeat(
    ffi.Pointer<pixman_image_t> image,
    int repeat,
  ) {
    return _pixman_image_set_repeat(
      image,
      repeat,
    );
  }

  late final _pixman_image_set_repeatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<pixman_image_t>,
              ffi.Int32)>>('pixman_image_set_repeat');
  late final _pixman_image_set_repeat = _pixman_image_set_repeatPtr
      .asFunction<void Function(ffi.Pointer<pixman_image_t>, int)>();

  void pixman_image_set_dither(
    ffi.Pointer<pixman_image_t> image,
    int dither,
  ) {
    return _pixman_image_set_dither(
      image,
      dither,
    );
  }

  late final _pixman_image_set_ditherPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<pixman_image_t>,
              ffi.Int32)>>('pixman_image_set_dither');
  late final _pixman_image_set_dither = _pixman_image_set_ditherPtr
      .asFunction<void Function(ffi.Pointer<pixman_image_t>, int)>();

  void pixman_image_set_dither_offset(
    ffi.Pointer<pixman_image_t> image,
    int offset_x,
    int offset_y,
  ) {
    return _pixman_image_set_dither_offset(
      image,
      offset_x,
      offset_y,
    );
  }

  late final _pixman_image_set_dither_offsetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<pixman_image_t>, ffi.Int,
              ffi.Int)>>('pixman_image_set_dither_offset');
  late final _pixman_image_set_dither_offset =
      _pixman_image_set_dither_offsetPtr
          .asFunction<void Function(ffi.Pointer<pixman_image_t>, int, int)>();

  int pixman_image_set_filter(
    ffi.Pointer<pixman_image_t> image,
    int filter,
    ffi.Pointer<pixman_fixed_t> filter_params,
    int n_filter_params,
  ) {
    return _pixman_image_set_filter(
      image,
      filter,
      filter_params,
      n_filter_params,
    );
  }

  late final _pixman_image_set_filterPtr = _lookup<
      ffi.NativeFunction<
          pixman_bool_t Function(
              ffi.Pointer<pixman_image_t>,
              ffi.Int32,
              ffi.Pointer<pixman_fixed_t>,
              ffi.Int)>>('pixman_image_set_filter');
  late final _pixman_image_set_filter = _pixman_image_set_filterPtr.asFunction<
      int Function(ffi.Pointer<pixman_image_t>, int,
          ffi.Pointer<pixman_fixed_t>, int)>();

  void pixman_image_set_source_clipping(
    ffi.Pointer<pixman_image_t> image,
    int source_clipping,
  ) {
    return _pixman_image_set_source_clipping(
      image,
      source_clipping,
    );
  }

  late final _pixman_image_set_source_clippingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<pixman_image_t>,
              pixman_bool_t)>>('pixman_image_set_source_clipping');
  late final _pixman_image_set_source_clipping =
      _pixman_image_set_source_clippingPtr
          .asFunction<void Function(ffi.Pointer<pixman_image_t>, int)>();

  void pixman_image_set_alpha_map(
    ffi.Pointer<pixman_image_t> image,
    ffi.Pointer<pixman_image_t> alpha_map,
    int x,
    int y,
  ) {
    return _pixman_image_set_alpha_map(
      image,
      alpha_map,
      x,
      y,
    );
  }

  late final _pixman_image_set_alpha_mapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<pixman_image_t>,
              ffi.Pointer<pixman_image_t>,
              ffi.Int16,
              ffi.Int16)>>('pixman_image_set_alpha_map');
  late final _pixman_image_set_alpha_map =
      _pixman_image_set_alpha_mapPtr.asFunction<
          void Function(ffi.Pointer<pixman_image_t>,
              ffi.Pointer<pixman_image_t>, int, int)>();

  void pixman_image_set_component_alpha(
    ffi.Pointer<pixman_image_t> image,
    int component_alpha,
  ) {
    return _pixman_image_set_component_alpha(
      image,
      component_alpha,
    );
  }

  late final _pixman_image_set_component_alphaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<pixman_image_t>,
              pixman_bool_t)>>('pixman_image_set_component_alpha');
  late final _pixman_image_set_component_alpha =
      _pixman_image_set_component_alphaPtr
          .asFunction<void Function(ffi.Pointer<pixman_image_t>, int)>();

  int pixman_image_get_component_alpha(
    ffi.Pointer<pixman_image_t> image,
  ) {
    return _pixman_image_get_component_alpha(
      image,
    );
  }

  late final _pixman_image_get_component_alphaPtr = _lookup<
          ffi.NativeFunction<
              pixman_bool_t Function(ffi.Pointer<pixman_image_t>)>>(
      'pixman_image_get_component_alpha');
  late final _pixman_image_get_component_alpha =
      _pixman_image_get_component_alphaPtr
          .asFunction<int Function(ffi.Pointer<pixman_image_t>)>();

  void pixman_image_set_accessors(
    ffi.Pointer<pixman_image_t> image,
    pixman_read_memory_func_t read_func,
    pixman_write_memory_func_t write_func,
  ) {
    return _pixman_image_set_accessors(
      image,
      read_func,
      write_func,
    );
  }

  late final _pixman_image_set_accessorsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<pixman_image_t>,
              pixman_read_memory_func_t,
              pixman_write_memory_func_t)>>('pixman_image_set_accessors');
  late final _pixman_image_set_accessors =
      _pixman_image_set_accessorsPtr.asFunction<
          void Function(ffi.Pointer<pixman_image_t>, pixman_read_memory_func_t,
              pixman_write_memory_func_t)>();

  void pixman_image_set_indexed(
    ffi.Pointer<pixman_image_t> image,
    ffi.Pointer<pixman_indexed_t> indexed,
  ) {
    return _pixman_image_set_indexed(
      image,
      indexed,
    );
  }

  late final _pixman_image_set_indexedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<pixman_image_t>,
              ffi.Pointer<pixman_indexed_t>)>>('pixman_image_set_indexed');
  late final _pixman_image_set_indexed =
      _pixman_image_set_indexedPtr.asFunction<
          void Function(
              ffi.Pointer<pixman_image_t>, ffi.Pointer<pixman_indexed_t>)>();

  ffi.Pointer<ffi.Uint32> pixman_image_get_data(
    ffi.Pointer<pixman_image_t> image,
  ) {
    return _pixman_image_get_data(
      image,
    );
  }

  late final _pixman_image_get_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Uint32> Function(
              ffi.Pointer<pixman_image_t>)>>('pixman_image_get_data');
  late final _pixman_image_get_data = _pixman_image_get_dataPtr.asFunction<
      ffi.Pointer<ffi.Uint32> Function(ffi.Pointer<pixman_image_t>)>();

  int pixman_image_get_width(
    ffi.Pointer<pixman_image_t> image,
  ) {
    return _pixman_image_get_width(
      image,
    );
  }

  late final _pixman_image_get_widthPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pixman_image_t>)>>(
      'pixman_image_get_width');
  late final _pixman_image_get_width = _pixman_image_get_widthPtr
      .asFunction<int Function(ffi.Pointer<pixman_image_t>)>();

  int pixman_image_get_height(
    ffi.Pointer<pixman_image_t> image,
  ) {
    return _pixman_image_get_height(
      image,
    );
  }

  late final _pixman_image_get_heightPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pixman_image_t>)>>(
      'pixman_image_get_height');
  late final _pixman_image_get_height = _pixman_image_get_heightPtr
      .asFunction<int Function(ffi.Pointer<pixman_image_t>)>();

  int pixman_image_get_stride(
    ffi.Pointer<pixman_image_t> image,
  ) {
    return _pixman_image_get_stride(
      image,
    );
  }

  late final _pixman_image_get_stridePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pixman_image_t>)>>(
      'pixman_image_get_stride');
  late final _pixman_image_get_stride = _pixman_image_get_stridePtr
      .asFunction<int Function(ffi.Pointer<pixman_image_t>)>();

  int pixman_image_get_depth(
    ffi.Pointer<pixman_image_t> image,
  ) {
    return _pixman_image_get_depth(
      image,
    );
  }

  late final _pixman_image_get_depthPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pixman_image_t>)>>(
      'pixman_image_get_depth');
  late final _pixman_image_get_depth = _pixman_image_get_depthPtr
      .asFunction<int Function(ffi.Pointer<pixman_image_t>)>();

  int pixman_image_get_format(
    ffi.Pointer<pixman_image_t> image,
  ) {
    return _pixman_image_get_format(
      image,
    );
  }

  late final _pixman_image_get_formatPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<pixman_image_t>)>>(
      'pixman_image_get_format');
  late final _pixman_image_get_format = _pixman_image_get_formatPtr
      .asFunction<int Function(ffi.Pointer<pixman_image_t>)>();

  ffi.Pointer<pixman_fixed_t> pixman_filter_create_separable_convolution(
    ffi.Pointer<ffi.Int> n_values,
    int scale_x,
    int scale_y,
    int reconstruct_x,
    int reconstruct_y,
    int sample_x,
    int sample_y,
    int subsample_bits_x,
    int subsample_bits_y,
  ) {
    return _pixman_filter_create_separable_convolution(
      n_values,
      scale_x,
      scale_y,
      reconstruct_x,
      reconstruct_y,
      sample_x,
      sample_y,
      subsample_bits_x,
      subsample_bits_y,
    );
  }

  late final _pixman_filter_create_separable_convolutionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pixman_fixed_t> Function(
              ffi.Pointer<ffi.Int>,
              pixman_fixed_t,
              pixman_fixed_t,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int,
              ffi.Int)>>('pixman_filter_create_separable_convolution');
  late final _pixman_filter_create_separable_convolution =
      _pixman_filter_create_separable_convolutionPtr.asFunction<
          ffi.Pointer<pixman_fixed_t> Function(
              ffi.Pointer<ffi.Int>, int, int, int, int, int, int, int, int)>();

  int pixman_image_fill_rectangles(
    int op,
    ffi.Pointer<pixman_image_t> image,
    ffi.Pointer<pixman_color_t> color,
    int n_rects,
    ffi.Pointer<pixman_rectangle16_t> rects,
  ) {
    return _pixman_image_fill_rectangles(
      op,
      image,
      color,
      n_rects,
      rects,
    );
  }

  late final _pixman_image_fill_rectanglesPtr = _lookup<
          ffi.NativeFunction<
              pixman_bool_t Function(
                  ffi.Int32,
                  ffi.Pointer<pixman_image_t>,
                  ffi.Pointer<pixman_color_t>,
                  ffi.Int,
                  ffi.Pointer<pixman_rectangle16_t>)>>(
      'pixman_image_fill_rectangles');
  late final _pixman_image_fill_rectangles =
      _pixman_image_fill_rectanglesPtr.asFunction<
          int Function(
              int,
              ffi.Pointer<pixman_image_t>,
              ffi.Pointer<pixman_color_t>,
              int,
              ffi.Pointer<pixman_rectangle16_t>)>();

  int pixman_image_fill_boxes(
    int op,
    ffi.Pointer<pixman_image_t> dest,
    ffi.Pointer<pixman_color_t> color,
    int n_boxes,
    ffi.Pointer<pixman_box32_t> boxes,
  ) {
    return _pixman_image_fill_boxes(
      op,
      dest,
      color,
      n_boxes,
      boxes,
    );
  }

  late final _pixman_image_fill_boxesPtr = _lookup<
      ffi.NativeFunction<
          pixman_bool_t Function(
              ffi.Int32,
              ffi.Pointer<pixman_image_t>,
              ffi.Pointer<pixman_color_t>,
              ffi.Int,
              ffi.Pointer<pixman_box32_t>)>>('pixman_image_fill_boxes');
  late final _pixman_image_fill_boxes = _pixman_image_fill_boxesPtr.asFunction<
      int Function(int, ffi.Pointer<pixman_image_t>,
          ffi.Pointer<pixman_color_t>, int, ffi.Pointer<pixman_box32_t>)>();

  int pixman_compute_composite_region(
    ffi.Pointer<pixman_region16_t> region,
    ffi.Pointer<pixman_image_t> src_image,
    ffi.Pointer<pixman_image_t> mask_image,
    ffi.Pointer<pixman_image_t> dest_image,
    int src_x,
    int src_y,
    int mask_x,
    int mask_y,
    int dest_x,
    int dest_y,
    int width,
    int height,
  ) {
    return _pixman_compute_composite_region(
      region,
      src_image,
      mask_image,
      dest_image,
      src_x,
      src_y,
      mask_x,
      mask_y,
      dest_x,
      dest_y,
      width,
      height,
    );
  }

  late final _pixman_compute_composite_regionPtr = _lookup<
      ffi.NativeFunction<
          pixman_bool_t Function(
              ffi.Pointer<pixman_region16_t>,
              ffi.Pointer<pixman_image_t>,
              ffi.Pointer<pixman_image_t>,
              ffi.Pointer<pixman_image_t>,
              ffi.Int16,
              ffi.Int16,
              ffi.Int16,
              ffi.Int16,
              ffi.Int16,
              ffi.Int16,
              ffi.Uint16,
              ffi.Uint16)>>('pixman_compute_composite_region');
  late final _pixman_compute_composite_region =
      _pixman_compute_composite_regionPtr.asFunction<
          int Function(
              ffi.Pointer<pixman_region16_t>,
              ffi.Pointer<pixman_image_t>,
              ffi.Pointer<pixman_image_t>,
              ffi.Pointer<pixman_image_t>,
              int,
              int,
              int,
              int,
              int,
              int,
              int,
              int)>();

  void pixman_image_composite(
    int op,
    ffi.Pointer<pixman_image_t> src,
    ffi.Pointer<pixman_image_t> mask,
    ffi.Pointer<pixman_image_t> dest,
    int src_x,
    int src_y,
    int mask_x,
    int mask_y,
    int dest_x,
    int dest_y,
    int width,
    int height,
  ) {
    return _pixman_image_composite(
      op,
      src,
      mask,
      dest,
      src_x,
      src_y,
      mask_x,
      mask_y,
      dest_x,
      dest_y,
      width,
      height,
    );
  }

  late final _pixman_image_compositePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int32,
              ffi.Pointer<pixman_image_t>,
              ffi.Pointer<pixman_image_t>,
              ffi.Pointer<pixman_image_t>,
              ffi.Int16,
              ffi.Int16,
              ffi.Int16,
              ffi.Int16,
              ffi.Int16,
              ffi.Int16,
              ffi.Uint16,
              ffi.Uint16)>>('pixman_image_composite');
  late final _pixman_image_composite = _pixman_image_compositePtr.asFunction<
      void Function(
          int,
          ffi.Pointer<pixman_image_t>,
          ffi.Pointer<pixman_image_t>,
          ffi.Pointer<pixman_image_t>,
          int,
          int,
          int,
          int,
          int,
          int,
          int,
          int)>();

  void pixman_image_composite32(
    int op,
    ffi.Pointer<pixman_image_t> src,
    ffi.Pointer<pixman_image_t> mask,
    ffi.Pointer<pixman_image_t> dest,
    int src_x,
    int src_y,
    int mask_x,
    int mask_y,
    int dest_x,
    int dest_y,
    int width,
    int height,
  ) {
    return _pixman_image_composite32(
      op,
      src,
      mask,
      dest,
      src_x,
      src_y,
      mask_x,
      mask_y,
      dest_x,
      dest_y,
      width,
      height,
    );
  }

  late final _pixman_image_composite32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int32,
              ffi.Pointer<pixman_image_t>,
              ffi.Pointer<pixman_image_t>,
              ffi.Pointer<pixman_image_t>,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32)>>('pixman_image_composite32');
  late final _pixman_image_composite32 =
      _pixman_image_composite32Ptr.asFunction<
          void Function(
              int,
              ffi.Pointer<pixman_image_t>,
              ffi.Pointer<pixman_image_t>,
              ffi.Pointer<pixman_image_t>,
              int,
              int,
              int,
              int,
              int,
              int,
              int,
              int)>();

  void pixman_disable_out_of_bounds_workaround() {
    return _pixman_disable_out_of_bounds_workaround();
  }

  late final _pixman_disable_out_of_bounds_workaroundPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'pixman_disable_out_of_bounds_workaround');
  late final _pixman_disable_out_of_bounds_workaround =
      _pixman_disable_out_of_bounds_workaroundPtr.asFunction<void Function()>();

  ffi.Pointer<struct_pixman_glyph_cache_t> pixman_glyph_cache_create() {
    return _pixman_glyph_cache_create();
  }

  late final _pixman_glyph_cache_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<struct_pixman_glyph_cache_t>
              Function()>>('pixman_glyph_cache_create');
  late final _pixman_glyph_cache_create = _pixman_glyph_cache_createPtr
      .asFunction<ffi.Pointer<struct_pixman_glyph_cache_t> Function()>();

  void pixman_glyph_cache_destroy(
    ffi.Pointer<struct_pixman_glyph_cache_t> cache,
  ) {
    return _pixman_glyph_cache_destroy(
      cache,
    );
  }

  late final _pixman_glyph_cache_destroyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<struct_pixman_glyph_cache_t>)>>(
      'pixman_glyph_cache_destroy');
  late final _pixman_glyph_cache_destroy = _pixman_glyph_cache_destroyPtr
      .asFunction<void Function(ffi.Pointer<struct_pixman_glyph_cache_t>)>();

  void pixman_glyph_cache_freeze(
    ffi.Pointer<struct_pixman_glyph_cache_t> cache,
  ) {
    return _pixman_glyph_cache_freeze(
      cache,
    );
  }

  late final _pixman_glyph_cache_freezePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<struct_pixman_glyph_cache_t>)>>(
      'pixman_glyph_cache_freeze');
  late final _pixman_glyph_cache_freeze = _pixman_glyph_cache_freezePtr
      .asFunction<void Function(ffi.Pointer<struct_pixman_glyph_cache_t>)>();

  void pixman_glyph_cache_thaw(
    ffi.Pointer<struct_pixman_glyph_cache_t> cache,
  ) {
    return _pixman_glyph_cache_thaw(
      cache,
    );
  }

  late final _pixman_glyph_cache_thawPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<struct_pixman_glyph_cache_t>)>>(
      'pixman_glyph_cache_thaw');
  late final _pixman_glyph_cache_thaw = _pixman_glyph_cache_thawPtr
      .asFunction<void Function(ffi.Pointer<struct_pixman_glyph_cache_t>)>();

  ffi.Pointer<ffi.Void> pixman_glyph_cache_lookup(
    ffi.Pointer<struct_pixman_glyph_cache_t> cache,
    ffi.Pointer<ffi.Void> font_key,
    ffi.Pointer<ffi.Void> glyph_key,
  ) {
    return _pixman_glyph_cache_lookup(
      cache,
      font_key,
      glyph_key,
    );
  }

  late final _pixman_glyph_cache_lookupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<struct_pixman_glyph_cache_t>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>>('pixman_glyph_cache_lookup');
  late final _pixman_glyph_cache_lookup =
      _pixman_glyph_cache_lookupPtr.asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<struct_pixman_glyph_cache_t>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> pixman_glyph_cache_insert(
    ffi.Pointer<struct_pixman_glyph_cache_t> cache,
    ffi.Pointer<ffi.Void> font_key,
    ffi.Pointer<ffi.Void> glyph_key,
    int origin_x,
    int origin_y,
    ffi.Pointer<pixman_image_t> glyph_image,
  ) {
    return _pixman_glyph_cache_insert(
      cache,
      font_key,
      glyph_key,
      origin_x,
      origin_y,
      glyph_image,
    );
  }

  late final _pixman_glyph_cache_insertPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<struct_pixman_glyph_cache_t>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<pixman_image_t>)>>('pixman_glyph_cache_insert');
  late final _pixman_glyph_cache_insert =
      _pixman_glyph_cache_insertPtr.asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<struct_pixman_glyph_cache_t>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              int,
              int,
              ffi.Pointer<pixman_image_t>)>();

  void pixman_glyph_cache_remove(
    ffi.Pointer<struct_pixman_glyph_cache_t> cache,
    ffi.Pointer<ffi.Void> font_key,
    ffi.Pointer<ffi.Void> glyph_key,
  ) {
    return _pixman_glyph_cache_remove(
      cache,
      font_key,
      glyph_key,
    );
  }

  late final _pixman_glyph_cache_removePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_pixman_glyph_cache_t>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>>('pixman_glyph_cache_remove');
  late final _pixman_glyph_cache_remove =
      _pixman_glyph_cache_removePtr.asFunction<
          void Function(ffi.Pointer<struct_pixman_glyph_cache_t>,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  void pixman_glyph_get_extents(
    ffi.Pointer<struct_pixman_glyph_cache_t> cache,
    int n_glyphs,
    ffi.Pointer<struct_pixman_glyph_t> glyphs,
    ffi.Pointer<pixman_box32_t> extents,
  ) {
    return _pixman_glyph_get_extents(
      cache,
      n_glyphs,
      glyphs,
      extents,
    );
  }

  late final _pixman_glyph_get_extentsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_pixman_glyph_cache_t>,
              ffi.Int,
              ffi.Pointer<struct_pixman_glyph_t>,
              ffi.Pointer<pixman_box32_t>)>>('pixman_glyph_get_extents');
  late final _pixman_glyph_get_extents =
      _pixman_glyph_get_extentsPtr.asFunction<
          void Function(
              ffi.Pointer<struct_pixman_glyph_cache_t>,
              int,
              ffi.Pointer<struct_pixman_glyph_t>,
              ffi.Pointer<pixman_box32_t>)>();

  int pixman_glyph_get_mask_format(
    ffi.Pointer<struct_pixman_glyph_cache_t> cache,
    int n_glyphs,
    ffi.Pointer<struct_pixman_glyph_t> glyphs,
  ) {
    return _pixman_glyph_get_mask_format(
      cache,
      n_glyphs,
      glyphs,
    );
  }

  late final _pixman_glyph_get_mask_formatPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<struct_pixman_glyph_cache_t>,
                  ffi.Int, ffi.Pointer<struct_pixman_glyph_t>)>>(
      'pixman_glyph_get_mask_format');
  late final _pixman_glyph_get_mask_format =
      _pixman_glyph_get_mask_formatPtr.asFunction<
          int Function(ffi.Pointer<struct_pixman_glyph_cache_t>, int,
              ffi.Pointer<struct_pixman_glyph_t>)>();

  void pixman_composite_glyphs(
    int op,
    ffi.Pointer<pixman_image_t> src,
    ffi.Pointer<pixman_image_t> dest,
    int mask_format,
    int src_x,
    int src_y,
    int mask_x,
    int mask_y,
    int dest_x,
    int dest_y,
    int width,
    int height,
    ffi.Pointer<struct_pixman_glyph_cache_t> cache,
    int n_glyphs,
    ffi.Pointer<struct_pixman_glyph_t> glyphs,
  ) {
    return _pixman_composite_glyphs(
      op,
      src,
      dest,
      mask_format,
      src_x,
      src_y,
      mask_x,
      mask_y,
      dest_x,
      dest_y,
      width,
      height,
      cache,
      n_glyphs,
      glyphs,
    );
  }

  late final _pixman_composite_glyphsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int32,
              ffi.Pointer<pixman_image_t>,
              ffi.Pointer<pixman_image_t>,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<struct_pixman_glyph_cache_t>,
              ffi.Int,
              ffi.Pointer<struct_pixman_glyph_t>)>>('pixman_composite_glyphs');
  late final _pixman_composite_glyphs = _pixman_composite_glyphsPtr.asFunction<
      void Function(
          int,
          ffi.Pointer<pixman_image_t>,
          ffi.Pointer<pixman_image_t>,
          int,
          int,
          int,
          int,
          int,
          int,
          int,
          int,
          int,
          ffi.Pointer<struct_pixman_glyph_cache_t>,
          int,
          ffi.Pointer<struct_pixman_glyph_t>)>();

  void pixman_composite_glyphs_no_mask(
    int op,
    ffi.Pointer<pixman_image_t> src,
    ffi.Pointer<pixman_image_t> dest,
    int src_x,
    int src_y,
    int dest_x,
    int dest_y,
    ffi.Pointer<struct_pixman_glyph_cache_t> cache,
    int n_glyphs,
    ffi.Pointer<struct_pixman_glyph_t> glyphs,
  ) {
    return _pixman_composite_glyphs_no_mask(
      op,
      src,
      dest,
      src_x,
      src_y,
      dest_x,
      dest_y,
      cache,
      n_glyphs,
      glyphs,
    );
  }

  late final _pixman_composite_glyphs_no_maskPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int32,
                  ffi.Pointer<pixman_image_t>,
                  ffi.Pointer<pixman_image_t>,
                  ffi.Int32,
                  ffi.Int32,
                  ffi.Int32,
                  ffi.Int32,
                  ffi.Pointer<struct_pixman_glyph_cache_t>,
                  ffi.Int,
                  ffi.Pointer<struct_pixman_glyph_t>)>>(
      'pixman_composite_glyphs_no_mask');
  late final _pixman_composite_glyphs_no_mask =
      _pixman_composite_glyphs_no_maskPtr.asFunction<
          void Function(
              int,
              ffi.Pointer<pixman_image_t>,
              ffi.Pointer<pixman_image_t>,
              int,
              int,
              int,
              int,
              ffi.Pointer<struct_pixman_glyph_cache_t>,
              int,
              ffi.Pointer<struct_pixman_glyph_t>)>();

  int pixman_sample_ceil_y(
    int y,
    int bpp,
  ) {
    return _pixman_sample_ceil_y(
      y,
      bpp,
    );
  }

  late final _pixman_sample_ceil_yPtr = _lookup<
          ffi.NativeFunction<pixman_fixed_t Function(pixman_fixed_t, ffi.Int)>>(
      'pixman_sample_ceil_y');
  late final _pixman_sample_ceil_y =
      _pixman_sample_ceil_yPtr.asFunction<int Function(int, int)>();

  int pixman_sample_floor_y(
    int y,
    int bpp,
  ) {
    return _pixman_sample_floor_y(
      y,
      bpp,
    );
  }

  late final _pixman_sample_floor_yPtr = _lookup<
          ffi.NativeFunction<pixman_fixed_t Function(pixman_fixed_t, ffi.Int)>>(
      'pixman_sample_floor_y');
  late final _pixman_sample_floor_y =
      _pixman_sample_floor_yPtr.asFunction<int Function(int, int)>();

  void pixman_edge_step(
    ffi.Pointer<pixman_edge_t> e,
    int n,
  ) {
    return _pixman_edge_step(
      e,
      n,
    );
  }

  late final _pixman_edge_stepPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<pixman_edge_t>, ffi.Int)>>('pixman_edge_step');
  late final _pixman_edge_step = _pixman_edge_stepPtr
      .asFunction<void Function(ffi.Pointer<pixman_edge_t>, int)>();

  void pixman_edge_init(
    ffi.Pointer<pixman_edge_t> e,
    int bpp,
    int y_start,
    int x_top,
    int y_top,
    int x_bot,
    int y_bot,
  ) {
    return _pixman_edge_init(
      e,
      bpp,
      y_start,
      x_top,
      y_top,
      x_bot,
      y_bot,
    );
  }

  late final _pixman_edge_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<pixman_edge_t>,
              ffi.Int,
              pixman_fixed_t,
              pixman_fixed_t,
              pixman_fixed_t,
              pixman_fixed_t,
              pixman_fixed_t)>>('pixman_edge_init');
  late final _pixman_edge_init = _pixman_edge_initPtr.asFunction<
      void Function(
          ffi.Pointer<pixman_edge_t>, int, int, int, int, int, int)>();

  void pixman_line_fixed_edge_init(
    ffi.Pointer<pixman_edge_t> e,
    int bpp,
    int y,
    ffi.Pointer<pixman_line_fixed_t> line,
    int x_off,
    int y_off,
  ) {
    return _pixman_line_fixed_edge_init(
      e,
      bpp,
      y,
      line,
      x_off,
      y_off,
    );
  }

  late final _pixman_line_fixed_edge_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<pixman_edge_t>,
              ffi.Int,
              pixman_fixed_t,
              ffi.Pointer<pixman_line_fixed_t>,
              ffi.Int,
              ffi.Int)>>('pixman_line_fixed_edge_init');
  late final _pixman_line_fixed_edge_init =
      _pixman_line_fixed_edge_initPtr.asFunction<
          void Function(ffi.Pointer<pixman_edge_t>, int, int,
              ffi.Pointer<pixman_line_fixed_t>, int, int)>();

  void pixman_rasterize_edges(
    ffi.Pointer<pixman_image_t> image,
    ffi.Pointer<pixman_edge_t> l,
    ffi.Pointer<pixman_edge_t> r,
    int t,
    int b,
  ) {
    return _pixman_rasterize_edges(
      image,
      l,
      r,
      t,
      b,
    );
  }

  late final _pixman_rasterize_edgesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<pixman_image_t>,
              ffi.Pointer<pixman_edge_t>,
              ffi.Pointer<pixman_edge_t>,
              pixman_fixed_t,
              pixman_fixed_t)>>('pixman_rasterize_edges');
  late final _pixman_rasterize_edges = _pixman_rasterize_edgesPtr.asFunction<
      void Function(ffi.Pointer<pixman_image_t>, ffi.Pointer<pixman_edge_t>,
          ffi.Pointer<pixman_edge_t>, int, int)>();

  void pixman_add_traps(
    ffi.Pointer<pixman_image_t> image,
    int x_off,
    int y_off,
    int ntrap,
    ffi.Pointer<pixman_trap_t> traps,
  ) {
    return _pixman_add_traps(
      image,
      x_off,
      y_off,
      ntrap,
      traps,
    );
  }

  late final _pixman_add_trapsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<pixman_image_t>, ffi.Int16, ffi.Int16,
              ffi.Int, ffi.Pointer<pixman_trap_t>)>>('pixman_add_traps');
  late final _pixman_add_traps = _pixman_add_trapsPtr.asFunction<
      void Function(ffi.Pointer<pixman_image_t>, int, int, int,
          ffi.Pointer<pixman_trap_t>)>();

  void pixman_add_trapezoids(
    ffi.Pointer<pixman_image_t> image,
    int x_off,
    int y_off,
    int ntraps,
    ffi.Pointer<pixman_trapezoid_t> traps,
  ) {
    return _pixman_add_trapezoids(
      image,
      x_off,
      y_off,
      ntraps,
      traps,
    );
  }

  late final _pixman_add_trapezoidsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<pixman_image_t>,
              ffi.Int16,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<pixman_trapezoid_t>)>>('pixman_add_trapezoids');
  late final _pixman_add_trapezoids = _pixman_add_trapezoidsPtr.asFunction<
      void Function(ffi.Pointer<pixman_image_t>, int, int, int,
          ffi.Pointer<pixman_trapezoid_t>)>();

  void pixman_rasterize_trapezoid(
    ffi.Pointer<pixman_image_t> image,
    ffi.Pointer<pixman_trapezoid_t> trap,
    int x_off,
    int y_off,
  ) {
    return _pixman_rasterize_trapezoid(
      image,
      trap,
      x_off,
      y_off,
    );
  }

  late final _pixman_rasterize_trapezoidPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<pixman_image_t>,
              ffi.Pointer<pixman_trapezoid_t>,
              ffi.Int,
              ffi.Int)>>('pixman_rasterize_trapezoid');
  late final _pixman_rasterize_trapezoid =
      _pixman_rasterize_trapezoidPtr.asFunction<
          void Function(ffi.Pointer<pixman_image_t>,
              ffi.Pointer<pixman_trapezoid_t>, int, int)>();

  void pixman_composite_trapezoids(
    int op,
    ffi.Pointer<pixman_image_t> src,
    ffi.Pointer<pixman_image_t> dst,
    int mask_format,
    int x_src,
    int y_src,
    int x_dst,
    int y_dst,
    int n_traps,
    ffi.Pointer<pixman_trapezoid_t> traps,
  ) {
    return _pixman_composite_trapezoids(
      op,
      src,
      dst,
      mask_format,
      x_src,
      y_src,
      x_dst,
      y_dst,
      n_traps,
      traps,
    );
  }

  late final _pixman_composite_trapezoidsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int32,
              ffi.Pointer<pixman_image_t>,
              ffi.Pointer<pixman_image_t>,
              ffi.Int32,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<pixman_trapezoid_t>)>>('pixman_composite_trapezoids');
  late final _pixman_composite_trapezoids =
      _pixman_composite_trapezoidsPtr.asFunction<
          void Function(
              int,
              ffi.Pointer<pixman_image_t>,
              ffi.Pointer<pixman_image_t>,
              int,
              int,
              int,
              int,
              int,
              int,
              ffi.Pointer<pixman_trapezoid_t>)>();

  void pixman_composite_triangles(
    int op,
    ffi.Pointer<pixman_image_t> src,
    ffi.Pointer<pixman_image_t> dst,
    int mask_format,
    int x_src,
    int y_src,
    int x_dst,
    int y_dst,
    int n_tris,
    ffi.Pointer<pixman_triangle_t> tris,
  ) {
    return _pixman_composite_triangles(
      op,
      src,
      dst,
      mask_format,
      x_src,
      y_src,
      x_dst,
      y_dst,
      n_tris,
      tris,
    );
  }

  late final _pixman_composite_trianglesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int32,
              ffi.Pointer<pixman_image_t>,
              ffi.Pointer<pixman_image_t>,
              ffi.Int32,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<pixman_triangle_t>)>>('pixman_composite_triangles');
  late final _pixman_composite_triangles =
      _pixman_composite_trianglesPtr.asFunction<
          void Function(
              int,
              ffi.Pointer<pixman_image_t>,
              ffi.Pointer<pixman_image_t>,
              int,
              int,
              int,
              int,
              int,
              int,
              ffi.Pointer<pixman_triangle_t>)>();

  void pixman_add_triangles(
    ffi.Pointer<pixman_image_t> image,
    int x_off,
    int y_off,
    int n_tris,
    ffi.Pointer<pixman_triangle_t> tris,
  ) {
    return _pixman_add_triangles(
      image,
      x_off,
      y_off,
      n_tris,
      tris,
    );
  }

  late final _pixman_add_trianglesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<pixman_image_t>,
              ffi.Int32,
              ffi.Int32,
              ffi.Int,
              ffi.Pointer<pixman_triangle_t>)>>('pixman_add_triangles');
  late final _pixman_add_triangles = _pixman_add_trianglesPtr.asFunction<
      void Function(ffi.Pointer<pixman_image_t>, int, int, int,
          ffi.Pointer<pixman_triangle_t>)>();

  int clock() {
    return _clock();
  }

  late final _clockPtr =
      _lookup<ffi.NativeFunction<clock_t Function()>>('clock');
  late final _clock = _clockPtr.asFunction<int Function()>();

  int time(
    ffi.Pointer<time_t> __timer,
  ) {
    return _time(
      __timer,
    );
  }

  late final _timePtr =
      _lookup<ffi.NativeFunction<time_t Function(ffi.Pointer<time_t>)>>('time');
  late final _time = _timePtr.asFunction<int Function(ffi.Pointer<time_t>)>();

  double difftime(
    int __time1,
    int __time0,
  ) {
    return _difftime(
      __time1,
      __time0,
    );
  }

  late final _difftimePtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(time_t, time_t)>>(
          'difftime');
  late final _difftime = _difftimePtr.asFunction<double Function(int, int)>();

  int mktime(
    ffi.Pointer<struct_tm> __tp,
  ) {
    return _mktime(
      __tp,
    );
  }

  late final _mktimePtr =
      _lookup<ffi.NativeFunction<time_t Function(ffi.Pointer<struct_tm>)>>(
          'mktime');
  late final _mktime =
      _mktimePtr.asFunction<int Function(ffi.Pointer<struct_tm>)>();

  int strftime(
    ffi.Pointer<ffi.Char> __s,
    int __maxsize,
    ffi.Pointer<ffi.Char> __format,
    ffi.Pointer<struct_tm> __tp,
  ) {
    return _strftime(
      __s,
      __maxsize,
      __format,
      __tp,
    );
  }

  late final _strftimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Char>, ffi.Size,
              ffi.Pointer<ffi.Char>, ffi.Pointer<struct_tm>)>>('strftime');
  late final _strftime = _strftimePtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>,
          ffi.Pointer<struct_tm>)>();

  int strftime_l(
    ffi.Pointer<ffi.Char> __s,
    int __maxsize,
    ffi.Pointer<ffi.Char> __format,
    ffi.Pointer<struct_tm> __tp,
    locale_t __loc,
  ) {
    return _strftime_l(
      __s,
      __maxsize,
      __format,
      __tp,
      __loc,
    );
  }

  late final _strftime_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<struct_tm>,
              locale_t)>>('strftime_l');
  late final _strftime_l = _strftime_lPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>,
          ffi.Pointer<struct_tm>, locale_t)>();

  ffi.Pointer<struct_tm> gmtime(
    ffi.Pointer<time_t> __timer,
  ) {
    return _gmtime(
      __timer,
    );
  }

  late final _gmtimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<struct_tm> Function(ffi.Pointer<time_t>)>>('gmtime');
  late final _gmtime = _gmtimePtr
      .asFunction<ffi.Pointer<struct_tm> Function(ffi.Pointer<time_t>)>();

  ffi.Pointer<struct_tm> localtime(
    ffi.Pointer<time_t> __timer,
  ) {
    return _localtime(
      __timer,
    );
  }

  late final _localtimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<struct_tm> Function(ffi.Pointer<time_t>)>>('localtime');
  late final _localtime = _localtimePtr
      .asFunction<ffi.Pointer<struct_tm> Function(ffi.Pointer<time_t>)>();

  ffi.Pointer<struct_tm> gmtime_r(
    ffi.Pointer<time_t> __timer,
    ffi.Pointer<struct_tm> __tp,
  ) {
    return _gmtime_r(
      __timer,
      __tp,
    );
  }

  late final _gmtime_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<struct_tm> Function(
              ffi.Pointer<time_t>, ffi.Pointer<struct_tm>)>>('gmtime_r');
  late final _gmtime_r = _gmtime_rPtr.asFunction<
      ffi.Pointer<struct_tm> Function(
          ffi.Pointer<time_t>, ffi.Pointer<struct_tm>)>();

  ffi.Pointer<struct_tm> localtime_r(
    ffi.Pointer<time_t> __timer,
    ffi.Pointer<struct_tm> __tp,
  ) {
    return _localtime_r(
      __timer,
      __tp,
    );
  }

  late final _localtime_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<struct_tm> Function(
              ffi.Pointer<time_t>, ffi.Pointer<struct_tm>)>>('localtime_r');
  late final _localtime_r = _localtime_rPtr.asFunction<
      ffi.Pointer<struct_tm> Function(
          ffi.Pointer<time_t>, ffi.Pointer<struct_tm>)>();

  ffi.Pointer<ffi.Char> asctime(
    ffi.Pointer<struct_tm> __tp,
  ) {
    return _asctime(
      __tp,
    );
  }

  late final _asctimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<struct_tm>)>>('asctime');
  late final _asctime = _asctimePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<struct_tm>)>();

  ffi.Pointer<ffi.Char> ctime(
    ffi.Pointer<time_t> __timer,
  ) {
    return _ctime(
      __timer,
    );
  }

  late final _ctimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<time_t>)>>('ctime');
  late final _ctime = _ctimePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<time_t>)>();

  ffi.Pointer<ffi.Char> asctime_r(
    ffi.Pointer<struct_tm> __tp,
    ffi.Pointer<ffi.Char> __buf,
  ) {
    return _asctime_r(
      __tp,
      __buf,
    );
  }

  late final _asctime_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<struct_tm>, ffi.Pointer<ffi.Char>)>>('asctime_r');
  late final _asctime_r = _asctime_rPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<struct_tm>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> ctime_r(
    ffi.Pointer<time_t> __timer,
    ffi.Pointer<ffi.Char> __buf,
  ) {
    return _ctime_r(
      __timer,
      __buf,
    );
  }

  late final _ctime_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<time_t>, ffi.Pointer<ffi.Char>)>>('ctime_r');
  late final _ctime_r = _ctime_rPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<time_t>, ffi.Pointer<ffi.Char>)>();

  late final ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>> ___tzname =
      _lookup<ffi.Pointer<ffi.Pointer<ffi.Char>>>('__tzname');

  ffi.Pointer<ffi.Pointer<ffi.Char>> get __tzname => ___tzname.value;

  set __tzname(ffi.Pointer<ffi.Pointer<ffi.Char>> value) =>
      ___tzname.value = value;

  late final ffi.Pointer<ffi.Int> ___daylight = _lookup<ffi.Int>('__daylight');

  int get __daylight => ___daylight.value;

  set __daylight(int value) => ___daylight.value = value;

  late final ffi.Pointer<ffi.Long> ___timezone =
      _lookup<ffi.Long>('__timezone');

  int get __timezone => ___timezone.value;

  set __timezone(int value) => ___timezone.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>> _tzname =
      _lookup<ffi.Pointer<ffi.Pointer<ffi.Char>>>('tzname');

  ffi.Pointer<ffi.Pointer<ffi.Char>> get tzname => _tzname.value;

  set tzname(ffi.Pointer<ffi.Pointer<ffi.Char>> value) => _tzname.value = value;

  void tzset() {
    return _tzset();
  }

  late final _tzsetPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('tzset');
  late final _tzset = _tzsetPtr.asFunction<void Function()>();

  late final ffi.Pointer<ffi.Int> _daylight = _lookup<ffi.Int>('daylight');

  int get daylight => _daylight.value;

  set daylight(int value) => _daylight.value = value;

  late final ffi.Pointer<ffi.Long> _timezone = _lookup<ffi.Long>('timezone');

  int get timezone => _timezone.value;

  set timezone(int value) => _timezone.value = value;

  int timegm(
    ffi.Pointer<struct_tm> __tp,
  ) {
    return _timegm(
      __tp,
    );
  }

  late final _timegmPtr =
      _lookup<ffi.NativeFunction<time_t Function(ffi.Pointer<struct_tm>)>>(
          'timegm');
  late final _timegm =
      _timegmPtr.asFunction<int Function(ffi.Pointer<struct_tm>)>();

  int timelocal(
    ffi.Pointer<struct_tm> __tp,
  ) {
    return _timelocal(
      __tp,
    );
  }

  late final _timelocalPtr =
      _lookup<ffi.NativeFunction<time_t Function(ffi.Pointer<struct_tm>)>>(
          'timelocal');
  late final _timelocal =
      _timelocalPtr.asFunction<int Function(ffi.Pointer<struct_tm>)>();

  int dysize(
    int __year,
  ) {
    return _dysize(
      __year,
    );
  }

  late final _dysizePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('dysize');
  late final _dysize = _dysizePtr.asFunction<int Function(int)>();

  int nanosleep(
    ffi.Pointer<struct_timespec> __requested_time,
    ffi.Pointer<struct_timespec> __remaining,
  ) {
    return _nanosleep(
      __requested_time,
      __remaining,
    );
  }

  late final _nanosleepPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<struct_timespec>,
              ffi.Pointer<struct_timespec>)>>('nanosleep');
  late final _nanosleep = _nanosleepPtr.asFunction<
      int Function(
          ffi.Pointer<struct_timespec>, ffi.Pointer<struct_timespec>)>();

  int clock_getres(
    int __clock_id,
    ffi.Pointer<struct_timespec> __res,
  ) {
    return _clock_getres(
      __clock_id,
      __res,
    );
  }

  late final _clock_getresPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              clockid_t, ffi.Pointer<struct_timespec>)>>('clock_getres');
  late final _clock_getres = _clock_getresPtr
      .asFunction<int Function(int, ffi.Pointer<struct_timespec>)>();

  int clock_gettime(
    int __clock_id,
    ffi.Pointer<struct_timespec> __tp,
  ) {
    return _clock_gettime(
      __clock_id,
      __tp,
    );
  }

  late final _clock_gettimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              clockid_t, ffi.Pointer<struct_timespec>)>>('clock_gettime');
  late final _clock_gettime = _clock_gettimePtr
      .asFunction<int Function(int, ffi.Pointer<struct_timespec>)>();

  int clock_settime(
    int __clock_id,
    ffi.Pointer<struct_timespec> __tp,
  ) {
    return _clock_settime(
      __clock_id,
      __tp,
    );
  }

  late final _clock_settimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              clockid_t, ffi.Pointer<struct_timespec>)>>('clock_settime');
  late final _clock_settime = _clock_settimePtr
      .asFunction<int Function(int, ffi.Pointer<struct_timespec>)>();

  int clock_nanosleep(
    int __clock_id,
    int __flags,
    ffi.Pointer<struct_timespec> __req,
    ffi.Pointer<struct_timespec> __rem,
  ) {
    return _clock_nanosleep(
      __clock_id,
      __flags,
      __req,
      __rem,
    );
  }

  late final _clock_nanosleepPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(clockid_t, ffi.Int, ffi.Pointer<struct_timespec>,
              ffi.Pointer<struct_timespec>)>>('clock_nanosleep');
  late final _clock_nanosleep = _clock_nanosleepPtr.asFunction<
      int Function(int, int, ffi.Pointer<struct_timespec>,
          ffi.Pointer<struct_timespec>)>();

  int clock_getcpuclockid(
    int __pid,
    ffi.Pointer<clockid_t> __clock_id,
  ) {
    return _clock_getcpuclockid(
      __pid,
      __clock_id,
    );
  }

  late final _clock_getcpuclockidPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(pid_t, ffi.Pointer<clockid_t>)>>(
      'clock_getcpuclockid');
  late final _clock_getcpuclockid = _clock_getcpuclockidPtr
      .asFunction<int Function(int, ffi.Pointer<clockid_t>)>();

  int timer_create(
    int __clock_id,
    ffi.Pointer<struct_sigevent> __evp,
    ffi.Pointer<timer_t> __timerid,
  ) {
    return _timer_create(
      __clock_id,
      __evp,
      __timerid,
    );
  }

  late final _timer_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(clockid_t, ffi.Pointer<struct_sigevent>,
              ffi.Pointer<timer_t>)>>('timer_create');
  late final _timer_create = _timer_createPtr.asFunction<
      int Function(int, ffi.Pointer<struct_sigevent>, ffi.Pointer<timer_t>)>();

  int timer_delete(
    timer_t __timerid,
  ) {
    return _timer_delete(
      __timerid,
    );
  }

  late final _timer_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(timer_t)>>('timer_delete');
  late final _timer_delete =
      _timer_deletePtr.asFunction<int Function(timer_t)>();

  int timer_settime(
    timer_t __timerid,
    int __flags,
    ffi.Pointer<struct_itimerspec> __value,
    ffi.Pointer<struct_itimerspec> __ovalue,
  ) {
    return _timer_settime(
      __timerid,
      __flags,
      __value,
      __ovalue,
    );
  }

  late final _timer_settimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(timer_t, ffi.Int, ffi.Pointer<struct_itimerspec>,
              ffi.Pointer<struct_itimerspec>)>>('timer_settime');
  late final _timer_settime = _timer_settimePtr.asFunction<
      int Function(timer_t, int, ffi.Pointer<struct_itimerspec>,
          ffi.Pointer<struct_itimerspec>)>();

  int timer_gettime(
    timer_t __timerid,
    ffi.Pointer<struct_itimerspec> __value,
  ) {
    return _timer_gettime(
      __timerid,
      __value,
    );
  }

  late final _timer_gettimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              timer_t, ffi.Pointer<struct_itimerspec>)>>('timer_gettime');
  late final _timer_gettime = _timer_gettimePtr
      .asFunction<int Function(timer_t, ffi.Pointer<struct_itimerspec>)>();

  int timer_getoverrun(
    timer_t __timerid,
  ) {
    return _timer_getoverrun(
      __timerid,
    );
  }

  late final _timer_getoverrunPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(timer_t)>>(
          'timer_getoverrun');
  late final _timer_getoverrun =
      _timer_getoverrunPtr.asFunction<int Function(timer_t)>();

  int timespec_get(
    ffi.Pointer<struct_timespec> __ts,
    int __base,
  ) {
    return _timespec_get(
      __ts,
      __base,
    );
  }

  late final _timespec_getPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<struct_timespec>, ffi.Int)>>('timespec_get');
  late final _timespec_get = _timespec_getPtr
      .asFunction<int Function(ffi.Pointer<struct_timespec>, int)>();

  void wlr_addon_set_init(
    ffi.Pointer<struct_wlr_addon_set> set1,
  ) {
    return _wlr_addon_set_init(
      set1,
    );
  }

  late final _wlr_addon_set_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wlr_addon_set>)>>('wlr_addon_set_init');
  late final _wlr_addon_set_init = _wlr_addon_set_initPtr
      .asFunction<void Function(ffi.Pointer<struct_wlr_addon_set>)>();

  void wlr_addon_set_finish(
    ffi.Pointer<struct_wlr_addon_set> set1,
  ) {
    return _wlr_addon_set_finish(
      set1,
    );
  }

  late final _wlr_addon_set_finishPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wlr_addon_set>)>>('wlr_addon_set_finish');
  late final _wlr_addon_set_finish = _wlr_addon_set_finishPtr
      .asFunction<void Function(ffi.Pointer<struct_wlr_addon_set>)>();

  void wlr_addon_init(
    ffi.Pointer<struct_wlr_addon> addon,
    ffi.Pointer<struct_wlr_addon_set> set1,
    ffi.Pointer<ffi.Void> owner,
    ffi.Pointer<struct_wlr_addon_interface> impl,
  ) {
    return _wlr_addon_init(
      addon,
      set1,
      owner,
      impl,
    );
  }

  late final _wlr_addon_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wlr_addon>,
              ffi.Pointer<struct_wlr_addon_set>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<struct_wlr_addon_interface>)>>('wlr_addon_init');
  late final _wlr_addon_init = _wlr_addon_initPtr.asFunction<
      void Function(
          ffi.Pointer<struct_wlr_addon>,
          ffi.Pointer<struct_wlr_addon_set>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<struct_wlr_addon_interface>)>();

  void wlr_addon_finish(
    ffi.Pointer<struct_wlr_addon> addon,
  ) {
    return _wlr_addon_finish(
      addon,
    );
  }

  late final _wlr_addon_finishPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<struct_wlr_addon>)>>(
      'wlr_addon_finish');
  late final _wlr_addon_finish = _wlr_addon_finishPtr
      .asFunction<void Function(ffi.Pointer<struct_wlr_addon>)>();

  ffi.Pointer<struct_wlr_addon> wlr_addon_find(
    ffi.Pointer<struct_wlr_addon_set> set1,
    ffi.Pointer<ffi.Void> owner,
    ffi.Pointer<struct_wlr_addon_interface> impl,
  ) {
    return _wlr_addon_find(
      set1,
      owner,
      impl,
    );
  }

  late final _wlr_addon_findPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<struct_wlr_addon> Function(
              ffi.Pointer<struct_wlr_addon_set>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<struct_wlr_addon_interface>)>>('wlr_addon_find');
  late final _wlr_addon_find = _wlr_addon_findPtr.asFunction<
      ffi.Pointer<struct_wlr_addon> Function(ffi.Pointer<struct_wlr_addon_set>,
          ffi.Pointer<ffi.Void>, ffi.Pointer<struct_wlr_addon_interface>)>();

  void wlr_buffer_init(
    ffi.Pointer<struct_wlr_buffer> buffer,
    ffi.Pointer<struct_wlr_buffer_impl> impl,
    int width,
    int height,
  ) {
    return _wlr_buffer_init(
      buffer,
      impl,
      width,
      height,
    );
  }

  late final _wlr_buffer_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wlr_buffer>,
              ffi.Pointer<struct_wlr_buffer_impl>,
              ffi.Int,
              ffi.Int)>>('wlr_buffer_init');
  late final _wlr_buffer_init = _wlr_buffer_initPtr.asFunction<
      void Function(ffi.Pointer<struct_wlr_buffer>,
          ffi.Pointer<struct_wlr_buffer_impl>, int, int)>();

  void wlr_buffer_drop(
    ffi.Pointer<struct_wlr_buffer> buffer,
  ) {
    return _wlr_buffer_drop(
      buffer,
    );
  }

  late final _wlr_buffer_dropPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wlr_buffer>)>>('wlr_buffer_drop');
  late final _wlr_buffer_drop = _wlr_buffer_dropPtr
      .asFunction<void Function(ffi.Pointer<struct_wlr_buffer>)>();

  ffi.Pointer<struct_wlr_buffer> wlr_buffer_lock(
    ffi.Pointer<struct_wlr_buffer> buffer,
  ) {
    return _wlr_buffer_lock(
      buffer,
    );
  }

  late final _wlr_buffer_lockPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<struct_wlr_buffer> Function(
              ffi.Pointer<struct_wlr_buffer>)>>('wlr_buffer_lock');
  late final _wlr_buffer_lock = _wlr_buffer_lockPtr.asFunction<
      ffi.Pointer<struct_wlr_buffer> Function(
          ffi.Pointer<struct_wlr_buffer>)>();

  void wlr_buffer_unlock(
    ffi.Pointer<struct_wlr_buffer> buffer,
  ) {
    return _wlr_buffer_unlock(
      buffer,
    );
  }

  late final _wlr_buffer_unlockPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wlr_buffer>)>>('wlr_buffer_unlock');
  late final _wlr_buffer_unlock = _wlr_buffer_unlockPtr
      .asFunction<void Function(ffi.Pointer<struct_wlr_buffer>)>();

  bool wlr_buffer_get_dmabuf(
    ffi.Pointer<struct_wlr_buffer> buffer,
    ffi.Pointer<struct_wlr_dmabuf_attributes> attribs,
  ) {
    return _wlr_buffer_get_dmabuf(
      buffer,
      attribs,
    );
  }

  late final _wlr_buffer_get_dmabufPtr = _lookup<
          ffi.NativeFunction<
              ffi.Bool Function(ffi.Pointer<struct_wlr_buffer>,
                  ffi.Pointer<struct_wlr_dmabuf_attributes>)>>(
      'wlr_buffer_get_dmabuf');
  late final _wlr_buffer_get_dmabuf = _wlr_buffer_get_dmabufPtr.asFunction<
      bool Function(ffi.Pointer<struct_wlr_buffer>,
          ffi.Pointer<struct_wlr_dmabuf_attributes>)>();

  bool wlr_buffer_get_shm(
    ffi.Pointer<struct_wlr_buffer> buffer,
    ffi.Pointer<struct_wlr_shm_attributes> attribs,
  ) {
    return _wlr_buffer_get_shm(
      buffer,
      attribs,
    );
  }

  late final _wlr_buffer_get_shmPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<struct_wlr_buffer>,
              ffi.Pointer<struct_wlr_shm_attributes>)>>('wlr_buffer_get_shm');
  late final _wlr_buffer_get_shm = _wlr_buffer_get_shmPtr.asFunction<
      bool Function(ffi.Pointer<struct_wlr_buffer>,
          ffi.Pointer<struct_wlr_shm_attributes>)>();

  void wlr_buffer_register_resource_interface(
    ffi.Pointer<struct_wlr_buffer_resource_interface> iface,
  ) {
    return _wlr_buffer_register_resource_interface(
      iface,
    );
  }

  late final _wlr_buffer_register_resource_interfacePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<struct_wlr_buffer_resource_interface>)>>(
      'wlr_buffer_register_resource_interface');
  late final _wlr_buffer_register_resource_interface =
      _wlr_buffer_register_resource_interfacePtr.asFunction<
          void Function(ffi.Pointer<struct_wlr_buffer_resource_interface>)>();

  ffi.Pointer<struct_wlr_buffer> wlr_buffer_from_resource(
    ffi.Pointer<struct_wl_resource> resource,
  ) {
    return _wlr_buffer_from_resource(
      resource,
    );
  }

  late final _wlr_buffer_from_resourcePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<struct_wlr_buffer> Function(
              ffi.Pointer<struct_wl_resource>)>>('wlr_buffer_from_resource');
  late final _wlr_buffer_from_resource =
      _wlr_buffer_from_resourcePtr.asFunction<
          ffi.Pointer<struct_wlr_buffer> Function(
              ffi.Pointer<struct_wl_resource>)>();

  bool wlr_buffer_begin_data_ptr_access(
    ffi.Pointer<struct_wlr_buffer> buffer,
    int flags,
    ffi.Pointer<ffi.Pointer<ffi.Void>> data,
    ffi.Pointer<ffi.Uint32> format,
    ffi.Pointer<ffi.Size> stride,
  ) {
    return _wlr_buffer_begin_data_ptr_access(
      buffer,
      flags,
      data,
      format,
      stride,
    );
  }

  late final _wlr_buffer_begin_data_ptr_accessPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<struct_wlr_buffer>,
              ffi.Uint32,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<ffi.Uint32>,
              ffi.Pointer<ffi.Size>)>>('wlr_buffer_begin_data_ptr_access');
  late final _wlr_buffer_begin_data_ptr_access =
      _wlr_buffer_begin_data_ptr_accessPtr.asFunction<
          bool Function(
              ffi.Pointer<struct_wlr_buffer>,
              int,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<ffi.Uint32>,
              ffi.Pointer<ffi.Size>)>();

  void wlr_buffer_end_data_ptr_access(
    ffi.Pointer<struct_wlr_buffer> buffer,
  ) {
    return _wlr_buffer_end_data_ptr_access(
      buffer,
    );
  }

  late final _wlr_buffer_end_data_ptr_accessPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<struct_wlr_buffer>)>>(
      'wlr_buffer_end_data_ptr_access');
  late final _wlr_buffer_end_data_ptr_access =
      _wlr_buffer_end_data_ptr_accessPtr
          .asFunction<void Function(ffi.Pointer<struct_wlr_buffer>)>();

  ffi.Pointer<struct_wlr_client_buffer> wlr_client_buffer_create(
    ffi.Pointer<struct_wlr_buffer> buffer,
    ffi.Pointer<struct_wlr_renderer> renderer,
  ) {
    return _wlr_client_buffer_create(
      buffer,
      renderer,
    );
  }

  late final _wlr_client_buffer_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<struct_wlr_client_buffer> Function(
              ffi.Pointer<struct_wlr_buffer>,
              ffi.Pointer<struct_wlr_renderer>)>>('wlr_client_buffer_create');
  late final _wlr_client_buffer_create =
      _wlr_client_buffer_createPtr.asFunction<
          ffi.Pointer<struct_wlr_client_buffer> Function(
              ffi.Pointer<struct_wlr_buffer>,
              ffi.Pointer<struct_wlr_renderer>)>();

  ffi.Pointer<struct_wlr_client_buffer> wlr_client_buffer_get(
    ffi.Pointer<struct_wlr_buffer> buffer,
  ) {
    return _wlr_client_buffer_get(
      buffer,
    );
  }

  late final _wlr_client_buffer_getPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<struct_wlr_client_buffer> Function(
              ffi.Pointer<struct_wlr_buffer>)>>('wlr_client_buffer_get');
  late final _wlr_client_buffer_get = _wlr_client_buffer_getPtr.asFunction<
      ffi.Pointer<struct_wlr_client_buffer> Function(
          ffi.Pointer<struct_wlr_buffer>)>();

  bool wlr_resource_is_buffer(
    ffi.Pointer<struct_wl_resource> resource,
  ) {
    return _wlr_resource_is_buffer(
      resource,
    );
  }

  late final _wlr_resource_is_bufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<struct_wl_resource>)>>('wlr_resource_is_buffer');
  late final _wlr_resource_is_buffer = _wlr_resource_is_bufferPtr
      .asFunction<bool Function(ffi.Pointer<struct_wl_resource>)>();

  bool wlr_client_buffer_apply_damage(
    ffi.Pointer<struct_wlr_client_buffer> client_buffer,
    ffi.Pointer<struct_wlr_buffer> next,
    ffi.Pointer<pixman_region32_t> damage,
  ) {
    return _wlr_client_buffer_apply_damage(
      client_buffer,
      next,
      damage,
    );
  }

  late final _wlr_client_buffer_apply_damagePtr = _lookup<
          ffi.NativeFunction<
              ffi.Bool Function(
                  ffi.Pointer<struct_wlr_client_buffer>,
                  ffi.Pointer<struct_wlr_buffer>,
                  ffi.Pointer<pixman_region32_t>)>>(
      'wlr_client_buffer_apply_damage');
  late final _wlr_client_buffer_apply_damage =
      _wlr_client_buffer_apply_damagePtr.asFunction<
          bool Function(
              ffi.Pointer<struct_wlr_client_buffer>,
              ffi.Pointer<struct_wlr_buffer>,
              ffi.Pointer<pixman_region32_t>)>();

  void wlr_output_enable(
    ffi.Pointer<struct_wlr_output> output,
    bool enable,
  ) {
    return _wlr_output_enable(
      output,
      enable,
    );
  }

  late final _wlr_output_enablePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wlr_output>, ffi.Bool)>>('wlr_output_enable');
  late final _wlr_output_enable = _wlr_output_enablePtr
      .asFunction<void Function(ffi.Pointer<struct_wlr_output>, bool)>();

  void wlr_output_create_global(
    ffi.Pointer<struct_wlr_output> output,
  ) {
    return _wlr_output_create_global(
      output,
    );
  }

  late final _wlr_output_create_globalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wlr_output>)>>('wlr_output_create_global');
  late final _wlr_output_create_global = _wlr_output_create_globalPtr
      .asFunction<void Function(ffi.Pointer<struct_wlr_output>)>();

  void wlr_output_destroy_global(
    ffi.Pointer<struct_wlr_output> output,
  ) {
    return _wlr_output_destroy_global(
      output,
    );
  }

  late final _wlr_output_destroy_globalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wlr_output>)>>('wlr_output_destroy_global');
  late final _wlr_output_destroy_global = _wlr_output_destroy_globalPtr
      .asFunction<void Function(ffi.Pointer<struct_wlr_output>)>();

  bool wlr_output_init_render(
    ffi.Pointer<struct_wlr_output> output,
    ffi.Pointer<struct_wlr_allocator> allocator,
    ffi.Pointer<struct_wlr_renderer> renderer,
  ) {
    return _wlr_output_init_render(
      output,
      allocator,
      renderer,
    );
  }

  late final _wlr_output_init_renderPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<struct_wlr_output>,
              ffi.Pointer<struct_wlr_allocator>,
              ffi.Pointer<struct_wlr_renderer>)>>('wlr_output_init_render');
  late final _wlr_output_init_render = _wlr_output_init_renderPtr.asFunction<
      bool Function(
          ffi.Pointer<struct_wlr_output>,
          ffi.Pointer<struct_wlr_allocator>,
          ffi.Pointer<struct_wlr_renderer>)>();

  ffi.Pointer<struct_wlr_output_mode> wlr_output_preferred_mode(
    ffi.Pointer<struct_wlr_output> output,
  ) {
    return _wlr_output_preferred_mode(
      output,
    );
  }

  late final _wlr_output_preferred_modePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<struct_wlr_output_mode> Function(
              ffi.Pointer<struct_wlr_output>)>>('wlr_output_preferred_mode');
  late final _wlr_output_preferred_mode =
      _wlr_output_preferred_modePtr.asFunction<
          ffi.Pointer<struct_wlr_output_mode> Function(
              ffi.Pointer<struct_wlr_output>)>();

  void wlr_output_set_mode(
    ffi.Pointer<struct_wlr_output> output,
    ffi.Pointer<struct_wlr_output_mode> mode,
  ) {
    return _wlr_output_set_mode(
      output,
      mode,
    );
  }

  late final _wlr_output_set_modePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wlr_output>,
              ffi.Pointer<struct_wlr_output_mode>)>>('wlr_output_set_mode');
  late final _wlr_output_set_mode = _wlr_output_set_modePtr.asFunction<
      void Function(ffi.Pointer<struct_wlr_output>,
          ffi.Pointer<struct_wlr_output_mode>)>();

  void wlr_output_set_custom_mode(
    ffi.Pointer<struct_wlr_output> output,
    int width,
    int height,
    int refresh,
  ) {
    return _wlr_output_set_custom_mode(
      output,
      width,
      height,
      refresh,
    );
  }

  late final _wlr_output_set_custom_modePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wlr_output>, ffi.Int32,
              ffi.Int32, ffi.Int32)>>('wlr_output_set_custom_mode');
  late final _wlr_output_set_custom_mode =
      _wlr_output_set_custom_modePtr.asFunction<
          void Function(ffi.Pointer<struct_wlr_output>, int, int, int)>();

  void wlr_output_set_transform(
    ffi.Pointer<struct_wlr_output> output,
    int transform,
  ) {
    return _wlr_output_set_transform(
      output,
      transform,
    );
  }

  late final _wlr_output_set_transformPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wlr_output>,
              ffi.Int32)>>('wlr_output_set_transform');
  late final _wlr_output_set_transform = _wlr_output_set_transformPtr
      .asFunction<void Function(ffi.Pointer<struct_wlr_output>, int)>();

  void wlr_output_enable_adaptive_sync(
    ffi.Pointer<struct_wlr_output> output,
    bool enabled,
  ) {
    return _wlr_output_enable_adaptive_sync(
      output,
      enabled,
    );
  }

  late final _wlr_output_enable_adaptive_syncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wlr_output>,
              ffi.Bool)>>('wlr_output_enable_adaptive_sync');
  late final _wlr_output_enable_adaptive_sync =
      _wlr_output_enable_adaptive_syncPtr
          .asFunction<void Function(ffi.Pointer<struct_wlr_output>, bool)>();

  void wlr_output_set_render_format(
    ffi.Pointer<struct_wlr_output> output,
    int format,
  ) {
    return _wlr_output_set_render_format(
      output,
      format,
    );
  }

  late final _wlr_output_set_render_formatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wlr_output>,
              ffi.Uint32)>>('wlr_output_set_render_format');
  late final _wlr_output_set_render_format = _wlr_output_set_render_formatPtr
      .asFunction<void Function(ffi.Pointer<struct_wlr_output>, int)>();

  void wlr_output_set_scale(
    ffi.Pointer<struct_wlr_output> output,
    double scale,
  ) {
    return _wlr_output_set_scale(
      output,
      scale,
    );
  }

  late final _wlr_output_set_scalePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wlr_output>,
              ffi.Float)>>('wlr_output_set_scale');
  late final _wlr_output_set_scale = _wlr_output_set_scalePtr
      .asFunction<void Function(ffi.Pointer<struct_wlr_output>, double)>();

  void wlr_output_set_subpixel(
    ffi.Pointer<struct_wlr_output> output,
    int subpixel,
  ) {
    return _wlr_output_set_subpixel(
      output,
      subpixel,
    );
  }

  late final _wlr_output_set_subpixelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wlr_output>,
              ffi.Int32)>>('wlr_output_set_subpixel');
  late final _wlr_output_set_subpixel = _wlr_output_set_subpixelPtr
      .asFunction<void Function(ffi.Pointer<struct_wlr_output>, int)>();

  void wlr_output_set_name(
    ffi.Pointer<struct_wlr_output> output,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _wlr_output_set_name(
      output,
      name,
    );
  }

  late final _wlr_output_set_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wlr_output>,
              ffi.Pointer<ffi.Char>)>>('wlr_output_set_name');
  late final _wlr_output_set_name = _wlr_output_set_namePtr.asFunction<
      void Function(ffi.Pointer<struct_wlr_output>, ffi.Pointer<ffi.Char>)>();

  void wlr_output_set_description(
    ffi.Pointer<struct_wlr_output> output,
    ffi.Pointer<ffi.Char> desc,
  ) {
    return _wlr_output_set_description(
      output,
      desc,
    );
  }

  late final _wlr_output_set_descriptionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wlr_output>,
              ffi.Pointer<ffi.Char>)>>('wlr_output_set_description');
  late final _wlr_output_set_description =
      _wlr_output_set_descriptionPtr.asFunction<
          void Function(
              ffi.Pointer<struct_wlr_output>, ffi.Pointer<ffi.Char>)>();

  void wlr_output_schedule_done(
    ffi.Pointer<struct_wlr_output> output,
  ) {
    return _wlr_output_schedule_done(
      output,
    );
  }

  late final _wlr_output_schedule_donePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wlr_output>)>>('wlr_output_schedule_done');
  late final _wlr_output_schedule_done = _wlr_output_schedule_donePtr
      .asFunction<void Function(ffi.Pointer<struct_wlr_output>)>();

  void wlr_output_destroy(
    ffi.Pointer<struct_wlr_output> output,
  ) {
    return _wlr_output_destroy(
      output,
    );
  }

  late final _wlr_output_destroyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wlr_output>)>>('wlr_output_destroy');
  late final _wlr_output_destroy = _wlr_output_destroyPtr
      .asFunction<void Function(ffi.Pointer<struct_wlr_output>)>();

  void wlr_output_transformed_resolution(
    ffi.Pointer<struct_wlr_output> output,
    ffi.Pointer<ffi.Int> width,
    ffi.Pointer<ffi.Int> height,
  ) {
    return _wlr_output_transformed_resolution(
      output,
      width,
      height,
    );
  }

  late final _wlr_output_transformed_resolutionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wlr_output>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('wlr_output_transformed_resolution');
  late final _wlr_output_transformed_resolution =
      _wlr_output_transformed_resolutionPtr.asFunction<
          void Function(ffi.Pointer<struct_wlr_output>, ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>();

  void wlr_output_effective_resolution(
    ffi.Pointer<struct_wlr_output> output,
    ffi.Pointer<ffi.Int> width,
    ffi.Pointer<ffi.Int> height,
  ) {
    return _wlr_output_effective_resolution(
      output,
      width,
      height,
    );
  }

  late final _wlr_output_effective_resolutionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wlr_output>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('wlr_output_effective_resolution');
  late final _wlr_output_effective_resolution =
      _wlr_output_effective_resolutionPtr.asFunction<
          void Function(ffi.Pointer<struct_wlr_output>, ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>();

  bool wlr_output_attach_render(
    ffi.Pointer<struct_wlr_output> output,
    ffi.Pointer<ffi.Int> buffer_age,
  ) {
    return _wlr_output_attach_render(
      output,
      buffer_age,
    );
  }

  late final _wlr_output_attach_renderPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<struct_wlr_output>,
              ffi.Pointer<ffi.Int>)>>('wlr_output_attach_render');
  late final _wlr_output_attach_render =
      _wlr_output_attach_renderPtr.asFunction<
          bool Function(
              ffi.Pointer<struct_wlr_output>, ffi.Pointer<ffi.Int>)>();

  void wlr_output_attach_buffer(
    ffi.Pointer<struct_wlr_output> output,
    ffi.Pointer<struct_wlr_buffer> buffer,
  ) {
    return _wlr_output_attach_buffer(
      output,
      buffer,
    );
  }

  late final _wlr_output_attach_bufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wlr_output>,
              ffi.Pointer<struct_wlr_buffer>)>>('wlr_output_attach_buffer');
  late final _wlr_output_attach_buffer =
      _wlr_output_attach_bufferPtr.asFunction<
          void Function(ffi.Pointer<struct_wlr_output>,
              ffi.Pointer<struct_wlr_buffer>)>();

  int wlr_output_preferred_read_format(
    ffi.Pointer<struct_wlr_output> output,
  ) {
    return _wlr_output_preferred_read_format(
      output,
    );
  }

  late final _wlr_output_preferred_read_formatPtr = _lookup<
          ffi.NativeFunction<
              ffi.Uint32 Function(ffi.Pointer<struct_wlr_output>)>>(
      'wlr_output_preferred_read_format');
  late final _wlr_output_preferred_read_format =
      _wlr_output_preferred_read_formatPtr
          .asFunction<int Function(ffi.Pointer<struct_wlr_output>)>();

  void wlr_output_set_damage(
    ffi.Pointer<struct_wlr_output> output,
    ffi.Pointer<pixman_region32_t> damage,
  ) {
    return _wlr_output_set_damage(
      output,
      damage,
    );
  }

  late final _wlr_output_set_damagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wlr_output>,
              ffi.Pointer<pixman_region32_t>)>>('wlr_output_set_damage');
  late final _wlr_output_set_damage = _wlr_output_set_damagePtr.asFunction<
      void Function(
          ffi.Pointer<struct_wlr_output>, ffi.Pointer<pixman_region32_t>)>();

  bool wlr_output_test(
    ffi.Pointer<struct_wlr_output> output,
  ) {
    return _wlr_output_test(
      output,
    );
  }

  late final _wlr_output_testPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<struct_wlr_output>)>>('wlr_output_test');
  late final _wlr_output_test = _wlr_output_testPtr
      .asFunction<bool Function(ffi.Pointer<struct_wlr_output>)>();

  bool wlr_output_commit(
    ffi.Pointer<struct_wlr_output> output,
  ) {
    return _wlr_output_commit(
      output,
    );
  }

  late final _wlr_output_commitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<struct_wlr_output>)>>('wlr_output_commit');
  late final _wlr_output_commit = _wlr_output_commitPtr
      .asFunction<bool Function(ffi.Pointer<struct_wlr_output>)>();

  void wlr_output_rollback(
    ffi.Pointer<struct_wlr_output> output,
  ) {
    return _wlr_output_rollback(
      output,
    );
  }

  late final _wlr_output_rollbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wlr_output>)>>('wlr_output_rollback');
  late final _wlr_output_rollback = _wlr_output_rollbackPtr
      .asFunction<void Function(ffi.Pointer<struct_wlr_output>)>();

  void wlr_output_schedule_frame(
    ffi.Pointer<struct_wlr_output> output,
  ) {
    return _wlr_output_schedule_frame(
      output,
    );
  }

  late final _wlr_output_schedule_framePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wlr_output>)>>('wlr_output_schedule_frame');
  late final _wlr_output_schedule_frame = _wlr_output_schedule_framePtr
      .asFunction<void Function(ffi.Pointer<struct_wlr_output>)>();

  int wlr_output_get_gamma_size(
    ffi.Pointer<struct_wlr_output> output,
  ) {
    return _wlr_output_get_gamma_size(
      output,
    );
  }

  late final _wlr_output_get_gamma_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(
              ffi.Pointer<struct_wlr_output>)>>('wlr_output_get_gamma_size');
  late final _wlr_output_get_gamma_size = _wlr_output_get_gamma_sizePtr
      .asFunction<int Function(ffi.Pointer<struct_wlr_output>)>();

  void wlr_output_set_gamma(
    ffi.Pointer<struct_wlr_output> output,
    int size,
    ffi.Pointer<ffi.Uint16> r,
    ffi.Pointer<ffi.Uint16> g,
    ffi.Pointer<ffi.Uint16> b,
  ) {
    return _wlr_output_set_gamma(
      output,
      size,
      r,
      g,
      b,
    );
  }

  late final _wlr_output_set_gammaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wlr_output>,
              ffi.Size,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>)>>('wlr_output_set_gamma');
  late final _wlr_output_set_gamma = _wlr_output_set_gammaPtr.asFunction<
      void Function(
          ffi.Pointer<struct_wlr_output>,
          int,
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>)>();

  ffi.Pointer<struct_wlr_output> wlr_output_from_resource(
    ffi.Pointer<struct_wl_resource> resource,
  ) {
    return _wlr_output_from_resource(
      resource,
    );
  }

  late final _wlr_output_from_resourcePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<struct_wlr_output> Function(
              ffi.Pointer<struct_wl_resource>)>>('wlr_output_from_resource');
  late final _wlr_output_from_resource =
      _wlr_output_from_resourcePtr.asFunction<
          ffi.Pointer<struct_wlr_output> Function(
              ffi.Pointer<struct_wl_resource>)>();

  void wlr_output_lock_attach_render(
    ffi.Pointer<struct_wlr_output> output,
    bool lock,
  ) {
    return _wlr_output_lock_attach_render(
      output,
      lock,
    );
  }

  late final _wlr_output_lock_attach_renderPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wlr_output>,
              ffi.Bool)>>('wlr_output_lock_attach_render');
  late final _wlr_output_lock_attach_render = _wlr_output_lock_attach_renderPtr
      .asFunction<void Function(ffi.Pointer<struct_wlr_output>, bool)>();

  void wlr_output_lock_software_cursors(
    ffi.Pointer<struct_wlr_output> output,
    bool lock,
  ) {
    return _wlr_output_lock_software_cursors(
      output,
      lock,
    );
  }

  late final _wlr_output_lock_software_cursorsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wlr_output>,
              ffi.Bool)>>('wlr_output_lock_software_cursors');
  late final _wlr_output_lock_software_cursors =
      _wlr_output_lock_software_cursorsPtr
          .asFunction<void Function(ffi.Pointer<struct_wlr_output>, bool)>();

  void wlr_output_render_software_cursors(
    ffi.Pointer<struct_wlr_output> output,
    ffi.Pointer<pixman_region32_t> damage,
  ) {
    return _wlr_output_render_software_cursors(
      output,
      damage,
    );
  }

  late final _wlr_output_render_software_cursorsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<struct_wlr_output>,
                  ffi.Pointer<pixman_region32_t>)>>(
      'wlr_output_render_software_cursors');
  late final _wlr_output_render_software_cursors =
      _wlr_output_render_software_cursorsPtr.asFunction<
          void Function(ffi.Pointer<struct_wlr_output>,
              ffi.Pointer<pixman_region32_t>)>();

  ffi.Pointer<struct_wlr_drm_format_set> wlr_output_get_primary_formats(
    ffi.Pointer<struct_wlr_output> output,
    int buffer_caps,
  ) {
    return _wlr_output_get_primary_formats(
      output,
      buffer_caps,
    );
  }

  late final _wlr_output_get_primary_formatsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<struct_wlr_drm_format_set> Function(
              ffi.Pointer<struct_wlr_output>,
              ffi.Uint32)>>('wlr_output_get_primary_formats');
  late final _wlr_output_get_primary_formats =
      _wlr_output_get_primary_formatsPtr.asFunction<
          ffi.Pointer<struct_wlr_drm_format_set> Function(
              ffi.Pointer<struct_wlr_output>, int)>();

  ffi.Pointer<struct_wlr_output_cursor> wlr_output_cursor_create(
    ffi.Pointer<struct_wlr_output> output,
  ) {
    return _wlr_output_cursor_create(
      output,
    );
  }

  late final _wlr_output_cursor_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<struct_wlr_output_cursor> Function(
              ffi.Pointer<struct_wlr_output>)>>('wlr_output_cursor_create');
  late final _wlr_output_cursor_create =
      _wlr_output_cursor_createPtr.asFunction<
          ffi.Pointer<struct_wlr_output_cursor> Function(
              ffi.Pointer<struct_wlr_output>)>();

  bool wlr_output_cursor_set_image(
    ffi.Pointer<struct_wlr_output_cursor> cursor,
    ffi.Pointer<ffi.Uint8> pixels,
    int stride,
    int width,
    int height,
    int hotspot_x,
    int hotspot_y,
  ) {
    return _wlr_output_cursor_set_image(
      cursor,
      pixels,
      stride,
      width,
      height,
      hotspot_x,
      hotspot_y,
    );
  }

  late final _wlr_output_cursor_set_imagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<struct_wlr_output_cursor>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int32,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Int32,
              ffi.Int32)>>('wlr_output_cursor_set_image');
  late final _wlr_output_cursor_set_image =
      _wlr_output_cursor_set_imagePtr.asFunction<
          bool Function(ffi.Pointer<struct_wlr_output_cursor>,
              ffi.Pointer<ffi.Uint8>, int, int, int, int, int)>();

  void wlr_output_cursor_set_surface(
    ffi.Pointer<struct_wlr_output_cursor> cursor,
    ffi.Pointer<struct_wlr_surface> surface,
    int hotspot_x,
    int hotspot_y,
  ) {
    return _wlr_output_cursor_set_surface(
      cursor,
      surface,
      hotspot_x,
      hotspot_y,
    );
  }

  late final _wlr_output_cursor_set_surfacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wlr_output_cursor>,
              ffi.Pointer<struct_wlr_surface>,
              ffi.Int32,
              ffi.Int32)>>('wlr_output_cursor_set_surface');
  late final _wlr_output_cursor_set_surface =
      _wlr_output_cursor_set_surfacePtr.asFunction<
          void Function(ffi.Pointer<struct_wlr_output_cursor>,
              ffi.Pointer<struct_wlr_surface>, int, int)>();

  bool wlr_output_cursor_move(
    ffi.Pointer<struct_wlr_output_cursor> cursor,
    double x,
    double y,
  ) {
    return _wlr_output_cursor_move(
      cursor,
      x,
      y,
    );
  }

  late final _wlr_output_cursor_movePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<struct_wlr_output_cursor>, ffi.Double,
              ffi.Double)>>('wlr_output_cursor_move');
  late final _wlr_output_cursor_move = _wlr_output_cursor_movePtr.asFunction<
      bool Function(ffi.Pointer<struct_wlr_output_cursor>, double, double)>();

  void wlr_output_cursor_destroy(
    ffi.Pointer<struct_wlr_output_cursor> cursor,
  ) {
    return _wlr_output_cursor_destroy(
      cursor,
    );
  }

  late final _wlr_output_cursor_destroyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<struct_wlr_output_cursor>)>>(
      'wlr_output_cursor_destroy');
  late final _wlr_output_cursor_destroy = _wlr_output_cursor_destroyPtr
      .asFunction<void Function(ffi.Pointer<struct_wlr_output_cursor>)>();

  int wlr_output_transform_invert(
    int tr,
  ) {
    return _wlr_output_transform_invert(
      tr,
    );
  }

  late final _wlr_output_transform_invertPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>(
          'wlr_output_transform_invert');
  late final _wlr_output_transform_invert =
      _wlr_output_transform_invertPtr.asFunction<int Function(int)>();

  int wlr_output_transform_compose(
    int tr_a,
    int tr_b,
  ) {
    return _wlr_output_transform_compose(
      tr_a,
      tr_b,
    );
  }

  late final _wlr_output_transform_composePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Int32)>>(
          'wlr_output_transform_compose');
  late final _wlr_output_transform_compose =
      _wlr_output_transform_composePtr.asFunction<int Function(int, int)>();

  ffi.Pointer<struct_wlr_output_damage> wlr_output_damage_create(
    ffi.Pointer<struct_wlr_output> output,
  ) {
    return _wlr_output_damage_create(
      output,
    );
  }

  late final _wlr_output_damage_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<struct_wlr_output_damage> Function(
              ffi.Pointer<struct_wlr_output>)>>('wlr_output_damage_create');
  late final _wlr_output_damage_create =
      _wlr_output_damage_createPtr.asFunction<
          ffi.Pointer<struct_wlr_output_damage> Function(
              ffi.Pointer<struct_wlr_output>)>();

  void wlr_output_damage_destroy(
    ffi.Pointer<struct_wlr_output_damage> output_damage,
  ) {
    return _wlr_output_damage_destroy(
      output_damage,
    );
  }

  late final _wlr_output_damage_destroyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<struct_wlr_output_damage>)>>(
      'wlr_output_damage_destroy');
  late final _wlr_output_damage_destroy = _wlr_output_damage_destroyPtr
      .asFunction<void Function(ffi.Pointer<struct_wlr_output_damage>)>();

  bool wlr_output_damage_attach_render(
    ffi.Pointer<struct_wlr_output_damage> output_damage,
    ffi.Pointer<ffi.Bool> needs_frame,
    ffi.Pointer<pixman_region32_t> buffer_damage,
  ) {
    return _wlr_output_damage_attach_render(
      output_damage,
      needs_frame,
      buffer_damage,
    );
  }

  late final _wlr_output_damage_attach_renderPtr = _lookup<
          ffi.NativeFunction<
              ffi.Bool Function(ffi.Pointer<struct_wlr_output_damage>,
                  ffi.Pointer<ffi.Bool>, ffi.Pointer<pixman_region32_t>)>>(
      'wlr_output_damage_attach_render');
  late final _wlr_output_damage_attach_render =
      _wlr_output_damage_attach_renderPtr.asFunction<
          bool Function(ffi.Pointer<struct_wlr_output_damage>,
              ffi.Pointer<ffi.Bool>, ffi.Pointer<pixman_region32_t>)>();

  void wlr_output_damage_add(
    ffi.Pointer<struct_wlr_output_damage> output_damage,
    ffi.Pointer<pixman_region32_t> damage,
  ) {
    return _wlr_output_damage_add(
      output_damage,
      damage,
    );
  }

  late final _wlr_output_damage_addPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wlr_output_damage>,
              ffi.Pointer<pixman_region32_t>)>>('wlr_output_damage_add');
  late final _wlr_output_damage_add = _wlr_output_damage_addPtr.asFunction<
      void Function(ffi.Pointer<struct_wlr_output_damage>,
          ffi.Pointer<pixman_region32_t>)>();

  void wlr_output_damage_add_whole(
    ffi.Pointer<struct_wlr_output_damage> output_damage,
  ) {
    return _wlr_output_damage_add_whole(
      output_damage,
    );
  }

  late final _wlr_output_damage_add_wholePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<struct_wlr_output_damage>)>>(
      'wlr_output_damage_add_whole');
  late final _wlr_output_damage_add_whole = _wlr_output_damage_add_wholePtr
      .asFunction<void Function(ffi.Pointer<struct_wlr_output_damage>)>();

  void wlr_output_damage_add_box(
    ffi.Pointer<struct_wlr_output_damage> output_damage,
    ffi.Pointer<struct_wlr_box> box,
  ) {
    return _wlr_output_damage_add_box(
      output_damage,
      box,
    );
  }

  late final _wlr_output_damage_add_boxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wlr_output_damage>,
              ffi.Pointer<struct_wlr_box>)>>('wlr_output_damage_add_box');
  late final _wlr_output_damage_add_box =
      _wlr_output_damage_add_boxPtr.asFunction<
          void Function(ffi.Pointer<struct_wlr_output_damage>,
              ffi.Pointer<struct_wlr_box>)>();

  void wlr_box_closest_point(
    ffi.Pointer<struct_wlr_box> box,
    double x,
    double y,
    ffi.Pointer<ffi.Double> dest_x,
    ffi.Pointer<ffi.Double> dest_y,
  ) {
    return _wlr_box_closest_point(
      box,
      x,
      y,
      dest_x,
      dest_y,
    );
  }

  late final _wlr_box_closest_pointPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wlr_box>,
              ffi.Double,
              ffi.Double,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('wlr_box_closest_point');
  late final _wlr_box_closest_point = _wlr_box_closest_pointPtr.asFunction<
      void Function(ffi.Pointer<struct_wlr_box>, double, double,
          ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>)>();

  bool wlr_box_intersection(
    ffi.Pointer<struct_wlr_box> dest,
    ffi.Pointer<struct_wlr_box> box_a,
    ffi.Pointer<struct_wlr_box> box_b,
  ) {
    return _wlr_box_intersection(
      dest,
      box_a,
      box_b,
    );
  }

  late final _wlr_box_intersectionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<struct_wlr_box>,
              ffi.Pointer<struct_wlr_box>,
              ffi.Pointer<struct_wlr_box>)>>('wlr_box_intersection');
  late final _wlr_box_intersection = _wlr_box_intersectionPtr.asFunction<
      bool Function(ffi.Pointer<struct_wlr_box>, ffi.Pointer<struct_wlr_box>,
          ffi.Pointer<struct_wlr_box>)>();

  bool wlr_box_contains_point(
    ffi.Pointer<struct_wlr_box> box,
    double x,
    double y,
  ) {
    return _wlr_box_contains_point(
      box,
      x,
      y,
    );
  }

  late final _wlr_box_contains_pointPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<struct_wlr_box>, ffi.Double,
              ffi.Double)>>('wlr_box_contains_point');
  late final _wlr_box_contains_point = _wlr_box_contains_pointPtr
      .asFunction<bool Function(ffi.Pointer<struct_wlr_box>, double, double)>();

  bool wlr_box_empty(
    ffi.Pointer<struct_wlr_box> box,
  ) {
    return _wlr_box_empty(
      box,
    );
  }

  late final _wlr_box_emptyPtr = _lookup<
          ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<struct_wlr_box>)>>(
      'wlr_box_empty');
  late final _wlr_box_empty = _wlr_box_emptyPtr
      .asFunction<bool Function(ffi.Pointer<struct_wlr_box>)>();

  void wlr_box_transform(
    ffi.Pointer<struct_wlr_box> dest,
    ffi.Pointer<struct_wlr_box> box,
    int transform,
    int width,
    int height,
  ) {
    return _wlr_box_transform(
      dest,
      box,
      transform,
      width,
      height,
    );
  }

  late final _wlr_box_transformPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wlr_box>,
              ffi.Pointer<struct_wlr_box>,
              ffi.Int32,
              ffi.Int,
              ffi.Int)>>('wlr_box_transform');
  late final _wlr_box_transform = _wlr_box_transformPtr.asFunction<
      void Function(ffi.Pointer<struct_wlr_box>, ffi.Pointer<struct_wlr_box>,
          int, int, int)>();

  bool wlr_fbox_empty(
    ffi.Pointer<struct_wlr_fbox> box,
  ) {
    return _wlr_fbox_empty(
      box,
    );
  }

  late final _wlr_fbox_emptyPtr = _lookup<
          ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<struct_wlr_fbox>)>>(
      'wlr_fbox_empty');
  late final _wlr_fbox_empty = _wlr_fbox_emptyPtr
      .asFunction<bool Function(ffi.Pointer<struct_wlr_fbox>)>();

  void wlr_fbox_transform(
    ffi.Pointer<struct_wlr_fbox> dest,
    ffi.Pointer<struct_wlr_fbox> box,
    int transform,
    double width,
    double height,
  ) {
    return _wlr_fbox_transform(
      dest,
      box,
      transform,
      width,
      height,
    );
  }

  late final _wlr_fbox_transformPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wlr_fbox>,
              ffi.Pointer<struct_wlr_fbox>,
              ffi.Int32,
              ffi.Double,
              ffi.Double)>>('wlr_fbox_transform');
  late final _wlr_fbox_transform = _wlr_fbox_transformPtr.asFunction<
      void Function(ffi.Pointer<struct_wlr_fbox>, ffi.Pointer<struct_wlr_fbox>,
          int, double, double)>();

  bool wlr_surface_set_role(
    ffi.Pointer<struct_wlr_surface> surface,
    ffi.Pointer<struct_wlr_surface_role> role,
    ffi.Pointer<ffi.Void> role_data,
    ffi.Pointer<struct_wl_resource> error_resource,
    int error_code,
  ) {
    return _wlr_surface_set_role(
      surface,
      role,
      role_data,
      error_resource,
      error_code,
    );
  }

  late final _wlr_surface_set_rolePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<struct_wlr_surface>,
              ffi.Pointer<struct_wlr_surface_role>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<struct_wl_resource>,
              ffi.Uint32)>>('wlr_surface_set_role');
  late final _wlr_surface_set_role = _wlr_surface_set_rolePtr.asFunction<
      bool Function(
          ffi.Pointer<struct_wlr_surface>,
          ffi.Pointer<struct_wlr_surface_role>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<struct_wl_resource>,
          int)>();

  bool wlr_surface_has_buffer(
    ffi.Pointer<struct_wlr_surface> surface,
  ) {
    return _wlr_surface_has_buffer(
      surface,
    );
  }

  late final _wlr_surface_has_bufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<struct_wlr_surface>)>>('wlr_surface_has_buffer');
  late final _wlr_surface_has_buffer = _wlr_surface_has_bufferPtr
      .asFunction<bool Function(ffi.Pointer<struct_wlr_surface>)>();

  ffi.Pointer<struct_wlr_texture> wlr_surface_get_texture(
    ffi.Pointer<struct_wlr_surface> surface,
  ) {
    return _wlr_surface_get_texture(
      surface,
    );
  }

  late final _wlr_surface_get_texturePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<struct_wlr_texture> Function(
              ffi.Pointer<struct_wlr_surface>)>>('wlr_surface_get_texture');
  late final _wlr_surface_get_texture = _wlr_surface_get_texturePtr.asFunction<
      ffi.Pointer<struct_wlr_texture> Function(
          ffi.Pointer<struct_wlr_surface>)>();

  ffi.Pointer<struct_wlr_surface> wlr_surface_get_root_surface(
    ffi.Pointer<struct_wlr_surface> surface,
  ) {
    return _wlr_surface_get_root_surface(
      surface,
    );
  }

  late final _wlr_surface_get_root_surfacePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<struct_wlr_surface> Function(
                  ffi.Pointer<struct_wlr_surface>)>>(
      'wlr_surface_get_root_surface');
  late final _wlr_surface_get_root_surface =
      _wlr_surface_get_root_surfacePtr.asFunction<
          ffi.Pointer<struct_wlr_surface> Function(
              ffi.Pointer<struct_wlr_surface>)>();

  bool wlr_surface_point_accepts_input(
    ffi.Pointer<struct_wlr_surface> surface,
    double sx,
    double sy,
  ) {
    return _wlr_surface_point_accepts_input(
      surface,
      sx,
      sy,
    );
  }

  late final _wlr_surface_point_accepts_inputPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<struct_wlr_surface>, ffi.Double,
              ffi.Double)>>('wlr_surface_point_accepts_input');
  late final _wlr_surface_point_accepts_input =
      _wlr_surface_point_accepts_inputPtr.asFunction<
          bool Function(ffi.Pointer<struct_wlr_surface>, double, double)>();

  ffi.Pointer<struct_wlr_surface> wlr_surface_surface_at(
    ffi.Pointer<struct_wlr_surface> surface,
    double sx,
    double sy,
    ffi.Pointer<ffi.Double> sub_x,
    ffi.Pointer<ffi.Double> sub_y,
  ) {
    return _wlr_surface_surface_at(
      surface,
      sx,
      sy,
      sub_x,
      sub_y,
    );
  }

  late final _wlr_surface_surface_atPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<struct_wlr_surface> Function(
              ffi.Pointer<struct_wlr_surface>,
              ffi.Double,
              ffi.Double,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('wlr_surface_surface_at');
  late final _wlr_surface_surface_at = _wlr_surface_surface_atPtr.asFunction<
      ffi.Pointer<struct_wlr_surface> Function(ffi.Pointer<struct_wlr_surface>,
          double, double, ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>)>();

  void wlr_surface_send_enter(
    ffi.Pointer<struct_wlr_surface> surface,
    ffi.Pointer<struct_wlr_output> output,
  ) {
    return _wlr_surface_send_enter(
      surface,
      output,
    );
  }

  late final _wlr_surface_send_enterPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wlr_surface>,
              ffi.Pointer<struct_wlr_output>)>>('wlr_surface_send_enter');
  late final _wlr_surface_send_enter = _wlr_surface_send_enterPtr.asFunction<
      void Function(
          ffi.Pointer<struct_wlr_surface>, ffi.Pointer<struct_wlr_output>)>();

  void wlr_surface_send_leave(
    ffi.Pointer<struct_wlr_surface> surface,
    ffi.Pointer<struct_wlr_output> output,
  ) {
    return _wlr_surface_send_leave(
      surface,
      output,
    );
  }

  late final _wlr_surface_send_leavePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wlr_surface>,
              ffi.Pointer<struct_wlr_output>)>>('wlr_surface_send_leave');
  late final _wlr_surface_send_leave = _wlr_surface_send_leavePtr.asFunction<
      void Function(
          ffi.Pointer<struct_wlr_surface>, ffi.Pointer<struct_wlr_output>)>();

  void wlr_surface_send_frame_done(
    ffi.Pointer<struct_wlr_surface> surface,
    ffi.Pointer<struct_timespec> when,
  ) {
    return _wlr_surface_send_frame_done(
      surface,
      when,
    );
  }

  late final _wlr_surface_send_frame_donePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wlr_surface>,
              ffi.Pointer<struct_timespec>)>>('wlr_surface_send_frame_done');
  late final _wlr_surface_send_frame_done =
      _wlr_surface_send_frame_donePtr.asFunction<
          void Function(
              ffi.Pointer<struct_wlr_surface>, ffi.Pointer<struct_timespec>)>();

  void wlr_surface_get_extends(
    ffi.Pointer<struct_wlr_surface> surface,
    ffi.Pointer<struct_wlr_box> box,
  ) {
    return _wlr_surface_get_extends(
      surface,
      box,
    );
  }

  late final _wlr_surface_get_extendsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wlr_surface>,
              ffi.Pointer<struct_wlr_box>)>>('wlr_surface_get_extends');
  late final _wlr_surface_get_extends = _wlr_surface_get_extendsPtr.asFunction<
      void Function(
          ffi.Pointer<struct_wlr_surface>, ffi.Pointer<struct_wlr_box>)>();

  ffi.Pointer<struct_wlr_surface> wlr_surface_from_resource(
    ffi.Pointer<struct_wl_resource> resource,
  ) {
    return _wlr_surface_from_resource(
      resource,
    );
  }

  late final _wlr_surface_from_resourcePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<struct_wlr_surface> Function(
              ffi.Pointer<struct_wl_resource>)>>('wlr_surface_from_resource');
  late final _wlr_surface_from_resource =
      _wlr_surface_from_resourcePtr.asFunction<
          ffi.Pointer<struct_wlr_surface> Function(
              ffi.Pointer<struct_wl_resource>)>();

  void wlr_surface_for_each_surface(
    ffi.Pointer<struct_wlr_surface> surface,
    wlr_surface_iterator_func_t iterator,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _wlr_surface_for_each_surface(
      surface,
      iterator,
      user_data,
    );
  }

  late final _wlr_surface_for_each_surfacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wlr_surface>,
              wlr_surface_iterator_func_t,
              ffi.Pointer<ffi.Void>)>>('wlr_surface_for_each_surface');
  late final _wlr_surface_for_each_surface =
      _wlr_surface_for_each_surfacePtr.asFunction<
          void Function(ffi.Pointer<struct_wlr_surface>,
              wlr_surface_iterator_func_t, ffi.Pointer<ffi.Void>)>();

  void wlr_surface_get_effective_damage(
    ffi.Pointer<struct_wlr_surface> surface,
    ffi.Pointer<pixman_region32_t> damage,
  ) {
    return _wlr_surface_get_effective_damage(
      surface,
      damage,
    );
  }

  late final _wlr_surface_get_effective_damagePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<struct_wlr_surface>,
                  ffi.Pointer<pixman_region32_t>)>>(
      'wlr_surface_get_effective_damage');
  late final _wlr_surface_get_effective_damage =
      _wlr_surface_get_effective_damagePtr.asFunction<
          void Function(ffi.Pointer<struct_wlr_surface>,
              ffi.Pointer<pixman_region32_t>)>();

  void wlr_surface_get_buffer_source_box(
    ffi.Pointer<struct_wlr_surface> surface,
    ffi.Pointer<struct_wlr_fbox> box,
  ) {
    return _wlr_surface_get_buffer_source_box(
      surface,
      box,
    );
  }

  late final _wlr_surface_get_buffer_source_boxPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<struct_wlr_surface>,
                  ffi.Pointer<struct_wlr_fbox>)>>(
      'wlr_surface_get_buffer_source_box');
  late final _wlr_surface_get_buffer_source_box =
      _wlr_surface_get_buffer_source_boxPtr.asFunction<
          void Function(
              ffi.Pointer<struct_wlr_surface>, ffi.Pointer<struct_wlr_fbox>)>();

  int wlr_surface_lock_pending(
    ffi.Pointer<struct_wlr_surface> surface,
  ) {
    return _wlr_surface_lock_pending(
      surface,
    );
  }

  late final _wlr_surface_lock_pendingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint32 Function(
              ffi.Pointer<struct_wlr_surface>)>>('wlr_surface_lock_pending');
  late final _wlr_surface_lock_pending = _wlr_surface_lock_pendingPtr
      .asFunction<int Function(ffi.Pointer<struct_wlr_surface>)>();

  void wlr_surface_unlock_cached(
    ffi.Pointer<struct_wlr_surface> surface,
    int seq,
  ) {
    return _wlr_surface_unlock_cached(
      surface,
      seq,
    );
  }

  late final _wlr_surface_unlock_cachedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wlr_surface>,
              ffi.Uint32)>>('wlr_surface_unlock_cached');
  late final _wlr_surface_unlock_cached = _wlr_surface_unlock_cachedPtr
      .asFunction<void Function(ffi.Pointer<struct_wlr_surface>, int)>();

  ffi.Pointer<struct_wlr_seat> wlr_seat_create(
    ffi.Pointer<struct_wl_display> display,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _wlr_seat_create(
      display,
      name,
    );
  }

  late final _wlr_seat_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<struct_wlr_seat> Function(ffi.Pointer<struct_wl_display>,
              ffi.Pointer<ffi.Char>)>>('wlr_seat_create');
  late final _wlr_seat_create = _wlr_seat_createPtr.asFunction<
      ffi.Pointer<struct_wlr_seat> Function(
          ffi.Pointer<struct_wl_display>, ffi.Pointer<ffi.Char>)>();

  void wlr_seat_destroy(
    ffi.Pointer<struct_wlr_seat> wlr_seat,
  ) {
    return _wlr_seat_destroy(
      wlr_seat,
    );
  }

  late final _wlr_seat_destroyPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<struct_wlr_seat>)>>(
      'wlr_seat_destroy');
  late final _wlr_seat_destroy = _wlr_seat_destroyPtr
      .asFunction<void Function(ffi.Pointer<struct_wlr_seat>)>();

  ffi.Pointer<struct_wlr_seat_client> wlr_seat_client_for_wl_client(
    ffi.Pointer<struct_wlr_seat> wlr_seat,
    ffi.Pointer<struct_wl_client> wl_client,
  ) {
    return _wlr_seat_client_for_wl_client(
      wlr_seat,
      wl_client,
    );
  }

  late final _wlr_seat_client_for_wl_clientPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<struct_wlr_seat_client> Function(
              ffi.Pointer<struct_wlr_seat>,
              ffi.Pointer<struct_wl_client>)>>('wlr_seat_client_for_wl_client');
  late final _wlr_seat_client_for_wl_client =
      _wlr_seat_client_for_wl_clientPtr.asFunction<
          ffi.Pointer<struct_wlr_seat_client> Function(
              ffi.Pointer<struct_wlr_seat>, ffi.Pointer<struct_wl_client>)>();

  void wlr_seat_set_capabilities(
    ffi.Pointer<struct_wlr_seat> wlr_seat,
    int capabilities,
  ) {
    return _wlr_seat_set_capabilities(
      wlr_seat,
      capabilities,
    );
  }

  late final _wlr_seat_set_capabilitiesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wlr_seat>,
              ffi.Uint32)>>('wlr_seat_set_capabilities');
  late final _wlr_seat_set_capabilities = _wlr_seat_set_capabilitiesPtr
      .asFunction<void Function(ffi.Pointer<struct_wlr_seat>, int)>();

  void wlr_seat_set_name(
    ffi.Pointer<struct_wlr_seat> wlr_seat,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _wlr_seat_set_name(
      wlr_seat,
      name,
    );
  }

  late final _wlr_seat_set_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wlr_seat>,
              ffi.Pointer<ffi.Char>)>>('wlr_seat_set_name');
  late final _wlr_seat_set_name = _wlr_seat_set_namePtr.asFunction<
      void Function(ffi.Pointer<struct_wlr_seat>, ffi.Pointer<ffi.Char>)>();

  bool wlr_seat_pointer_surface_has_focus(
    ffi.Pointer<struct_wlr_seat> wlr_seat,
    ffi.Pointer<struct_wlr_surface> surface,
  ) {
    return _wlr_seat_pointer_surface_has_focus(
      wlr_seat,
      surface,
    );
  }

  late final _wlr_seat_pointer_surface_has_focusPtr = _lookup<
          ffi.NativeFunction<
              ffi.Bool Function(ffi.Pointer<struct_wlr_seat>,
                  ffi.Pointer<struct_wlr_surface>)>>(
      'wlr_seat_pointer_surface_has_focus');
  late final _wlr_seat_pointer_surface_has_focus =
      _wlr_seat_pointer_surface_has_focusPtr.asFunction<
          bool Function(
              ffi.Pointer<struct_wlr_seat>, ffi.Pointer<struct_wlr_surface>)>();

  void wlr_seat_pointer_enter(
    ffi.Pointer<struct_wlr_seat> wlr_seat,
    ffi.Pointer<struct_wlr_surface> surface,
    double sx,
    double sy,
  ) {
    return _wlr_seat_pointer_enter(
      wlr_seat,
      surface,
      sx,
      sy,
    );
  }

  late final _wlr_seat_pointer_enterPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wlr_seat>,
              ffi.Pointer<struct_wlr_surface>,
              ffi.Double,
              ffi.Double)>>('wlr_seat_pointer_enter');
  late final _wlr_seat_pointer_enter = _wlr_seat_pointer_enterPtr.asFunction<
      void Function(ffi.Pointer<struct_wlr_seat>,
          ffi.Pointer<struct_wlr_surface>, double, double)>();

  void wlr_seat_pointer_clear_focus(
    ffi.Pointer<struct_wlr_seat> wlr_seat,
  ) {
    return _wlr_seat_pointer_clear_focus(
      wlr_seat,
    );
  }

  late final _wlr_seat_pointer_clear_focusPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<struct_wlr_seat>)>>(
      'wlr_seat_pointer_clear_focus');
  late final _wlr_seat_pointer_clear_focus = _wlr_seat_pointer_clear_focusPtr
      .asFunction<void Function(ffi.Pointer<struct_wlr_seat>)>();

  void wlr_seat_pointer_send_motion(
    ffi.Pointer<struct_wlr_seat> wlr_seat,
    int time_msec,
    double sx,
    double sy,
  ) {
    return _wlr_seat_pointer_send_motion(
      wlr_seat,
      time_msec,
      sx,
      sy,
    );
  }

  late final _wlr_seat_pointer_send_motionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wlr_seat>, ffi.Uint32,
              ffi.Double, ffi.Double)>>('wlr_seat_pointer_send_motion');
  late final _wlr_seat_pointer_send_motion =
      _wlr_seat_pointer_send_motionPtr.asFunction<
          void Function(ffi.Pointer<struct_wlr_seat>, int, double, double)>();

  int wlr_seat_pointer_send_button(
    ffi.Pointer<struct_wlr_seat> wlr_seat,
    int time_msec,
    int button,
    int state,
  ) {
    return _wlr_seat_pointer_send_button(
      wlr_seat,
      time_msec,
      button,
      state,
    );
  }

  late final _wlr_seat_pointer_send_buttonPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint32 Function(ffi.Pointer<struct_wlr_seat>, ffi.Uint32,
              ffi.Uint32, ffi.Int32)>>('wlr_seat_pointer_send_button');
  late final _wlr_seat_pointer_send_button = _wlr_seat_pointer_send_buttonPtr
      .asFunction<int Function(ffi.Pointer<struct_wlr_seat>, int, int, int)>();

  void wlr_seat_pointer_send_axis(
    ffi.Pointer<struct_wlr_seat> wlr_seat,
    int time_msec,
    int orientation,
    double value,
    int value_discrete,
    int source,
  ) {
    return _wlr_seat_pointer_send_axis(
      wlr_seat,
      time_msec,
      orientation,
      value,
      value_discrete,
      source,
    );
  }

  late final _wlr_seat_pointer_send_axisPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wlr_seat>, ffi.Uint32, ffi.Int32,
              ffi.Double, ffi.Int32, ffi.Int32)>>('wlr_seat_pointer_send_axis');
  late final _wlr_seat_pointer_send_axis =
      _wlr_seat_pointer_send_axisPtr.asFunction<
          void Function(
              ffi.Pointer<struct_wlr_seat>, int, int, double, int, int)>();

  void wlr_seat_pointer_send_frame(
    ffi.Pointer<struct_wlr_seat> wlr_seat,
  ) {
    return _wlr_seat_pointer_send_frame(
      wlr_seat,
    );
  }

  late final _wlr_seat_pointer_send_framePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<struct_wlr_seat>)>>(
      'wlr_seat_pointer_send_frame');
  late final _wlr_seat_pointer_send_frame = _wlr_seat_pointer_send_framePtr
      .asFunction<void Function(ffi.Pointer<struct_wlr_seat>)>();

  void wlr_seat_pointer_notify_enter(
    ffi.Pointer<struct_wlr_seat> wlr_seat,
    ffi.Pointer<struct_wlr_surface> surface,
    double sx,
    double sy,
  ) {
    return _wlr_seat_pointer_notify_enter(
      wlr_seat,
      surface,
      sx,
      sy,
    );
  }

  late final _wlr_seat_pointer_notify_enterPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wlr_seat>,
              ffi.Pointer<struct_wlr_surface>,
              ffi.Double,
              ffi.Double)>>('wlr_seat_pointer_notify_enter');
  late final _wlr_seat_pointer_notify_enter =
      _wlr_seat_pointer_notify_enterPtr.asFunction<
          void Function(ffi.Pointer<struct_wlr_seat>,
              ffi.Pointer<struct_wlr_surface>, double, double)>();

  void wlr_seat_pointer_notify_clear_focus(
    ffi.Pointer<struct_wlr_seat> wlr_seat,
  ) {
    return _wlr_seat_pointer_notify_clear_focus(
      wlr_seat,
    );
  }

  late final _wlr_seat_pointer_notify_clear_focusPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<struct_wlr_seat>)>>(
      'wlr_seat_pointer_notify_clear_focus');
  late final _wlr_seat_pointer_notify_clear_focus =
      _wlr_seat_pointer_notify_clear_focusPtr
          .asFunction<void Function(ffi.Pointer<struct_wlr_seat>)>();

  void wlr_seat_pointer_warp(
    ffi.Pointer<struct_wlr_seat> wlr_seat,
    double sx,
    double sy,
  ) {
    return _wlr_seat_pointer_warp(
      wlr_seat,
      sx,
      sy,
    );
  }

  late final _wlr_seat_pointer_warpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wlr_seat>, ffi.Double,
              ffi.Double)>>('wlr_seat_pointer_warp');
  late final _wlr_seat_pointer_warp = _wlr_seat_pointer_warpPtr.asFunction<
      void Function(ffi.Pointer<struct_wlr_seat>, double, double)>();

  void wlr_seat_pointer_notify_motion(
    ffi.Pointer<struct_wlr_seat> wlr_seat,
    int time_msec,
    double sx,
    double sy,
  ) {
    return _wlr_seat_pointer_notify_motion(
      wlr_seat,
      time_msec,
      sx,
      sy,
    );
  }

  late final _wlr_seat_pointer_notify_motionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wlr_seat>, ffi.Uint32,
              ffi.Double, ffi.Double)>>('wlr_seat_pointer_notify_motion');
  late final _wlr_seat_pointer_notify_motion =
      _wlr_seat_pointer_notify_motionPtr.asFunction<
          void Function(ffi.Pointer<struct_wlr_seat>, int, double, double)>();

  int wlr_seat_pointer_notify_button(
    ffi.Pointer<struct_wlr_seat> wlr_seat,
    int time_msec,
    int button,
    int state,
  ) {
    return _wlr_seat_pointer_notify_button(
      wlr_seat,
      time_msec,
      button,
      state,
    );
  }

  late final _wlr_seat_pointer_notify_buttonPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint32 Function(ffi.Pointer<struct_wlr_seat>, ffi.Uint32,
              ffi.Uint32, ffi.Int32)>>('wlr_seat_pointer_notify_button');
  late final _wlr_seat_pointer_notify_button =
      _wlr_seat_pointer_notify_buttonPtr.asFunction<
          int Function(ffi.Pointer<struct_wlr_seat>, int, int, int)>();

  void wlr_seat_pointer_notify_axis(
    ffi.Pointer<struct_wlr_seat> wlr_seat,
    int time_msec,
    int orientation,
    double value,
    int value_discrete,
    int source,
  ) {
    return _wlr_seat_pointer_notify_axis(
      wlr_seat,
      time_msec,
      orientation,
      value,
      value_discrete,
      source,
    );
  }

  late final _wlr_seat_pointer_notify_axisPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wlr_seat>,
              ffi.Uint32,
              ffi.Int32,
              ffi.Double,
              ffi.Int32,
              ffi.Int32)>>('wlr_seat_pointer_notify_axis');
  late final _wlr_seat_pointer_notify_axis =
      _wlr_seat_pointer_notify_axisPtr.asFunction<
          void Function(
              ffi.Pointer<struct_wlr_seat>, int, int, double, int, int)>();

  void wlr_seat_pointer_notify_frame(
    ffi.Pointer<struct_wlr_seat> wlr_seat,
  ) {
    return _wlr_seat_pointer_notify_frame(
      wlr_seat,
    );
  }

  late final _wlr_seat_pointer_notify_framePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<struct_wlr_seat>)>>(
      'wlr_seat_pointer_notify_frame');
  late final _wlr_seat_pointer_notify_frame = _wlr_seat_pointer_notify_framePtr
      .asFunction<void Function(ffi.Pointer<struct_wlr_seat>)>();

  void wlr_seat_pointer_start_grab(
    ffi.Pointer<struct_wlr_seat> wlr_seat,
    ffi.Pointer<struct_wlr_seat_pointer_grab> grab,
  ) {
    return _wlr_seat_pointer_start_grab(
      wlr_seat,
      grab,
    );
  }

  late final _wlr_seat_pointer_start_grabPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<struct_wlr_seat>,
                  ffi.Pointer<struct_wlr_seat_pointer_grab>)>>(
      'wlr_seat_pointer_start_grab');
  late final _wlr_seat_pointer_start_grab =
      _wlr_seat_pointer_start_grabPtr.asFunction<
          void Function(ffi.Pointer<struct_wlr_seat>,
              ffi.Pointer<struct_wlr_seat_pointer_grab>)>();

  void wlr_seat_pointer_end_grab(
    ffi.Pointer<struct_wlr_seat> wlr_seat,
  ) {
    return _wlr_seat_pointer_end_grab(
      wlr_seat,
    );
  }

  late final _wlr_seat_pointer_end_grabPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<struct_wlr_seat>)>>(
      'wlr_seat_pointer_end_grab');
  late final _wlr_seat_pointer_end_grab = _wlr_seat_pointer_end_grabPtr
      .asFunction<void Function(ffi.Pointer<struct_wlr_seat>)>();

  bool wlr_seat_pointer_has_grab(
    ffi.Pointer<struct_wlr_seat> seat,
  ) {
    return _wlr_seat_pointer_has_grab(
      seat,
    );
  }

  late final _wlr_seat_pointer_has_grabPtr = _lookup<
          ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<struct_wlr_seat>)>>(
      'wlr_seat_pointer_has_grab');
  late final _wlr_seat_pointer_has_grab = _wlr_seat_pointer_has_grabPtr
      .asFunction<bool Function(ffi.Pointer<struct_wlr_seat>)>();

  void wlr_seat_set_keyboard(
    ffi.Pointer<struct_wlr_seat> seat,
    ffi.Pointer<struct_wlr_input_device> dev,
  ) {
    return _wlr_seat_set_keyboard(
      seat,
      dev,
    );
  }

  late final _wlr_seat_set_keyboardPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wlr_seat>,
              ffi.Pointer<struct_wlr_input_device>)>>('wlr_seat_set_keyboard');
  late final _wlr_seat_set_keyboard = _wlr_seat_set_keyboardPtr.asFunction<
      void Function(ffi.Pointer<struct_wlr_seat>,
          ffi.Pointer<struct_wlr_input_device>)>();

  ffi.Pointer<struct_wlr_keyboard> wlr_seat_get_keyboard(
    ffi.Pointer<struct_wlr_seat> seat,
  ) {
    return _wlr_seat_get_keyboard(
      seat,
    );
  }

  late final _wlr_seat_get_keyboardPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<struct_wlr_keyboard> Function(
              ffi.Pointer<struct_wlr_seat>)>>('wlr_seat_get_keyboard');
  late final _wlr_seat_get_keyboard = _wlr_seat_get_keyboardPtr.asFunction<
      ffi.Pointer<struct_wlr_keyboard> Function(
          ffi.Pointer<struct_wlr_seat>)>();

  void wlr_seat_keyboard_send_key(
    ffi.Pointer<struct_wlr_seat> seat,
    int time_msec,
    int key,
    int state,
  ) {
    return _wlr_seat_keyboard_send_key(
      seat,
      time_msec,
      key,
      state,
    );
  }

  late final _wlr_seat_keyboard_send_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wlr_seat>, ffi.Uint32,
              ffi.Uint32, ffi.Uint32)>>('wlr_seat_keyboard_send_key');
  late final _wlr_seat_keyboard_send_key = _wlr_seat_keyboard_send_keyPtr
      .asFunction<void Function(ffi.Pointer<struct_wlr_seat>, int, int, int)>();

  void wlr_seat_keyboard_send_modifiers(
    ffi.Pointer<struct_wlr_seat> seat,
    ffi.Pointer<struct_wlr_keyboard_modifiers> modifiers,
  ) {
    return _wlr_seat_keyboard_send_modifiers(
      seat,
      modifiers,
    );
  }

  late final _wlr_seat_keyboard_send_modifiersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<struct_wlr_seat>,
                  ffi.Pointer<struct_wlr_keyboard_modifiers>)>>(
      'wlr_seat_keyboard_send_modifiers');
  late final _wlr_seat_keyboard_send_modifiers =
      _wlr_seat_keyboard_send_modifiersPtr.asFunction<
          void Function(ffi.Pointer<struct_wlr_seat>,
              ffi.Pointer<struct_wlr_keyboard_modifiers>)>();

  void wlr_seat_keyboard_enter(
    ffi.Pointer<struct_wlr_seat> seat,
    ffi.Pointer<struct_wlr_surface> surface,
    ffi.Pointer<ffi.Uint32> keycodes,
    int num_keycodes,
    ffi.Pointer<struct_wlr_keyboard_modifiers> modifiers,
  ) {
    return _wlr_seat_keyboard_enter(
      seat,
      surface,
      keycodes,
      num_keycodes,
      modifiers,
    );
  }

  late final _wlr_seat_keyboard_enterPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<struct_wlr_seat>,
                  ffi.Pointer<struct_wlr_surface>,
                  ffi.Pointer<ffi.Uint32>,
                  ffi.Size,
                  ffi.Pointer<struct_wlr_keyboard_modifiers>)>>(
      'wlr_seat_keyboard_enter');
  late final _wlr_seat_keyboard_enter = _wlr_seat_keyboard_enterPtr.asFunction<
      void Function(
          ffi.Pointer<struct_wlr_seat>,
          ffi.Pointer<struct_wlr_surface>,
          ffi.Pointer<ffi.Uint32>,
          int,
          ffi.Pointer<struct_wlr_keyboard_modifiers>)>();

  void wlr_seat_keyboard_clear_focus(
    ffi.Pointer<struct_wlr_seat> wlr_seat,
  ) {
    return _wlr_seat_keyboard_clear_focus(
      wlr_seat,
    );
  }

  late final _wlr_seat_keyboard_clear_focusPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<struct_wlr_seat>)>>(
      'wlr_seat_keyboard_clear_focus');
  late final _wlr_seat_keyboard_clear_focus = _wlr_seat_keyboard_clear_focusPtr
      .asFunction<void Function(ffi.Pointer<struct_wlr_seat>)>();

  void wlr_seat_keyboard_notify_key(
    ffi.Pointer<struct_wlr_seat> seat,
    int time_msec,
    int key,
    int state,
  ) {
    return _wlr_seat_keyboard_notify_key(
      seat,
      time_msec,
      key,
      state,
    );
  }

  late final _wlr_seat_keyboard_notify_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wlr_seat>, ffi.Uint32,
              ffi.Uint32, ffi.Uint32)>>('wlr_seat_keyboard_notify_key');
  late final _wlr_seat_keyboard_notify_key = _wlr_seat_keyboard_notify_keyPtr
      .asFunction<void Function(ffi.Pointer<struct_wlr_seat>, int, int, int)>();

  void wlr_seat_keyboard_notify_modifiers(
    ffi.Pointer<struct_wlr_seat> seat,
    ffi.Pointer<struct_wlr_keyboard_modifiers> modifiers,
  ) {
    return _wlr_seat_keyboard_notify_modifiers(
      seat,
      modifiers,
    );
  }

  late final _wlr_seat_keyboard_notify_modifiersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<struct_wlr_seat>,
                  ffi.Pointer<struct_wlr_keyboard_modifiers>)>>(
      'wlr_seat_keyboard_notify_modifiers');
  late final _wlr_seat_keyboard_notify_modifiers =
      _wlr_seat_keyboard_notify_modifiersPtr.asFunction<
          void Function(ffi.Pointer<struct_wlr_seat>,
              ffi.Pointer<struct_wlr_keyboard_modifiers>)>();

  void wlr_seat_keyboard_notify_enter(
    ffi.Pointer<struct_wlr_seat> seat,
    ffi.Pointer<struct_wlr_surface> surface,
    ffi.Pointer<ffi.Uint32> keycodes,
    int num_keycodes,
    ffi.Pointer<struct_wlr_keyboard_modifiers> modifiers,
  ) {
    return _wlr_seat_keyboard_notify_enter(
      seat,
      surface,
      keycodes,
      num_keycodes,
      modifiers,
    );
  }

  late final _wlr_seat_keyboard_notify_enterPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<struct_wlr_seat>,
                  ffi.Pointer<struct_wlr_surface>,
                  ffi.Pointer<ffi.Uint32>,
                  ffi.Size,
                  ffi.Pointer<struct_wlr_keyboard_modifiers>)>>(
      'wlr_seat_keyboard_notify_enter');
  late final _wlr_seat_keyboard_notify_enter =
      _wlr_seat_keyboard_notify_enterPtr.asFunction<
          void Function(
              ffi.Pointer<struct_wlr_seat>,
              ffi.Pointer<struct_wlr_surface>,
              ffi.Pointer<ffi.Uint32>,
              int,
              ffi.Pointer<struct_wlr_keyboard_modifiers>)>();

  void wlr_seat_keyboard_notify_clear_focus(
    ffi.Pointer<struct_wlr_seat> wlr_seat,
  ) {
    return _wlr_seat_keyboard_notify_clear_focus(
      wlr_seat,
    );
  }

  late final _wlr_seat_keyboard_notify_clear_focusPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<struct_wlr_seat>)>>(
      'wlr_seat_keyboard_notify_clear_focus');
  late final _wlr_seat_keyboard_notify_clear_focus =
      _wlr_seat_keyboard_notify_clear_focusPtr
          .asFunction<void Function(ffi.Pointer<struct_wlr_seat>)>();

  void wlr_seat_keyboard_start_grab(
    ffi.Pointer<struct_wlr_seat> wlr_seat,
    ffi.Pointer<struct_wlr_seat_keyboard_grab> grab,
  ) {
    return _wlr_seat_keyboard_start_grab(
      wlr_seat,
      grab,
    );
  }

  late final _wlr_seat_keyboard_start_grabPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<struct_wlr_seat>,
                  ffi.Pointer<struct_wlr_seat_keyboard_grab>)>>(
      'wlr_seat_keyboard_start_grab');
  late final _wlr_seat_keyboard_start_grab =
      _wlr_seat_keyboard_start_grabPtr.asFunction<
          void Function(ffi.Pointer<struct_wlr_seat>,
              ffi.Pointer<struct_wlr_seat_keyboard_grab>)>();

  void wlr_seat_keyboard_end_grab(
    ffi.Pointer<struct_wlr_seat> wlr_seat,
  ) {
    return _wlr_seat_keyboard_end_grab(
      wlr_seat,
    );
  }

  late final _wlr_seat_keyboard_end_grabPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<struct_wlr_seat>)>>(
      'wlr_seat_keyboard_end_grab');
  late final _wlr_seat_keyboard_end_grab = _wlr_seat_keyboard_end_grabPtr
      .asFunction<void Function(ffi.Pointer<struct_wlr_seat>)>();

  bool wlr_seat_keyboard_has_grab(
    ffi.Pointer<struct_wlr_seat> seat,
  ) {
    return _wlr_seat_keyboard_has_grab(
      seat,
    );
  }

  late final _wlr_seat_keyboard_has_grabPtr = _lookup<
          ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<struct_wlr_seat>)>>(
      'wlr_seat_keyboard_has_grab');
  late final _wlr_seat_keyboard_has_grab = _wlr_seat_keyboard_has_grabPtr
      .asFunction<bool Function(ffi.Pointer<struct_wlr_seat>)>();

  ffi.Pointer<struct_wlr_touch_point> wlr_seat_touch_get_point(
    ffi.Pointer<struct_wlr_seat> seat,
    int touch_id,
  ) {
    return _wlr_seat_touch_get_point(
      seat,
      touch_id,
    );
  }

  late final _wlr_seat_touch_get_pointPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<struct_wlr_touch_point> Function(
              ffi.Pointer<struct_wlr_seat>,
              ffi.Int32)>>('wlr_seat_touch_get_point');
  late final _wlr_seat_touch_get_point =
      _wlr_seat_touch_get_pointPtr.asFunction<
          ffi.Pointer<struct_wlr_touch_point> Function(
              ffi.Pointer<struct_wlr_seat>, int)>();

  void wlr_seat_touch_point_focus(
    ffi.Pointer<struct_wlr_seat> seat,
    ffi.Pointer<struct_wlr_surface> surface,
    int time_msec,
    int touch_id,
    double sx,
    double sy,
  ) {
    return _wlr_seat_touch_point_focus(
      seat,
      surface,
      time_msec,
      touch_id,
      sx,
      sy,
    );
  }

  late final _wlr_seat_touch_point_focusPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wlr_seat>,
              ffi.Pointer<struct_wlr_surface>,
              ffi.Uint32,
              ffi.Int32,
              ffi.Double,
              ffi.Double)>>('wlr_seat_touch_point_focus');
  late final _wlr_seat_touch_point_focus =
      _wlr_seat_touch_point_focusPtr.asFunction<
          void Function(ffi.Pointer<struct_wlr_seat>,
              ffi.Pointer<struct_wlr_surface>, int, int, double, double)>();

  void wlr_seat_touch_point_clear_focus(
    ffi.Pointer<struct_wlr_seat> seat,
    int time_msec,
    int touch_id,
  ) {
    return _wlr_seat_touch_point_clear_focus(
      seat,
      time_msec,
      touch_id,
    );
  }

  late final _wlr_seat_touch_point_clear_focusPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wlr_seat>, ffi.Uint32,
              ffi.Int32)>>('wlr_seat_touch_point_clear_focus');
  late final _wlr_seat_touch_point_clear_focus =
      _wlr_seat_touch_point_clear_focusPtr
          .asFunction<void Function(ffi.Pointer<struct_wlr_seat>, int, int)>();

  int wlr_seat_touch_send_down(
    ffi.Pointer<struct_wlr_seat> seat,
    ffi.Pointer<struct_wlr_surface> surface,
    int time_msec,
    int touch_id,
    double sx,
    double sy,
  ) {
    return _wlr_seat_touch_send_down(
      seat,
      surface,
      time_msec,
      touch_id,
      sx,
      sy,
    );
  }

  late final _wlr_seat_touch_send_downPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint32 Function(
              ffi.Pointer<struct_wlr_seat>,
              ffi.Pointer<struct_wlr_surface>,
              ffi.Uint32,
              ffi.Int32,
              ffi.Double,
              ffi.Double)>>('wlr_seat_touch_send_down');
  late final _wlr_seat_touch_send_down =
      _wlr_seat_touch_send_downPtr.asFunction<
          int Function(ffi.Pointer<struct_wlr_seat>,
              ffi.Pointer<struct_wlr_surface>, int, int, double, double)>();

  void wlr_seat_touch_send_up(
    ffi.Pointer<struct_wlr_seat> seat,
    int time_msec,
    int touch_id,
  ) {
    return _wlr_seat_touch_send_up(
      seat,
      time_msec,
      touch_id,
    );
  }

  late final _wlr_seat_touch_send_upPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wlr_seat>, ffi.Uint32,
              ffi.Int32)>>('wlr_seat_touch_send_up');
  late final _wlr_seat_touch_send_up = _wlr_seat_touch_send_upPtr
      .asFunction<void Function(ffi.Pointer<struct_wlr_seat>, int, int)>();

  void wlr_seat_touch_send_motion(
    ffi.Pointer<struct_wlr_seat> seat,
    int time_msec,
    int touch_id,
    double sx,
    double sy,
  ) {
    return _wlr_seat_touch_send_motion(
      seat,
      time_msec,
      touch_id,
      sx,
      sy,
    );
  }

  late final _wlr_seat_touch_send_motionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wlr_seat>, ffi.Uint32, ffi.Int32,
              ffi.Double, ffi.Double)>>('wlr_seat_touch_send_motion');
  late final _wlr_seat_touch_send_motion =
      _wlr_seat_touch_send_motionPtr.asFunction<
          void Function(
              ffi.Pointer<struct_wlr_seat>, int, int, double, double)>();

  void wlr_seat_touch_send_frame(
    ffi.Pointer<struct_wlr_seat> seat,
  ) {
    return _wlr_seat_touch_send_frame(
      seat,
    );
  }

  late final _wlr_seat_touch_send_framePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<struct_wlr_seat>)>>(
      'wlr_seat_touch_send_frame');
  late final _wlr_seat_touch_send_frame = _wlr_seat_touch_send_framePtr
      .asFunction<void Function(ffi.Pointer<struct_wlr_seat>)>();

  int wlr_seat_touch_notify_down(
    ffi.Pointer<struct_wlr_seat> seat,
    ffi.Pointer<struct_wlr_surface> surface,
    int time_msec,
    int touch_id,
    double sx,
    double sy,
  ) {
    return _wlr_seat_touch_notify_down(
      seat,
      surface,
      time_msec,
      touch_id,
      sx,
      sy,
    );
  }

  late final _wlr_seat_touch_notify_downPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint32 Function(
              ffi.Pointer<struct_wlr_seat>,
              ffi.Pointer<struct_wlr_surface>,
              ffi.Uint32,
              ffi.Int32,
              ffi.Double,
              ffi.Double)>>('wlr_seat_touch_notify_down');
  late final _wlr_seat_touch_notify_down =
      _wlr_seat_touch_notify_downPtr.asFunction<
          int Function(ffi.Pointer<struct_wlr_seat>,
              ffi.Pointer<struct_wlr_surface>, int, int, double, double)>();

  void wlr_seat_touch_notify_up(
    ffi.Pointer<struct_wlr_seat> seat,
    int time_msec,
    int touch_id,
  ) {
    return _wlr_seat_touch_notify_up(
      seat,
      time_msec,
      touch_id,
    );
  }

  late final _wlr_seat_touch_notify_upPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wlr_seat>, ffi.Uint32,
              ffi.Int32)>>('wlr_seat_touch_notify_up');
  late final _wlr_seat_touch_notify_up = _wlr_seat_touch_notify_upPtr
      .asFunction<void Function(ffi.Pointer<struct_wlr_seat>, int, int)>();

  void wlr_seat_touch_notify_motion(
    ffi.Pointer<struct_wlr_seat> seat,
    int time_msec,
    int touch_id,
    double sx,
    double sy,
  ) {
    return _wlr_seat_touch_notify_motion(
      seat,
      time_msec,
      touch_id,
      sx,
      sy,
    );
  }

  late final _wlr_seat_touch_notify_motionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wlr_seat>, ffi.Uint32, ffi.Int32,
              ffi.Double, ffi.Double)>>('wlr_seat_touch_notify_motion');
  late final _wlr_seat_touch_notify_motion =
      _wlr_seat_touch_notify_motionPtr.asFunction<
          void Function(
              ffi.Pointer<struct_wlr_seat>, int, int, double, double)>();

  void wlr_seat_touch_notify_frame(
    ffi.Pointer<struct_wlr_seat> seat,
  ) {
    return _wlr_seat_touch_notify_frame(
      seat,
    );
  }

  late final _wlr_seat_touch_notify_framePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<struct_wlr_seat>)>>(
      'wlr_seat_touch_notify_frame');
  late final _wlr_seat_touch_notify_frame = _wlr_seat_touch_notify_framePtr
      .asFunction<void Function(ffi.Pointer<struct_wlr_seat>)>();

  int wlr_seat_touch_num_points(
    ffi.Pointer<struct_wlr_seat> seat,
  ) {
    return _wlr_seat_touch_num_points(
      seat,
    );
  }

  late final _wlr_seat_touch_num_pointsPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<struct_wlr_seat>)>>(
      'wlr_seat_touch_num_points');
  late final _wlr_seat_touch_num_points = _wlr_seat_touch_num_pointsPtr
      .asFunction<int Function(ffi.Pointer<struct_wlr_seat>)>();

  void wlr_seat_touch_start_grab(
    ffi.Pointer<struct_wlr_seat> wlr_seat,
    ffi.Pointer<struct_wlr_seat_touch_grab> grab,
  ) {
    return _wlr_seat_touch_start_grab(
      wlr_seat,
      grab,
    );
  }

  late final _wlr_seat_touch_start_grabPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<struct_wlr_seat>,
                  ffi.Pointer<struct_wlr_seat_touch_grab>)>>(
      'wlr_seat_touch_start_grab');
  late final _wlr_seat_touch_start_grab =
      _wlr_seat_touch_start_grabPtr.asFunction<
          void Function(ffi.Pointer<struct_wlr_seat>,
              ffi.Pointer<struct_wlr_seat_touch_grab>)>();

  void wlr_seat_touch_end_grab(
    ffi.Pointer<struct_wlr_seat> wlr_seat,
  ) {
    return _wlr_seat_touch_end_grab(
      wlr_seat,
    );
  }

  late final _wlr_seat_touch_end_grabPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<struct_wlr_seat>)>>(
      'wlr_seat_touch_end_grab');
  late final _wlr_seat_touch_end_grab = _wlr_seat_touch_end_grabPtr
      .asFunction<void Function(ffi.Pointer<struct_wlr_seat>)>();

  bool wlr_seat_touch_has_grab(
    ffi.Pointer<struct_wlr_seat> seat,
  ) {
    return _wlr_seat_touch_has_grab(
      seat,
    );
  }

  late final _wlr_seat_touch_has_grabPtr = _lookup<
          ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<struct_wlr_seat>)>>(
      'wlr_seat_touch_has_grab');
  late final _wlr_seat_touch_has_grab = _wlr_seat_touch_has_grabPtr
      .asFunction<bool Function(ffi.Pointer<struct_wlr_seat>)>();

  bool wlr_seat_validate_grab_serial(
    ffi.Pointer<struct_wlr_seat> seat,
    int serial,
  ) {
    return _wlr_seat_validate_grab_serial(
      seat,
      serial,
    );
  }

  late final _wlr_seat_validate_grab_serialPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<struct_wlr_seat>,
              ffi.Uint32)>>('wlr_seat_validate_grab_serial');
  late final _wlr_seat_validate_grab_serial = _wlr_seat_validate_grab_serialPtr
      .asFunction<bool Function(ffi.Pointer<struct_wlr_seat>, int)>();

  bool wlr_seat_validate_pointer_grab_serial(
    ffi.Pointer<struct_wlr_seat> seat,
    ffi.Pointer<struct_wlr_surface> origin,
    int serial,
  ) {
    return _wlr_seat_validate_pointer_grab_serial(
      seat,
      origin,
      serial,
    );
  }

  late final _wlr_seat_validate_pointer_grab_serialPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<struct_wlr_seat>,
              ffi.Pointer<struct_wlr_surface>,
              ffi.Uint32)>>('wlr_seat_validate_pointer_grab_serial');
  late final _wlr_seat_validate_pointer_grab_serial =
      _wlr_seat_validate_pointer_grab_serialPtr.asFunction<
          bool Function(ffi.Pointer<struct_wlr_seat>,
              ffi.Pointer<struct_wlr_surface>, int)>();

  bool wlr_seat_validate_touch_grab_serial(
    ffi.Pointer<struct_wlr_seat> seat,
    ffi.Pointer<struct_wlr_surface> origin,
    int serial,
    ffi.Pointer<ffi.Pointer<struct_wlr_touch_point>> point_ptr,
  ) {
    return _wlr_seat_validate_touch_grab_serial(
      seat,
      origin,
      serial,
      point_ptr,
    );
  }

  late final _wlr_seat_validate_touch_grab_serialPtr = _lookup<
          ffi.NativeFunction<
              ffi.Bool Function(
                  ffi.Pointer<struct_wlr_seat>,
                  ffi.Pointer<struct_wlr_surface>,
                  ffi.Uint32,
                  ffi.Pointer<ffi.Pointer<struct_wlr_touch_point>>)>>(
      'wlr_seat_validate_touch_grab_serial');
  late final _wlr_seat_validate_touch_grab_serial =
      _wlr_seat_validate_touch_grab_serialPtr.asFunction<
          bool Function(
              ffi.Pointer<struct_wlr_seat>,
              ffi.Pointer<struct_wlr_surface>,
              int,
              ffi.Pointer<ffi.Pointer<struct_wlr_touch_point>>)>();

  int wlr_seat_client_next_serial(
    ffi.Pointer<struct_wlr_seat_client> client,
  ) {
    return _wlr_seat_client_next_serial(
      client,
    );
  }

  late final _wlr_seat_client_next_serialPtr = _lookup<
          ffi.NativeFunction<
              ffi.Uint32 Function(ffi.Pointer<struct_wlr_seat_client>)>>(
      'wlr_seat_client_next_serial');
  late final _wlr_seat_client_next_serial = _wlr_seat_client_next_serialPtr
      .asFunction<int Function(ffi.Pointer<struct_wlr_seat_client>)>();

  bool wlr_seat_client_validate_event_serial(
    ffi.Pointer<struct_wlr_seat_client> client,
    int serial,
  ) {
    return _wlr_seat_client_validate_event_serial(
      client,
      serial,
    );
  }

  late final _wlr_seat_client_validate_event_serialPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<struct_wlr_seat_client>,
              ffi.Uint32)>>('wlr_seat_client_validate_event_serial');
  late final _wlr_seat_client_validate_event_serial =
      _wlr_seat_client_validate_event_serialPtr.asFunction<
          bool Function(ffi.Pointer<struct_wlr_seat_client>, int)>();

  ffi.Pointer<struct_wlr_seat_client> wlr_seat_client_from_resource(
    ffi.Pointer<struct_wl_resource> resource,
  ) {
    return _wlr_seat_client_from_resource(
      resource,
    );
  }

  late final _wlr_seat_client_from_resourcePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<struct_wlr_seat_client> Function(
                  ffi.Pointer<struct_wl_resource>)>>(
      'wlr_seat_client_from_resource');
  late final _wlr_seat_client_from_resource =
      _wlr_seat_client_from_resourcePtr.asFunction<
          ffi.Pointer<struct_wlr_seat_client> Function(
              ffi.Pointer<struct_wl_resource>)>();

  ffi.Pointer<struct_wlr_seat_client> wlr_seat_client_from_pointer_resource(
    ffi.Pointer<struct_wl_resource> resource,
  ) {
    return _wlr_seat_client_from_pointer_resource(
      resource,
    );
  }

  late final _wlr_seat_client_from_pointer_resourcePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<struct_wlr_seat_client> Function(
                  ffi.Pointer<struct_wl_resource>)>>(
      'wlr_seat_client_from_pointer_resource');
  late final _wlr_seat_client_from_pointer_resource =
      _wlr_seat_client_from_pointer_resourcePtr.asFunction<
          ffi.Pointer<struct_wlr_seat_client> Function(
              ffi.Pointer<struct_wl_resource>)>();

  bool wlr_surface_accepts_touch(
    ffi.Pointer<struct_wlr_seat> wlr_seat,
    ffi.Pointer<struct_wlr_surface> surface,
  ) {
    return _wlr_surface_accepts_touch(
      wlr_seat,
      surface,
    );
  }

  late final _wlr_surface_accepts_touchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<struct_wlr_seat>,
              ffi.Pointer<struct_wlr_surface>)>>('wlr_surface_accepts_touch');
  late final _wlr_surface_accepts_touch =
      _wlr_surface_accepts_touchPtr.asFunction<
          bool Function(
              ffi.Pointer<struct_wlr_seat>, ffi.Pointer<struct_wlr_surface>)>();

  late final ffi.Pointer<struct_wl_interface> _xdg_wm_base_interface =
      _lookup<struct_wl_interface>('xdg_wm_base_interface');

  struct_wl_interface get xdg_wm_base_interface => _xdg_wm_base_interface.ref;

  late final ffi.Pointer<struct_wl_interface> _xdg_positioner_interface =
      _lookup<struct_wl_interface>('xdg_positioner_interface');

  struct_wl_interface get xdg_positioner_interface =>
      _xdg_positioner_interface.ref;

  late final ffi.Pointer<struct_wl_interface> _xdg_surface_interface =
      _lookup<struct_wl_interface>('xdg_surface_interface');

  struct_wl_interface get xdg_surface_interface => _xdg_surface_interface.ref;

  late final ffi.Pointer<struct_wl_interface> _xdg_toplevel_interface =
      _lookup<struct_wl_interface>('xdg_toplevel_interface');

  struct_wl_interface get xdg_toplevel_interface => _xdg_toplevel_interface.ref;

  late final ffi.Pointer<struct_wl_interface> _xdg_popup_interface =
      _lookup<struct_wl_interface>('xdg_popup_interface');

  struct_wl_interface get xdg_popup_interface => _xdg_popup_interface.ref;

  ffi.Pointer<struct_wlr_xdg_shell> wlr_xdg_shell_create(
    ffi.Pointer<struct_wl_display> display,
  ) {
    return _wlr_xdg_shell_create(
      display,
    );
  }

  late final _wlr_xdg_shell_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<struct_wlr_xdg_shell> Function(
              ffi.Pointer<struct_wl_display>)>>('wlr_xdg_shell_create');
  late final _wlr_xdg_shell_create = _wlr_xdg_shell_createPtr.asFunction<
      ffi.Pointer<struct_wlr_xdg_shell> Function(
          ffi.Pointer<struct_wl_display>)>();

  ffi.Pointer<struct_wlr_xdg_surface> wlr_xdg_surface_from_resource(
    ffi.Pointer<struct_wl_resource> resource,
  ) {
    return _wlr_xdg_surface_from_resource(
      resource,
    );
  }

  late final _wlr_xdg_surface_from_resourcePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<struct_wlr_xdg_surface> Function(
                  ffi.Pointer<struct_wl_resource>)>>(
      'wlr_xdg_surface_from_resource');
  late final _wlr_xdg_surface_from_resource =
      _wlr_xdg_surface_from_resourcePtr.asFunction<
          ffi.Pointer<struct_wlr_xdg_surface> Function(
              ffi.Pointer<struct_wl_resource>)>();

  ffi.Pointer<struct_wlr_xdg_surface> wlr_xdg_surface_from_popup_resource(
    ffi.Pointer<struct_wl_resource> resource,
  ) {
    return _wlr_xdg_surface_from_popup_resource(
      resource,
    );
  }

  late final _wlr_xdg_surface_from_popup_resourcePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<struct_wlr_xdg_surface> Function(
                  ffi.Pointer<struct_wl_resource>)>>(
      'wlr_xdg_surface_from_popup_resource');
  late final _wlr_xdg_surface_from_popup_resource =
      _wlr_xdg_surface_from_popup_resourcePtr.asFunction<
          ffi.Pointer<struct_wlr_xdg_surface> Function(
              ffi.Pointer<struct_wl_resource>)>();

  ffi.Pointer<struct_wlr_xdg_surface> wlr_xdg_surface_from_toplevel_resource(
    ffi.Pointer<struct_wl_resource> resource,
  ) {
    return _wlr_xdg_surface_from_toplevel_resource(
      resource,
    );
  }

  late final _wlr_xdg_surface_from_toplevel_resourcePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<struct_wlr_xdg_surface> Function(
                  ffi.Pointer<struct_wl_resource>)>>(
      'wlr_xdg_surface_from_toplevel_resource');
  late final _wlr_xdg_surface_from_toplevel_resource =
      _wlr_xdg_surface_from_toplevel_resourcePtr.asFunction<
          ffi.Pointer<struct_wlr_xdg_surface> Function(
              ffi.Pointer<struct_wl_resource>)>();

  void wlr_xdg_surface_ping(
    ffi.Pointer<struct_wlr_xdg_surface> surface,
  ) {
    return _wlr_xdg_surface_ping(
      surface,
    );
  }

  late final _wlr_xdg_surface_pingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wlr_xdg_surface>)>>('wlr_xdg_surface_ping');
  late final _wlr_xdg_surface_ping = _wlr_xdg_surface_pingPtr
      .asFunction<void Function(ffi.Pointer<struct_wlr_xdg_surface>)>();

  int wlr_xdg_toplevel_set_size(
    ffi.Pointer<struct_wlr_xdg_surface> surface,
    int width,
    int height,
  ) {
    return _wlr_xdg_toplevel_set_size(
      surface,
      width,
      height,
    );
  }

  late final _wlr_xdg_toplevel_set_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint32 Function(ffi.Pointer<struct_wlr_xdg_surface>, ffi.Uint32,
              ffi.Uint32)>>('wlr_xdg_toplevel_set_size');
  late final _wlr_xdg_toplevel_set_size =
      _wlr_xdg_toplevel_set_sizePtr.asFunction<
          int Function(ffi.Pointer<struct_wlr_xdg_surface>, int, int)>();

  int wlr_xdg_toplevel_set_activated(
    ffi.Pointer<struct_wlr_xdg_surface> surface,
    bool activated,
  ) {
    return _wlr_xdg_toplevel_set_activated(
      surface,
      activated,
    );
  }

  late final _wlr_xdg_toplevel_set_activatedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint32 Function(ffi.Pointer<struct_wlr_xdg_surface>,
              ffi.Bool)>>('wlr_xdg_toplevel_set_activated');
  late final _wlr_xdg_toplevel_set_activated =
      _wlr_xdg_toplevel_set_activatedPtr.asFunction<
          int Function(ffi.Pointer<struct_wlr_xdg_surface>, bool)>();

  int wlr_xdg_toplevel_set_maximized(
    ffi.Pointer<struct_wlr_xdg_surface> surface,
    bool maximized,
  ) {
    return _wlr_xdg_toplevel_set_maximized(
      surface,
      maximized,
    );
  }

  late final _wlr_xdg_toplevel_set_maximizedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint32 Function(ffi.Pointer<struct_wlr_xdg_surface>,
              ffi.Bool)>>('wlr_xdg_toplevel_set_maximized');
  late final _wlr_xdg_toplevel_set_maximized =
      _wlr_xdg_toplevel_set_maximizedPtr.asFunction<
          int Function(ffi.Pointer<struct_wlr_xdg_surface>, bool)>();

  int wlr_xdg_toplevel_set_fullscreen(
    ffi.Pointer<struct_wlr_xdg_surface> surface,
    bool fullscreen,
  ) {
    return _wlr_xdg_toplevel_set_fullscreen(
      surface,
      fullscreen,
    );
  }

  late final _wlr_xdg_toplevel_set_fullscreenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint32 Function(ffi.Pointer<struct_wlr_xdg_surface>,
              ffi.Bool)>>('wlr_xdg_toplevel_set_fullscreen');
  late final _wlr_xdg_toplevel_set_fullscreen =
      _wlr_xdg_toplevel_set_fullscreenPtr.asFunction<
          int Function(ffi.Pointer<struct_wlr_xdg_surface>, bool)>();

  int wlr_xdg_toplevel_set_resizing(
    ffi.Pointer<struct_wlr_xdg_surface> surface,
    bool resizing,
  ) {
    return _wlr_xdg_toplevel_set_resizing(
      surface,
      resizing,
    );
  }

  late final _wlr_xdg_toplevel_set_resizingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint32 Function(ffi.Pointer<struct_wlr_xdg_surface>,
              ffi.Bool)>>('wlr_xdg_toplevel_set_resizing');
  late final _wlr_xdg_toplevel_set_resizing = _wlr_xdg_toplevel_set_resizingPtr
      .asFunction<int Function(ffi.Pointer<struct_wlr_xdg_surface>, bool)>();

  int wlr_xdg_toplevel_set_tiled(
    ffi.Pointer<struct_wlr_xdg_surface> surface,
    int tiled_edges,
  ) {
    return _wlr_xdg_toplevel_set_tiled(
      surface,
      tiled_edges,
    );
  }

  late final _wlr_xdg_toplevel_set_tiledPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint32 Function(ffi.Pointer<struct_wlr_xdg_surface>,
              ffi.Uint32)>>('wlr_xdg_toplevel_set_tiled');
  late final _wlr_xdg_toplevel_set_tiled = _wlr_xdg_toplevel_set_tiledPtr
      .asFunction<int Function(ffi.Pointer<struct_wlr_xdg_surface>, int)>();

  void wlr_xdg_toplevel_send_close(
    ffi.Pointer<struct_wlr_xdg_surface> surface,
  ) {
    return _wlr_xdg_toplevel_send_close(
      surface,
    );
  }

  late final _wlr_xdg_toplevel_send_closePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<struct_wlr_xdg_surface>)>>(
      'wlr_xdg_toplevel_send_close');
  late final _wlr_xdg_toplevel_send_close = _wlr_xdg_toplevel_send_closePtr
      .asFunction<void Function(ffi.Pointer<struct_wlr_xdg_surface>)>();

  void wlr_xdg_toplevel_set_parent(
    ffi.Pointer<struct_wlr_xdg_surface> surface,
    ffi.Pointer<struct_wlr_xdg_surface> parent,
  ) {
    return _wlr_xdg_toplevel_set_parent(
      surface,
      parent,
    );
  }

  late final _wlr_xdg_toplevel_set_parentPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<struct_wlr_xdg_surface>,
                  ffi.Pointer<struct_wlr_xdg_surface>)>>(
      'wlr_xdg_toplevel_set_parent');
  late final _wlr_xdg_toplevel_set_parent =
      _wlr_xdg_toplevel_set_parentPtr.asFunction<
          void Function(ffi.Pointer<struct_wlr_xdg_surface>,
              ffi.Pointer<struct_wlr_xdg_surface>)>();

  void wlr_xdg_popup_destroy(
    ffi.Pointer<struct_wlr_xdg_surface> surface,
  ) {
    return _wlr_xdg_popup_destroy(
      surface,
    );
  }

  late final _wlr_xdg_popup_destroyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wlr_xdg_surface>)>>('wlr_xdg_popup_destroy');
  late final _wlr_xdg_popup_destroy = _wlr_xdg_popup_destroyPtr
      .asFunction<void Function(ffi.Pointer<struct_wlr_xdg_surface>)>();

  void wlr_xdg_popup_get_position(
    ffi.Pointer<struct_wlr_xdg_popup> popup,
    ffi.Pointer<ffi.Double> popup_sx,
    ffi.Pointer<ffi.Double> popup_sy,
  ) {
    return _wlr_xdg_popup_get_position(
      popup,
      popup_sx,
      popup_sy,
    );
  }

  late final _wlr_xdg_popup_get_positionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wlr_xdg_popup>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('wlr_xdg_popup_get_position');
  late final _wlr_xdg_popup_get_position =
      _wlr_xdg_popup_get_positionPtr.asFunction<
          void Function(ffi.Pointer<struct_wlr_xdg_popup>,
              ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>)>();

  struct_wlr_box wlr_xdg_positioner_get_geometry(
    ffi.Pointer<struct_wlr_xdg_positioner> positioner,
  ) {
    return _wlr_xdg_positioner_get_geometry(
      positioner,
    );
  }

  late final _wlr_xdg_positioner_get_geometryPtr = _lookup<
          ffi.NativeFunction<
              struct_wlr_box Function(ffi.Pointer<struct_wlr_xdg_positioner>)>>(
      'wlr_xdg_positioner_get_geometry');
  late final _wlr_xdg_positioner_get_geometry =
      _wlr_xdg_positioner_get_geometryPtr.asFunction<
          struct_wlr_box Function(ffi.Pointer<struct_wlr_xdg_positioner>)>();

  void wlr_xdg_popup_get_anchor_point(
    ffi.Pointer<struct_wlr_xdg_popup> popup,
    ffi.Pointer<ffi.Int> toplevel_sx,
    ffi.Pointer<ffi.Int> toplevel_sy,
  ) {
    return _wlr_xdg_popup_get_anchor_point(
      popup,
      toplevel_sx,
      toplevel_sy,
    );
  }

  late final _wlr_xdg_popup_get_anchor_pointPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wlr_xdg_popup>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('wlr_xdg_popup_get_anchor_point');
  late final _wlr_xdg_popup_get_anchor_point =
      _wlr_xdg_popup_get_anchor_pointPtr.asFunction<
          void Function(ffi.Pointer<struct_wlr_xdg_popup>, ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>();

  void wlr_xdg_popup_get_toplevel_coords(
    ffi.Pointer<struct_wlr_xdg_popup> popup,
    int popup_sx,
    int popup_sy,
    ffi.Pointer<ffi.Int> toplevel_sx,
    ffi.Pointer<ffi.Int> toplevel_sy,
  ) {
    return _wlr_xdg_popup_get_toplevel_coords(
      popup,
      popup_sx,
      popup_sy,
      toplevel_sx,
      toplevel_sy,
    );
  }

  late final _wlr_xdg_popup_get_toplevel_coordsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wlr_xdg_popup>,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('wlr_xdg_popup_get_toplevel_coords');
  late final _wlr_xdg_popup_get_toplevel_coords =
      _wlr_xdg_popup_get_toplevel_coordsPtr.asFunction<
          void Function(ffi.Pointer<struct_wlr_xdg_popup>, int, int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  void wlr_xdg_popup_unconstrain_from_box(
    ffi.Pointer<struct_wlr_xdg_popup> popup,
    ffi.Pointer<struct_wlr_box> toplevel_sx_box,
  ) {
    return _wlr_xdg_popup_unconstrain_from_box(
      popup,
      toplevel_sx_box,
    );
  }

  late final _wlr_xdg_popup_unconstrain_from_boxPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<struct_wlr_xdg_popup>,
                  ffi.Pointer<struct_wlr_box>)>>(
      'wlr_xdg_popup_unconstrain_from_box');
  late final _wlr_xdg_popup_unconstrain_from_box =
      _wlr_xdg_popup_unconstrain_from_boxPtr.asFunction<
          void Function(ffi.Pointer<struct_wlr_xdg_popup>,
              ffi.Pointer<struct_wlr_box>)>();

  void wlr_positioner_invert_x(
    ffi.Pointer<struct_wlr_xdg_positioner> positioner,
  ) {
    return _wlr_positioner_invert_x(
      positioner,
    );
  }

  late final _wlr_positioner_invert_xPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<struct_wlr_xdg_positioner>)>>(
      'wlr_positioner_invert_x');
  late final _wlr_positioner_invert_x = _wlr_positioner_invert_xPtr
      .asFunction<void Function(ffi.Pointer<struct_wlr_xdg_positioner>)>();

  void wlr_positioner_invert_y(
    ffi.Pointer<struct_wlr_xdg_positioner> positioner,
  ) {
    return _wlr_positioner_invert_y(
      positioner,
    );
  }

  late final _wlr_positioner_invert_yPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<struct_wlr_xdg_positioner>)>>(
      'wlr_positioner_invert_y');
  late final _wlr_positioner_invert_y = _wlr_positioner_invert_yPtr
      .asFunction<void Function(ffi.Pointer<struct_wlr_xdg_positioner>)>();

  ffi.Pointer<struct_wlr_surface> wlr_xdg_surface_surface_at(
    ffi.Pointer<struct_wlr_xdg_surface> surface,
    double sx,
    double sy,
    ffi.Pointer<ffi.Double> sub_x,
    ffi.Pointer<ffi.Double> sub_y,
  ) {
    return _wlr_xdg_surface_surface_at(
      surface,
      sx,
      sy,
      sub_x,
      sub_y,
    );
  }

  late final _wlr_xdg_surface_surface_atPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<struct_wlr_surface> Function(
              ffi.Pointer<struct_wlr_xdg_surface>,
              ffi.Double,
              ffi.Double,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('wlr_xdg_surface_surface_at');
  late final _wlr_xdg_surface_surface_at =
      _wlr_xdg_surface_surface_atPtr.asFunction<
          ffi.Pointer<struct_wlr_surface> Function(
              ffi.Pointer<struct_wlr_xdg_surface>,
              double,
              double,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>();

  ffi.Pointer<struct_wlr_surface> wlr_xdg_surface_popup_surface_at(
    ffi.Pointer<struct_wlr_xdg_surface> surface,
    double sx,
    double sy,
    ffi.Pointer<ffi.Double> sub_x,
    ffi.Pointer<ffi.Double> sub_y,
  ) {
    return _wlr_xdg_surface_popup_surface_at(
      surface,
      sx,
      sy,
      sub_x,
      sub_y,
    );
  }

  late final _wlr_xdg_surface_popup_surface_atPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<struct_wlr_surface> Function(
              ffi.Pointer<struct_wlr_xdg_surface>,
              ffi.Double,
              ffi.Double,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('wlr_xdg_surface_popup_surface_at');
  late final _wlr_xdg_surface_popup_surface_at =
      _wlr_xdg_surface_popup_surface_atPtr.asFunction<
          ffi.Pointer<struct_wlr_surface> Function(
              ffi.Pointer<struct_wlr_xdg_surface>,
              double,
              double,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>();

  bool wlr_surface_is_xdg_surface(
    ffi.Pointer<struct_wlr_surface> surface,
  ) {
    return _wlr_surface_is_xdg_surface(
      surface,
    );
  }

  late final _wlr_surface_is_xdg_surfacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<struct_wlr_surface>)>>('wlr_surface_is_xdg_surface');
  late final _wlr_surface_is_xdg_surface = _wlr_surface_is_xdg_surfacePtr
      .asFunction<bool Function(ffi.Pointer<struct_wlr_surface>)>();

  ffi.Pointer<struct_wlr_xdg_surface> wlr_xdg_surface_from_wlr_surface(
    ffi.Pointer<struct_wlr_surface> surface,
  ) {
    return _wlr_xdg_surface_from_wlr_surface(
      surface,
    );
  }

  late final _wlr_xdg_surface_from_wlr_surfacePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<struct_wlr_xdg_surface> Function(
                  ffi.Pointer<struct_wlr_surface>)>>(
      'wlr_xdg_surface_from_wlr_surface');
  late final _wlr_xdg_surface_from_wlr_surface =
      _wlr_xdg_surface_from_wlr_surfacePtr.asFunction<
          ffi.Pointer<struct_wlr_xdg_surface> Function(
              ffi.Pointer<struct_wlr_surface>)>();

  void wlr_xdg_surface_get_geometry(
    ffi.Pointer<struct_wlr_xdg_surface> surface,
    ffi.Pointer<struct_wlr_box> box,
  ) {
    return _wlr_xdg_surface_get_geometry(
      surface,
      box,
    );
  }

  late final _wlr_xdg_surface_get_geometryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wlr_xdg_surface>,
              ffi.Pointer<struct_wlr_box>)>>('wlr_xdg_surface_get_geometry');
  late final _wlr_xdg_surface_get_geometry =
      _wlr_xdg_surface_get_geometryPtr.asFunction<
          void Function(ffi.Pointer<struct_wlr_xdg_surface>,
              ffi.Pointer<struct_wlr_box>)>();

  void wlr_xdg_surface_for_each_surface(
    ffi.Pointer<struct_wlr_xdg_surface> surface,
    wlr_surface_iterator_func_t iterator,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _wlr_xdg_surface_for_each_surface(
      surface,
      iterator,
      user_data,
    );
  }

  late final _wlr_xdg_surface_for_each_surfacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wlr_xdg_surface>,
              wlr_surface_iterator_func_t,
              ffi.Pointer<ffi.Void>)>>('wlr_xdg_surface_for_each_surface');
  late final _wlr_xdg_surface_for_each_surface =
      _wlr_xdg_surface_for_each_surfacePtr.asFunction<
          void Function(ffi.Pointer<struct_wlr_xdg_surface>,
              wlr_surface_iterator_func_t, ffi.Pointer<ffi.Void>)>();

  void wlr_xdg_surface_for_each_popup_surface(
    ffi.Pointer<struct_wlr_xdg_surface> surface,
    wlr_surface_iterator_func_t iterator,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _wlr_xdg_surface_for_each_popup_surface(
      surface,
      iterator,
      user_data,
    );
  }

  late final _wlr_xdg_surface_for_each_popup_surfacePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<struct_wlr_xdg_surface>,
                  wlr_surface_iterator_func_t, ffi.Pointer<ffi.Void>)>>(
      'wlr_xdg_surface_for_each_popup_surface');
  late final _wlr_xdg_surface_for_each_popup_surface =
      _wlr_xdg_surface_for_each_popup_surfacePtr.asFunction<
          void Function(ffi.Pointer<struct_wlr_xdg_surface>,
              wlr_surface_iterator_func_t, ffi.Pointer<ffi.Void>)>();

  int wlr_xdg_surface_schedule_configure(
    ffi.Pointer<struct_wlr_xdg_surface> surface,
  ) {
    return _wlr_xdg_surface_schedule_configure(
      surface,
    );
  }

  late final _wlr_xdg_surface_schedule_configurePtr = _lookup<
          ffi.NativeFunction<
              ffi.Uint32 Function(ffi.Pointer<struct_wlr_xdg_surface>)>>(
      'wlr_xdg_surface_schedule_configure');
  late final _wlr_xdg_surface_schedule_configure =
      _wlr_xdg_surface_schedule_configurePtr
          .asFunction<int Function(ffi.Pointer<struct_wlr_xdg_surface>)>();

  ffi.Pointer<ffi.Void> malloc(
    int __size,
  ) {
    return _malloc(
      __size,
    );
  }

  late final _mallocPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size)>>(
          'malloc');
  late final _malloc =
      _mallocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> calloc(
    int __nmemb,
    int __size,
  ) {
    return _calloc(
      __nmemb,
      __size,
    );
  }

  late final _callocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Size, ffi.Size)>>('calloc');
  late final _calloc =
      _callocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  ffi.Pointer<ffi.Void> realloc(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
  ) {
    return _realloc(
      __ptr,
      __size,
    );
  }

  late final _reallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Size)>>('realloc');
  late final _realloc = _reallocPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> reallocarray(
    ffi.Pointer<ffi.Void> __ptr,
    int __nmemb,
    int __size,
  ) {
    return _reallocarray(
      __ptr,
      __nmemb,
      __size,
    );
  }

  late final _reallocarrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size)>>('reallocarray');
  late final _reallocarray = _reallocarrayPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  void free(
    ffi.Pointer<ffi.Void> __ptr,
  ) {
    return _free(
      __ptr,
    );
  }

  late final _freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'free');
  late final _free =
      _freePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> memalign(
    int __alignment,
    int __size,
  ) {
    return _memalign(
      __alignment,
      __size,
    );
  }

  late final _memalignPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Size, ffi.Size)>>('memalign');
  late final _memalign =
      _memalignPtr.asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  ffi.Pointer<ffi.Void> valloc(
    int __size,
  ) {
    return _valloc(
      __size,
    );
  }

  late final _vallocPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size)>>(
          'valloc');
  late final _valloc =
      _vallocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> pvalloc(
    int __size,
  ) {
    return _pvalloc(
      __size,
    );
  }

  late final _pvallocPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size)>>(
          'pvalloc');
  late final _pvalloc =
      _pvallocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  struct_mallinfo mallinfo() {
    return _mallinfo();
  }

  late final _mallinfoPtr =
      _lookup<ffi.NativeFunction<struct_mallinfo Function()>>('mallinfo');
  late final _mallinfo = _mallinfoPtr.asFunction<struct_mallinfo Function()>();

  struct_mallinfo2 mallinfo2() {
    return _mallinfo2();
  }

  late final _mallinfo2Ptr =
      _lookup<ffi.NativeFunction<struct_mallinfo2 Function()>>('mallinfo2');
  late final _mallinfo2 =
      _mallinfo2Ptr.asFunction<struct_mallinfo2 Function()>();

  int mallopt(
    int __param,
    int __val,
  ) {
    return _mallopt(
      __param,
      __val,
    );
  }

  late final _malloptPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>(
          'mallopt');
  late final _mallopt = _malloptPtr.asFunction<int Function(int, int)>();

  int malloc_trim(
    int __pad,
  ) {
    return _malloc_trim(
      __pad,
    );
  }

  late final _malloc_trimPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Size)>>('malloc_trim');
  late final _malloc_trim = _malloc_trimPtr.asFunction<int Function(int)>();

  int malloc_usable_size(
    ffi.Pointer<ffi.Void> __ptr,
  ) {
    return _malloc_usable_size(
      __ptr,
    );
  }

  late final _malloc_usable_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<ffi.Void>)>>(
          'malloc_usable_size');
  late final _malloc_usable_size =
      _malloc_usable_sizePtr.asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  void malloc_stats() {
    return _malloc_stats();
  }

  late final _malloc_statsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('malloc_stats');
  late final _malloc_stats = _malloc_statsPtr.asFunction<void Function()>();

  int malloc_info(
    int __options,
    ffi.Pointer<FILE> __fp,
  ) {
    return _malloc_info(
      __options,
      __fp,
    );
  }

  late final _malloc_infoPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'malloc_info');
  late final _malloc_info =
      _malloc_infoPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  ffi.Pointer<struct_wlr_output_mode> get_wlr_output_mode_from_wl_list(
    ffi.Pointer<struct_wl_list> ptr,
  ) {
    return _get_wlr_output_mode_from_wl_list(
      ptr,
    );
  }

  late final _get_wlr_output_mode_from_wl_listPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<struct_wlr_output_mode> Function(
                  ffi.Pointer<struct_wl_list>)>>(
      'get_wlr_output_mode_from_wl_list');
  late final _get_wlr_output_mode_from_wl_list =
      _get_wlr_output_mode_from_wl_listPtr.asFunction<
          ffi.Pointer<struct_wlr_output_mode> Function(
              ffi.Pointer<struct_wl_list>)>();

  ffi.Pointer<struct_waybright> waybright_create() {
    return _waybright_create();
  }

  late final _waybright_createPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<struct_waybright> Function()>>(
          'waybright_create');
  late final _waybright_create = _waybright_createPtr
      .asFunction<ffi.Pointer<struct_waybright> Function()>();

  void waybright_destroy(
    ffi.Pointer<struct_waybright> wb,
  ) {
    return _waybright_destroy(
      wb,
    );
  }

  late final _waybright_destroyPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<struct_waybright>)>>(
      'waybright_destroy');
  late final _waybright_destroy = _waybright_destroyPtr
      .asFunction<void Function(ffi.Pointer<struct_waybright>)>();

  int waybright_init(
    ffi.Pointer<struct_waybright> arg0,
  ) {
    return _waybright_init(
      arg0,
    );
  }

  late final _waybright_initPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<struct_waybright>)>>(
      'waybright_init');
  late final _waybright_init = _waybright_initPtr
      .asFunction<int Function(ffi.Pointer<struct_waybright>)>();

  /// @param socket_name can be NULL to auto-select a name
  int waybright_open_socket(
    ffi.Pointer<struct_waybright> wb,
    ffi.Pointer<ffi.Char> socket_name,
  ) {
    return _waybright_open_socket(
      wb,
      socket_name,
    );
  }

  late final _waybright_open_socketPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<struct_waybright>,
              ffi.Pointer<ffi.Char>)>>('waybright_open_socket');
  late final _waybright_open_socket = _waybright_open_socketPtr.asFunction<
      int Function(ffi.Pointer<struct_waybright>, ffi.Pointer<ffi.Char>)>();

  void waybright_run_event_loop(
    ffi.Pointer<struct_waybright> wb,
  ) {
    return _waybright_run_event_loop(
      wb,
    );
  }

  late final _waybright_run_event_loopPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<struct_waybright>)>>(
      'waybright_run_event_loop');
  late final _waybright_run_event_loop = _waybright_run_event_loopPtr
      .asFunction<void Function(ffi.Pointer<struct_waybright>)>();

  int waybright_renderer_get_fill_style(
    ffi.Pointer<struct_waybright_renderer> wb_renderer,
  ) {
    return _waybright_renderer_get_fill_style(
      wb_renderer,
    );
  }

  late final _waybright_renderer_get_fill_stylePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<struct_waybright_renderer>)>>(
      'waybright_renderer_get_fill_style');
  late final _waybright_renderer_get_fill_style =
      _waybright_renderer_get_fill_stylePtr
          .asFunction<int Function(ffi.Pointer<struct_waybright_renderer>)>();

  void waybright_renderer_set_fill_style(
    ffi.Pointer<struct_waybright_renderer> wb_renderer,
    int color,
  ) {
    return _waybright_renderer_set_fill_style(
      wb_renderer,
      color,
    );
  }

  late final _waybright_renderer_set_fill_stylePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_waybright_renderer>,
              ffi.Int)>>('waybright_renderer_set_fill_style');
  late final _waybright_renderer_set_fill_style =
      _waybright_renderer_set_fill_stylePtr.asFunction<
          void Function(ffi.Pointer<struct_waybright_renderer>, int)>();

  void waybright_renderer_clear_rect(
    ffi.Pointer<struct_waybright_renderer> wb_renderer,
    int x,
    int y,
    int width,
    int height,
  ) {
    return _waybright_renderer_clear_rect(
      wb_renderer,
      x,
      y,
      width,
      height,
    );
  }

  late final _waybright_renderer_clear_rectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_waybright_renderer>, ffi.Int,
              ffi.Int, ffi.Int, ffi.Int)>>('waybright_renderer_clear_rect');
  late final _waybright_renderer_clear_rect =
      _waybright_renderer_clear_rectPtr.asFunction<
          void Function(
              ffi.Pointer<struct_waybright_renderer>, int, int, int, int)>();

  void waybright_renderer_fill_rect(
    ffi.Pointer<struct_waybright_renderer> wb_renderer,
    int x,
    int y,
    int width,
    int height,
  ) {
    return _waybright_renderer_fill_rect(
      wb_renderer,
      x,
      y,
      width,
      height,
    );
  }

  late final _waybright_renderer_fill_rectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_waybright_renderer>, ffi.Int,
              ffi.Int, ffi.Int, ffi.Int)>>('waybright_renderer_fill_rect');
  late final _waybright_renderer_fill_rect =
      _waybright_renderer_fill_rectPtr.asFunction<
          void Function(
              ffi.Pointer<struct_waybright_renderer>, int, int, int, int)>();

  void waybright_renderer_draw_window(
    ffi.Pointer<struct_waybright_renderer> wb_renderer,
    ffi.Pointer<struct_waybright_window> wb_window,
    int x,
    int y,
  ) {
    return _waybright_renderer_draw_window(
      wb_renderer,
      wb_window,
      x,
      y,
    );
  }

  late final _waybright_renderer_draw_windowPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_waybright_renderer>,
              ffi.Pointer<struct_waybright_window>,
              ffi.Int,
              ffi.Int)>>('waybright_renderer_draw_window');
  late final _waybright_renderer_draw_window =
      _waybright_renderer_draw_windowPtr.asFunction<
          void Function(ffi.Pointer<struct_waybright_renderer>,
              ffi.Pointer<struct_waybright_window>, int, int)>();

  void waybright_monitor_enable(
    ffi.Pointer<struct_waybright_monitor> wb_monitor,
  ) {
    return _waybright_monitor_enable(
      wb_monitor,
    );
  }

  late final _waybright_monitor_enablePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<struct_waybright_monitor>)>>(
      'waybright_monitor_enable');
  late final _waybright_monitor_enable = _waybright_monitor_enablePtr
      .asFunction<void Function(ffi.Pointer<struct_waybright_monitor>)>();

  void waybright_monitor_disable(
    ffi.Pointer<struct_waybright_monitor> wb_monitor,
  ) {
    return _waybright_monitor_disable(
      wb_monitor,
    );
  }

  late final _waybright_monitor_disablePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<struct_waybright_monitor>)>>(
      'waybright_monitor_disable');
  late final _waybright_monitor_disable = _waybright_monitor_disablePtr
      .asFunction<void Function(ffi.Pointer<struct_waybright_monitor>)>();

  void waybright_monitor_set_background_color(
    ffi.Pointer<struct_waybright_monitor> wb_monitor,
    int color,
  ) {
    return _waybright_monitor_set_background_color(
      wb_monitor,
      color,
    );
  }

  late final _waybright_monitor_set_background_colorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_waybright_monitor>,
              ffi.Int)>>('waybright_monitor_set_background_color');
  late final _waybright_monitor_set_background_color =
      _waybright_monitor_set_background_colorPtr.asFunction<
          void Function(ffi.Pointer<struct_waybright_monitor>, int)>();

  int waybright_monitor_get_background_color(
    ffi.Pointer<struct_waybright_monitor> wb_monitor,
  ) {
    return _waybright_monitor_get_background_color(
      wb_monitor,
    );
  }

  late final _waybright_monitor_get_background_colorPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<struct_waybright_monitor>)>>(
      'waybright_monitor_get_background_color');
  late final _waybright_monitor_get_background_color =
      _waybright_monitor_get_background_colorPtr
          .asFunction<int Function(ffi.Pointer<struct_waybright_monitor>)>();

  void waybright_window_focus(
    ffi.Pointer<struct_waybright_window> wb_window,
  ) {
    return _waybright_window_focus(
      wb_window,
    );
  }

  late final _waybright_window_focusPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_waybright_window>)>>('waybright_window_focus');
  late final _waybright_window_focus = _waybright_window_focusPtr
      .asFunction<void Function(ffi.Pointer<struct_waybright_window>)>();

  void waybright_window_blur(
    ffi.Pointer<struct_waybright_window> wb_window,
  ) {
    return _waybright_window_blur(
      wb_window,
    );
  }

  late final _waybright_window_blurPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_waybright_window>)>>('waybright_window_blur');
  late final _waybright_window_blur = _waybright_window_blurPtr
      .asFunction<void Function(ffi.Pointer<struct_waybright_window>)>();

  void waybright_window_submit_pointer_move_event(
    ffi.Pointer<struct_waybright_window> wb_window,
    int time,
    int sx,
    int sy,
  ) {
    return _waybright_window_submit_pointer_move_event(
      wb_window,
      time,
      sx,
      sy,
    );
  }

  late final _waybright_window_submit_pointer_move_eventPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_waybright_window>, ffi.Int,
              ffi.Int, ffi.Int)>>('waybright_window_submit_pointer_move_event');
  late final _waybright_window_submit_pointer_move_event =
      _waybright_window_submit_pointer_move_eventPtr.asFunction<
          void Function(ffi.Pointer<struct_waybright_window>, int, int, int)>();

  void waybright_window_submit_pointer_button_event(
    ffi.Pointer<struct_waybright_window> wb_window,
    int time,
    int button,
    int pressed,
  ) {
    return _waybright_window_submit_pointer_button_event(
      wb_window,
      time,
      button,
      pressed,
    );
  }

  late final _waybright_window_submit_pointer_button_eventPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_waybright_window>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('waybright_window_submit_pointer_button_event');
  late final _waybright_window_submit_pointer_button_event =
      _waybright_window_submit_pointer_button_eventPtr.asFunction<
          void Function(ffi.Pointer<struct_waybright_window>, int, int, int)>();

  void waybright_window_submit_pointer_axis_event(
    ffi.Pointer<struct_waybright_window> wb_window,
    int time,
    int orientation,
    double delta,
    int delta_discrete,
    int source,
  ) {
    return _waybright_window_submit_pointer_axis_event(
      wb_window,
      time,
      orientation,
      delta,
      delta_discrete,
      source,
    );
  }

  late final _waybright_window_submit_pointer_axis_eventPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_waybright_window>,
              ffi.Int,
              ffi.Int,
              ffi.Double,
              ffi.Int,
              ffi.Int)>>('waybright_window_submit_pointer_axis_event');
  late final _waybright_window_submit_pointer_axis_event =
      _waybright_window_submit_pointer_axis_eventPtr.asFunction<
          void Function(ffi.Pointer<struct_waybright_window>, int, int, double,
              int, int)>();

  void waybright_window_submit_keyboard_key_event(
    ffi.Pointer<struct_waybright_window> wb_window,
    int time,
    int keyCode,
    int pressed,
  ) {
    return _waybright_window_submit_keyboard_key_event(
      wb_window,
      time,
      keyCode,
      pressed,
    );
  }

  late final _waybright_window_submit_keyboard_key_eventPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_waybright_window>, ffi.Int,
              ffi.Int, ffi.Int)>>('waybright_window_submit_keyboard_key_event');
  late final _waybright_window_submit_keyboard_key_event =
      _waybright_window_submit_keyboard_key_eventPtr.asFunction<
          void Function(ffi.Pointer<struct_waybright_window>, int, int, int)>();

  void waybright_window_submit_keyboard_modifiers_event(
    ffi.Pointer<struct_waybright_window> wb_window,
    ffi.Pointer<struct_waybright_keyboard> wb_keyboard,
  ) {
    return _waybright_window_submit_keyboard_modifiers_event(
      wb_window,
      wb_keyboard,
    );
  }

  late final _waybright_window_submit_keyboard_modifiers_eventPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<struct_waybright_window>,
                  ffi.Pointer<struct_waybright_keyboard>)>>(
      'waybright_window_submit_keyboard_modifiers_event');
  late final _waybright_window_submit_keyboard_modifiers_event =
      _waybright_window_submit_keyboard_modifiers_eventPtr.asFunction<
          void Function(ffi.Pointer<struct_waybright_window>,
              ffi.Pointer<struct_waybright_keyboard>)>();

  void waybright_pointer_focus_on_window(
    ffi.Pointer<struct_waybright_pointer> wb_pointer,
    ffi.Pointer<struct_waybright_window> wb_window,
    int sx,
    int sy,
  ) {
    return _waybright_pointer_focus_on_window(
      wb_pointer,
      wb_window,
      sx,
      sy,
    );
  }

  late final _waybright_pointer_focus_on_windowPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_waybright_pointer>,
              ffi.Pointer<struct_waybright_window>,
              ffi.Int,
              ffi.Int)>>('waybright_pointer_focus_on_window');
  late final _waybright_pointer_focus_on_window =
      _waybright_pointer_focus_on_windowPtr.asFunction<
          void Function(ffi.Pointer<struct_waybright_pointer>,
              ffi.Pointer<struct_waybright_window>, int, int)>();

  void waybright_pointer_clear_focus(
    ffi.Pointer<struct_waybright_pointer> wb_pointer,
  ) {
    return _waybright_pointer_clear_focus(
      wb_pointer,
    );
  }

  late final _waybright_pointer_clear_focusPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<struct_waybright_pointer>)>>(
      'waybright_pointer_clear_focus');
  late final _waybright_pointer_clear_focus = _waybright_pointer_clear_focusPtr
      .asFunction<void Function(ffi.Pointer<struct_waybright_pointer>)>();

  void waybright_keyboard_focus_on_window(
    ffi.Pointer<struct_waybright_keyboard> wb_keyboard,
    ffi.Pointer<struct_waybright_window> wb_window,
  ) {
    return _waybright_keyboard_focus_on_window(
      wb_keyboard,
      wb_window,
    );
  }

  late final _waybright_keyboard_focus_on_windowPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<struct_waybright_keyboard>,
                  ffi.Pointer<struct_waybright_window>)>>(
      'waybright_keyboard_focus_on_window');
  late final _waybright_keyboard_focus_on_window =
      _waybright_keyboard_focus_on_windowPtr.asFunction<
          void Function(ffi.Pointer<struct_waybright_keyboard>,
              ffi.Pointer<struct_waybright_window>)>();

  void waybright_keyboard_clear_focus(
    ffi.Pointer<struct_waybright_keyboard> wb_keyboard,
  ) {
    return _waybright_keyboard_clear_focus(
      wb_keyboard,
    );
  }

  late final _waybright_keyboard_clear_focusPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<struct_waybright_keyboard>)>>(
      'waybright_keyboard_clear_focus');
  late final _waybright_keyboard_clear_focus =
      _waybright_keyboard_clear_focusPtr
          .asFunction<void Function(ffi.Pointer<struct_waybright_keyboard>)>();
}

class struct___fsid_t extends ffi.Struct {
  @ffi.Array.multi([2])
  external ffi.Array<ffi.Int> __val;
}

class struct___sigset_t extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.UnsignedLong> __val;
}

class struct_timeval extends ffi.Struct {
  @__time_t()
  external int tv_sec;

  @__suseconds_t()
  external int tv_usec;
}

typedef __time_t = ffi.Long;
typedef __suseconds_t = ffi.Long;

class struct_timespec extends ffi.Struct {
  @__time_t()
  external int tv_sec;

  @__syscall_slong_t()
  external int tv_nsec;
}

typedef __syscall_slong_t = ffi.Long;

class struct_fd_set extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<__fd_mask> __fds_bits;
}

typedef __fd_mask = ffi.Long;

class __atomic_wide_counter extends ffi.Union {
  @ffi.UnsignedLongLong()
  external int __value64;

  external UnnamedStruct1 __value32;
}

class UnnamedStruct1 extends ffi.Struct {
  @ffi.UnsignedInt()
  external int __low;

  @ffi.UnsignedInt()
  external int __high;
}

class struct___pthread_internal_list extends ffi.Struct {
  external ffi.Pointer<struct___pthread_internal_list> __prev;

  external ffi.Pointer<struct___pthread_internal_list> __next;
}

class struct___pthread_internal_slist extends ffi.Struct {
  external ffi.Pointer<struct___pthread_internal_slist> __next;
}

class struct___pthread_mutex_s extends ffi.Struct {
  @ffi.Int()
  external int __lock;

  @ffi.UnsignedInt()
  external int __count;

  @ffi.Int()
  external int __owner;

  @ffi.UnsignedInt()
  external int __nusers;

  @ffi.Int()
  external int __kind;

  @ffi.Short()
  external int __spins;

  @ffi.Short()
  external int __elision;

  external __pthread_list_t __list;
}

typedef __pthread_list_t = struct___pthread_internal_list;

class struct___pthread_rwlock_arch_t extends ffi.Struct {
  @ffi.UnsignedInt()
  external int __readers;

  @ffi.UnsignedInt()
  external int __writers;

  @ffi.UnsignedInt()
  external int __wrphase_futex;

  @ffi.UnsignedInt()
  external int __writers_futex;

  @ffi.UnsignedInt()
  external int __pad3;

  @ffi.UnsignedInt()
  external int __pad4;

  @ffi.Int()
  external int __cur_writer;

  @ffi.Int()
  external int __shared;

  @ffi.SignedChar()
  external int __rwelision;

  @ffi.Array.multi([7])
  external ffi.Array<ffi.UnsignedChar> __pad1;

  @ffi.UnsignedLong()
  external int __pad2;

  @ffi.UnsignedInt()
  external int __flags;
}

class struct___pthread_cond_s extends ffi.Struct {
  external __atomic_wide_counter __wseq;

  external __atomic_wide_counter __g1_start;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.UnsignedInt> __g_refs;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.UnsignedInt> __g_size;

  @ffi.UnsignedInt()
  external int __g1_orig_size;

  @ffi.UnsignedInt()
  external int __wrefs;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.UnsignedInt> __g_signals;
}

class struct___once_flag extends ffi.Struct {
  @ffi.Int()
  external int __data;
}

class pthread_mutexattr_t extends ffi.Union {
  @ffi.Array.multi([4])
  external ffi.Array<ffi.Char> __size;

  @ffi.Int()
  external int __align;
}

class pthread_condattr_t extends ffi.Union {
  @ffi.Array.multi([4])
  external ffi.Array<ffi.Char> __size;

  @ffi.Int()
  external int __align;
}

class pthread_attr_t extends ffi.Union {
  @ffi.Array.multi([56])
  external ffi.Array<ffi.Char> __size;

  @ffi.Long()
  external int __align;
}

class pthread_mutex_t extends ffi.Union {
  external struct___pthread_mutex_s __data;

  @ffi.Array.multi([40])
  external ffi.Array<ffi.Char> __size;

  @ffi.Long()
  external int __align;
}

class pthread_cond_t extends ffi.Union {
  external struct___pthread_cond_s __data;

  @ffi.Array.multi([48])
  external ffi.Array<ffi.Char> __size;

  @ffi.LongLong()
  external int __align;
}

class pthread_rwlock_t extends ffi.Union {
  external struct___pthread_rwlock_arch_t __data;

  @ffi.Array.multi([56])
  external ffi.Array<ffi.Char> __size;

  @ffi.Long()
  external int __align;
}

class pthread_rwlockattr_t extends ffi.Union {
  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> __size;

  @ffi.Long()
  external int __align;
}

class pthread_barrier_t extends ffi.Union {
  @ffi.Array.multi([32])
  external ffi.Array<ffi.Char> __size;

  @ffi.Long()
  external int __align;
}

class pthread_barrierattr_t extends ffi.Union {
  @ffi.Array.multi([4])
  external ffi.Array<ffi.Char> __size;

  @ffi.Int()
  external int __align;
}

class struct_max_align_t extends ffi.Opaque {}

class struct_imaxdiv_t extends ffi.Struct {
  @ffi.Long()
  external int quot;

  @ffi.Long()
  external int rem;
}

typedef intmax_t = __intmax_t;
typedef __intmax_t = ffi.Long;
typedef uintmax_t = __uintmax_t;
typedef __uintmax_t = ffi.UnsignedLong;
typedef __gwchar_t = ffi.Int;

class struct_wl_object extends ffi.Struct {
  external ffi.Pointer<struct_wl_interface> interface1;

  external ffi.Pointer<ffi.Void> implementation;

  @ffi.Uint32()
  external int id;
}

class struct_wl_interface extends ffi.Struct {
  external ffi.Pointer<ffi.Char> name;

  @ffi.Int()
  external int version;

  @ffi.Int()
  external int method_count;

  external ffi.Pointer<struct_wl_message> methods;

  @ffi.Int()
  external int event_count;

  external ffi.Pointer<struct_wl_message> events;
}

class struct_wl_message extends ffi.Struct {
  external ffi.Pointer<ffi.Char> name;

  external ffi.Pointer<ffi.Char> signature;

  external ffi.Pointer<ffi.Pointer<struct_wl_interface>> types;
}

class struct_wl_list extends ffi.Struct {
  external ffi.Pointer<struct_wl_list> prev;

  external ffi.Pointer<struct_wl_list> next;
}

class struct_wl_array extends ffi.Struct {
  @ffi.Size()
  external int size;

  @ffi.Size()
  external int alloc;

  external ffi.Pointer<ffi.Void> data;
}

class wl_argument extends ffi.Union {
  @ffi.Int32()
  external int i;

  @ffi.Uint32()
  external int u;

  @wl_fixed_t()
  external int f;

  external ffi.Pointer<ffi.Char> s;

  external ffi.Pointer<struct_wl_object> o;

  @ffi.Uint32()
  external int n;

  external ffi.Pointer<struct_wl_array> a;

  @ffi.Int32()
  external int h;
}

typedef wl_fixed_t = ffi.Int32;

abstract class enum_wl_iterator_result {
  static const int WL_ITERATOR_STOP = 0;
  static const int WL_ITERATOR_CONTINUE = 1;
}

class struct_wl_event_loop extends ffi.Opaque {}

class struct_wl_event_source extends ffi.Opaque {}

typedef wl_event_loop_fd_func_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int Function(ffi.Int, ffi.Uint32, ffi.Pointer<ffi.Void>)>>;
typedef wl_event_loop_timer_func_t
    = ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>;
typedef wl_event_loop_signal_func_t = ffi.Pointer<
    ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Void>)>>;
typedef wl_event_loop_idle_func_t
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>;

class struct_wl_listener extends ffi.Struct {
  external struct_wl_list link;

  external wl_notify_func_t notify;
}

typedef wl_notify_func_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(
            ffi.Pointer<struct_wl_listener>, ffi.Pointer<ffi.Void>)>>;

class struct_wl_display extends ffi.Opaque {}

class struct_wl_client extends ffi.Opaque {}

class struct_wl_global extends ffi.Opaque {}

typedef wl_global_bind_func_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<struct_wl_client>, ffi.Pointer<ffi.Void>,
            ffi.Uint32, ffi.Uint32)>>;
typedef wl_display_global_filter_func_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Bool Function(ffi.Pointer<struct_wl_client>,
            ffi.Pointer<struct_wl_global>, ffi.Pointer<ffi.Void>)>>;
typedef pid_t = __pid_t;
typedef __pid_t = ffi.Int;
typedef uid_t = __uid_t;
typedef __uid_t = ffi.UnsignedInt;
typedef gid_t = __gid_t;
typedef __gid_t = ffi.UnsignedInt;

class struct_wl_resource extends ffi.Struct {
  external struct_wl_object object;

  external wl_resource_destroy_func_t destroy;

  external struct_wl_list link;

  external struct_wl_signal destroy_signal;

  external ffi.Pointer<struct_wl_client> client;

  external ffi.Pointer<ffi.Void> data;
}

typedef wl_resource_destroy_func_t = ffi.Pointer<
    ffi.NativeFunction<ffi.Void Function(ffi.Pointer<struct_wl_resource>)>>;

class struct_wl_signal extends ffi.Struct {
  external struct_wl_list listener_list;
}

typedef wl_client_for_each_resource_iterator_func_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(
            ffi.Pointer<struct_wl_resource>, ffi.Pointer<ffi.Void>)>>;
typedef wl_dispatcher_func_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int Function(
            ffi.Pointer<ffi.Void>,
            ffi.Pointer<ffi.Void>,
            ffi.Uint32,
            ffi.Pointer<struct_wl_message>,
            ffi.Pointer<wl_argument>)>>;

class struct_wl_shm_buffer extends ffi.Opaque {}

class struct_wl_shm_pool extends ffi.Opaque {}

typedef wl_log_func_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(
            ffi.Pointer<ffi.Char>, ffi.Pointer<struct___va_list_tag>)>>;

class struct___va_list_tag extends ffi.Struct {
  @ffi.UnsignedInt()
  external int gp_offset;

  @ffi.UnsignedInt()
  external int fp_offset;

  external ffi.Pointer<ffi.Void> overflow_arg_area;

  external ffi.Pointer<ffi.Void> reg_save_area;
}

abstract class enum_wl_protocol_logger_type {
  static const int WL_PROTOCOL_LOGGER_REQUEST = 0;
  static const int WL_PROTOCOL_LOGGER_EVENT = 1;
}

class struct_wl_protocol_logger_message extends ffi.Struct {
  external ffi.Pointer<struct_wl_resource> resource;

  @ffi.Int()
  external int message_opcode;

  external ffi.Pointer<struct_wl_message> message;

  @ffi.Int()
  external int arguments_count;

  external ffi.Pointer<wl_argument> arguments;
}

class struct_wl_protocol_logger extends ffi.Opaque {}

typedef wl_protocol_logger_func_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int32,
            ffi.Pointer<struct_wl_protocol_logger_message>)>>;
typedef __dev_t = ffi.UnsignedLong;

class struct_udev extends ffi.Opaque {}

class struct_udev_list_entry extends ffi.Opaque {}

class struct_udev_device extends ffi.Opaque {}

typedef dev_t = __dev_t;

class struct_udev_monitor extends ffi.Opaque {}

class struct_udev_enumerate extends ffi.Opaque {}

class struct_udev_queue extends ffi.Opaque {}

class struct_udev_hwdb extends ffi.Opaque {}

class struct_libseat extends ffi.Opaque {}

class struct_wlr_device extends ffi.Struct {
  @ffi.Int()
  external int fd;

  @ffi.Int()
  external int device_id;

  @dev_t()
  external int dev;

  external struct_wl_list link;

  external UnnamedStruct2 events;
}

class UnnamedStruct2 extends ffi.Struct {
  external struct_wl_signal change;

  external struct_wl_signal remove;
}

class struct_wlr_session extends ffi.Struct {
  @ffi.Bool()
  external bool active;

  @ffi.UnsignedInt()
  external int vtnr;

  @ffi.Array.multi([256])
  external ffi.Array<ffi.Char> seat;

  external ffi.Pointer<struct_udev> udev;

  external ffi.Pointer<struct_udev_monitor> mon;

  external ffi.Pointer<struct_wl_event_source> udev_event;

  external ffi.Pointer<struct_libseat> seat_handle;

  external ffi.Pointer<struct_wl_event_source> libseat_event;

  external struct_wl_list devices;

  external ffi.Pointer<struct_wl_display> display;

  external struct_wl_listener display_destroy;

  external UnnamedStruct3 events;
}

class UnnamedStruct3 extends ffi.Struct {
  external struct_wl_signal active;

  external struct_wl_signal add_drm_card;

  external struct_wl_signal destroy;
}

class struct_wlr_session_add_event extends ffi.Struct {
  external ffi.Pointer<ffi.Char> path;
}

abstract class enum_wlr_device_change_type {
  static const int WLR_DEVICE_HOTPLUG = 1;
  static const int WLR_DEVICE_LEASE = 2;
}

class struct_wlr_device_hotplug_event extends ffi.Struct {
  @ffi.Uint32()
  external int connector_id;

  @ffi.Uint32()
  external int prop_id;
}

class struct_wlr_device_change_event extends ffi.Struct {
  @ffi.Int32()
  external int type;

  external UnnamedUnion1 unnamed;
}

class UnnamedUnion1 extends ffi.Union {
  external struct_wlr_device_hotplug_event hotplug;
}

typedef ssize_t = __ssize_t;
typedef __ssize_t = ffi.Long;

class struct_wlr_backend_impl extends ffi.Opaque {}

class struct_wlr_backend extends ffi.Struct {
  external ffi.Pointer<struct_wlr_backend_impl> impl;

  external UnnamedStruct4 events;
}

class UnnamedStruct4 extends ffi.Struct {
  external struct_wl_signal destroy;

  external struct_wl_signal new_input;

  external struct_wl_signal new_output;
}

typedef clockid_t = __clockid_t;
typedef __clockid_t = ffi.Int;

class struct_wlr_allocator extends ffi.Struct {
  external ffi.Pointer<struct_wlr_allocator_interface> impl;

  @ffi.Uint32()
  external int buffer_caps;

  external UnnamedStruct6 events;
}

class struct_wlr_allocator_interface extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<struct_wlr_buffer> Function(
              ffi.Pointer<struct_wlr_allocator>,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<struct_wlr_drm_format>)>> create_buffer;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wlr_allocator>)>> destroy;
}

class struct_wlr_buffer extends ffi.Struct {
  external ffi.Pointer<struct_wlr_buffer_impl> impl;

  @ffi.Int()
  external int width;

  @ffi.Int()
  external int height;

  @ffi.Bool()
  external bool dropped;

  @ffi.Size()
  external int n_locks;

  @ffi.Bool()
  external bool accessing_data_ptr;

  external UnnamedStruct5 events;

  external struct_wlr_addon_set addons;
}

class struct_wlr_buffer_impl extends ffi.Struct {
  external ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<struct_wlr_buffer>)>>
      destroy;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<struct_wlr_buffer>,
              ffi.Pointer<struct_wlr_dmabuf_attributes>)>> get_dmabuf;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<struct_wlr_buffer>,
              ffi.Pointer<struct_wlr_shm_attributes>)>> get_shm;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<struct_wlr_buffer>,
              ffi.Uint32,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<ffi.Uint32>,
              ffi.Pointer<ffi.Size>)>> begin_data_ptr_access;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<struct_wlr_buffer>)>>
      end_data_ptr_access;
}

class struct_wlr_dmabuf_attributes extends ffi.Struct {
  @ffi.Int32()
  external int width;

  @ffi.Int32()
  external int height;

  @ffi.Uint32()
  external int format;

  @ffi.Uint64()
  external int modifier;

  @ffi.Int()
  external int n_planes;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Uint32> offset;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Uint32> stride;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Int> fd;
}

class struct_wlr_shm_attributes extends ffi.Struct {
  @ffi.Int()
  external int fd;

  @ffi.Uint32()
  external int format;

  @ffi.Int()
  external int width;

  @ffi.Int()
  external int height;

  @ffi.Int()
  external int stride;

  @off_t()
  external int offset;
}

typedef off_t = __off_t;
typedef __off_t = ffi.Long;

class UnnamedStruct5 extends ffi.Struct {
  external struct_wl_signal destroy;

  external struct_wl_signal release;
}

class struct_wlr_addon_set extends ffi.Struct {
  external struct_wl_list addons;
}

class struct_wlr_drm_format extends ffi.Opaque {}

class UnnamedStruct6 extends ffi.Struct {
  external struct_wl_signal destroy;
}

class struct_wlr_renderer extends ffi.Struct {
  external ffi.Pointer<struct_wlr_renderer_impl> impl;

  @ffi.Bool()
  external bool rendering;

  @ffi.Bool()
  external bool rendering_with_buffer;

  external UnnamedStruct7 events;
}

class struct_wlr_renderer_impl extends ffi.Opaque {}

class UnnamedStruct7 extends ffi.Struct {
  external struct_wl_signal destroy;
}

class struct_wlr_texture_impl extends ffi.Opaque {}

class struct_wlr_texture extends ffi.Struct {
  external ffi.Pointer<struct_wlr_texture_impl> impl;

  @ffi.Uint32()
  external int width;

  @ffi.Uint32()
  external int height;
}

abstract class enum_wlr_renderer_read_pixels_flags {
  static const int WLR_RENDERER_READ_PIXELS_Y_INVERT = 1;
}

class struct_wlr_drm_format_set extends ffi.Opaque {}

class struct_wlr_box extends ffi.Struct {
  @ffi.Int()
  external int x;

  @ffi.Int()
  external int y;

  @ffi.Int()
  external int width;

  @ffi.Int()
  external int height;
}

class struct_wlr_fbox extends ffi.Struct {
  @ffi.Double()
  external double x;

  @ffi.Double()
  external double y;

  @ffi.Double()
  external double width;

  @ffi.Double()
  external double height;
}

class struct_wlr_surface extends ffi.Struct {
  external ffi.Pointer<struct_wl_resource> resource;

  external ffi.Pointer<struct_wlr_renderer> renderer;

  external ffi.Pointer<struct_wlr_client_buffer> buffer;

  @ffi.Int()
  external int sx;

  @ffi.Int()
  external int sy;

  external pixman_region32_t buffer_damage;

  external pixman_region32_t external_damage;

  external pixman_region32_t opaque_region;

  external pixman_region32_t input_region;

  external struct_wlr_surface_state current;

  external struct_wlr_surface_state pending;

  external struct_wl_list cached;

  external ffi.Pointer<struct_wlr_surface_role> role;

  external ffi.Pointer<ffi.Void> role_data;

  external UnnamedStruct9 events;

  external struct_wl_list current_outputs;

  external struct_wlr_addon_set addons;

  external ffi.Pointer<ffi.Void> data;

  external struct_wl_listener renderer_destroy;

  external UnnamedStruct10 previous;
}

class struct_wlr_client_buffer extends ffi.Struct {
  external struct_wlr_buffer base;

  external ffi.Pointer<struct_wlr_texture> texture;

  external ffi.Pointer<struct_wlr_buffer> source;

  external struct_wl_listener source_destroy;

  @ffi.Uint32()
  external int shm_source_format;
}

typedef pixman_region32_t = struct_pixman_region32;

class struct_pixman_region32 extends ffi.Struct {
  external pixman_box32_t extents;

  external ffi.Pointer<pixman_region32_data_t> data;
}

typedef pixman_box32_t = struct_pixman_box32;

class struct_pixman_box32 extends ffi.Struct {
  @ffi.Int32()
  external int x1;

  @ffi.Int32()
  external int y1;

  @ffi.Int32()
  external int x2;

  @ffi.Int32()
  external int y2;
}

typedef pixman_region32_data_t = struct_pixman_region32_data;

class struct_pixman_region32_data extends ffi.Struct {
  @ffi.Long()
  external int size;

  @ffi.Long()
  external int numRects;
}

class struct_wlr_surface_state extends ffi.Struct {
  @ffi.Uint32()
  external int committed;

  @ffi.Uint32()
  external int seq;

  external ffi.Pointer<struct_wlr_buffer> buffer;

  @ffi.Int32()
  external int dx;

  @ffi.Int32()
  external int dy;

  external pixman_region32_t surface_damage;

  external pixman_region32_t buffer_damage;

  external pixman_region32_t opaque;

  external pixman_region32_t input;

  @ffi.Int32()
  external int transform;

  @ffi.Int32()
  external int scale;

  external struct_wl_list frame_callback_list;

  @ffi.Int()
  external int width;

  @ffi.Int()
  external int height;

  @ffi.Int()
  external int buffer_width;

  @ffi.Int()
  external int buffer_height;

  external struct_wl_list subsurfaces_below;

  external struct_wl_list subsurfaces_above;

  external UnnamedStruct8 viewport;

  @ffi.Size()
  external int cached_state_locks;

  external struct_wl_list cached_state_link;
}

abstract class enum_wl_output_transform {
  static const int WL_OUTPUT_TRANSFORM_NORMAL = 0;
  static const int WL_OUTPUT_TRANSFORM_90 = 1;
  static const int WL_OUTPUT_TRANSFORM_180 = 2;
  static const int WL_OUTPUT_TRANSFORM_270 = 3;
  static const int WL_OUTPUT_TRANSFORM_FLIPPED = 4;
  static const int WL_OUTPUT_TRANSFORM_FLIPPED_90 = 5;
  static const int WL_OUTPUT_TRANSFORM_FLIPPED_180 = 6;
  static const int WL_OUTPUT_TRANSFORM_FLIPPED_270 = 7;
}

class UnnamedStruct8 extends ffi.Struct {
  @ffi.Bool()
  external bool has_src;

  @ffi.Bool()
  external bool has_dst;

  external struct_wlr_fbox src;

  @ffi.Int()
  external int dst_width;

  @ffi.Int()
  external int dst_height;
}

class struct_wlr_surface_role extends ffi.Struct {
  external ffi.Pointer<ffi.Char> name;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wlr_surface>)>> commit;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wlr_surface>)>> precommit;
}

class UnnamedStruct9 extends ffi.Struct {
  external struct_wl_signal commit;

  external struct_wl_signal new_subsurface;

  external struct_wl_signal destroy;
}

class UnnamedStruct10 extends ffi.Struct {
  @ffi.Int32()
  external int scale;

  @ffi.Int32()
  external int transform;

  @ffi.Int()
  external int width;

  @ffi.Int()
  external int height;

  @ffi.Int()
  external int buffer_width;

  @ffi.Int()
  external int buffer_height;
}

class struct_wlr_subcompositor extends ffi.Struct {
  external ffi.Pointer<struct_wl_global> global;
}

class struct_wlr_compositor extends ffi.Struct {
  external ffi.Pointer<struct_wl_global> global;

  external ffi.Pointer<struct_wlr_renderer> renderer;

  external struct_wlr_subcompositor subcompositor;

  external struct_wl_listener display_destroy;

  external UnnamedStruct11 events;
}

class UnnamedStruct11 extends ffi.Struct {
  external struct_wl_signal new_surface;

  external struct_wl_signal destroy;
}

class struct_wlr_subsurface extends ffi.Struct {
  external ffi.Pointer<struct_wl_resource> resource;

  external ffi.Pointer<struct_wlr_surface> surface;

  external ffi.Pointer<struct_wlr_surface> parent;

  external struct_wlr_subsurface_parent_state current;

  external struct_wlr_subsurface_parent_state pending;

  @ffi.Uint32()
  external int cached_seq;

  @ffi.Bool()
  external bool has_cache;

  @ffi.Bool()
  external bool synchronized;

  @ffi.Bool()
  external bool reordered;

  @ffi.Bool()
  external bool mapped;

  @ffi.Bool()
  external bool added;

  external struct_wl_listener surface_destroy;

  external struct_wl_listener parent_destroy;

  external UnnamedStruct12 events;

  external ffi.Pointer<ffi.Void> data;
}

class struct_wlr_subsurface_parent_state extends ffi.Struct {
  @ffi.Int32()
  external int x;

  @ffi.Int32()
  external int y;

  external struct_wl_list link;
}

class UnnamedStruct12 extends ffi.Struct {
  external struct_wl_signal destroy;

  external struct_wl_signal map;

  external struct_wl_signal unmap;
}

abstract class enum_wlr_button_state {
  static const int WLR_BUTTON_RELEASED = 0;
  static const int WLR_BUTTON_PRESSED = 1;
}

abstract class enum_wlr_input_device_type {
  static const int WLR_INPUT_DEVICE_KEYBOARD = 0;
  static const int WLR_INPUT_DEVICE_POINTER = 1;
  static const int WLR_INPUT_DEVICE_TOUCH = 2;
  static const int WLR_INPUT_DEVICE_TABLET_TOOL = 3;
  static const int WLR_INPUT_DEVICE_TABLET_PAD = 4;
  static const int WLR_INPUT_DEVICE_SWITCH = 5;
}

class struct_wlr_input_device_impl extends ffi.Opaque {}

class struct_wlr_input_device extends ffi.Struct {
  external ffi.Pointer<struct_wlr_input_device_impl> impl;

  @ffi.Int32()
  external int type;

  @ffi.UnsignedInt()
  external int vendor;

  @ffi.UnsignedInt()
  external int product;

  external ffi.Pointer<ffi.Char> name;

  @ffi.Double()
  external double width_mm;

  @ffi.Double()
  external double height_mm;

  external ffi.Pointer<ffi.Char> output_name;

  external UnnamedUnion2 unnamed;

  external UnnamedStruct16 events;

  external ffi.Pointer<ffi.Void> data;
}

class UnnamedUnion2 extends ffi.Union {
  external ffi.Pointer<ffi.Void> _device;

  external ffi.Pointer<struct_wlr_keyboard> keyboard;

  external ffi.Pointer<struct_wlr_pointer> pointer;

  external ffi.Pointer<struct_wlr_switch> switch_device;

  external ffi.Pointer<struct_wlr_touch> touch;

  external ffi.Pointer<struct_wlr_tablet> tablet;

  external ffi.Pointer<struct_wlr_tablet_pad> tablet_pad;
}

class struct_wlr_keyboard extends ffi.Struct {
  external ffi.Pointer<struct_wlr_keyboard_impl> impl;

  external ffi.Pointer<struct_wlr_keyboard_group> group;

  external ffi.Pointer<ffi.Char> keymap_string;

  @ffi.Size()
  external int keymap_size;

  @ffi.Int()
  external int keymap_fd;

  external ffi.Pointer<struct_xkb_keymap> keymap;

  external ffi.Pointer<struct_xkb_state> xkb_state;

  @ffi.Array.multi([3])
  external ffi.Array<xkb_led_index_t> led_indexes;

  @ffi.Array.multi([8])
  external ffi.Array<xkb_mod_index_t> mod_indexes;

  @ffi.Array.multi([32])
  external ffi.Array<ffi.Uint32> keycodes;

  @ffi.Size()
  external int num_keycodes;

  external struct_wlr_keyboard_modifiers modifiers;

  external UnnamedStruct13 repeat_info;

  external UnnamedStruct14 events;

  external ffi.Pointer<ffi.Void> data;
}

class struct_wlr_keyboard_impl extends ffi.Opaque {}

class struct_wlr_keyboard_group extends ffi.Opaque {}

class struct_xkb_keymap extends ffi.Opaque {}

class struct_xkb_state extends ffi.Opaque {}

typedef xkb_led_index_t = ffi.Uint32;
typedef xkb_mod_index_t = ffi.Uint32;

class struct_wlr_keyboard_modifiers extends ffi.Struct {
  @xkb_mod_mask_t()
  external int depressed;

  @xkb_mod_mask_t()
  external int latched;

  @xkb_mod_mask_t()
  external int locked;

  @xkb_mod_mask_t()
  external int group;
}

typedef xkb_mod_mask_t = ffi.Uint32;

class UnnamedStruct13 extends ffi.Struct {
  @ffi.Int32()
  external int rate;

  @ffi.Int32()
  external int delay;
}

class UnnamedStruct14 extends ffi.Struct {
  external struct_wl_signal key;

  external struct_wl_signal modifiers;

  external struct_wl_signal keymap;

  external struct_wl_signal repeat_info;

  external struct_wl_signal destroy;
}

class struct_wlr_pointer extends ffi.Struct {
  external ffi.Pointer<struct_wlr_pointer_impl> impl;

  external UnnamedStruct15 events;

  external ffi.Pointer<ffi.Void> data;
}

class struct_wlr_pointer_impl extends ffi.Opaque {}

class UnnamedStruct15 extends ffi.Struct {
  external struct_wl_signal motion;

  external struct_wl_signal motion_absolute;

  external struct_wl_signal button;

  external struct_wl_signal axis;

  external struct_wl_signal frame;

  external struct_wl_signal swipe_begin;

  external struct_wl_signal swipe_update;

  external struct_wl_signal swipe_end;

  external struct_wl_signal pinch_begin;

  external struct_wl_signal pinch_update;

  external struct_wl_signal pinch_end;

  external struct_wl_signal hold_begin;

  external struct_wl_signal hold_end;
}

class struct_wlr_switch extends ffi.Opaque {}

class struct_wlr_touch extends ffi.Opaque {}

class struct_wlr_tablet extends ffi.Opaque {}

class struct_wlr_tablet_pad extends ffi.Opaque {}

class UnnamedStruct16 extends ffi.Struct {
  external struct_wl_signal destroy;
}

class struct_wl_buffer extends ffi.Opaque {}

class struct_wl_callback extends ffi.Opaque {}

class struct_wl_compositor extends ffi.Opaque {}

class struct_wl_data_device extends ffi.Opaque {}

class struct_wl_data_device_manager extends ffi.Opaque {}

class struct_wl_data_offer extends ffi.Opaque {}

class struct_wl_data_source extends ffi.Opaque {}

class struct_wl_keyboard extends ffi.Opaque {}

class struct_wl_output extends ffi.Opaque {}

class struct_wl_pointer extends ffi.Opaque {}

class struct_wl_region extends ffi.Opaque {}

class struct_wl_registry extends ffi.Opaque {}

class struct_wl_seat extends ffi.Opaque {}

class struct_wl_shell extends ffi.Opaque {}

class struct_wl_shell_surface extends ffi.Opaque {}

class struct_wl_shm extends ffi.Opaque {}

class struct_wl_subcompositor extends ffi.Opaque {}

class struct_wl_subsurface extends ffi.Opaque {}

class struct_wl_surface extends ffi.Opaque {}

class struct_wl_touch extends ffi.Opaque {}

abstract class enum_wl_display_error {
  static const int WL_DISPLAY_ERROR_INVALID_OBJECT = 0;
  static const int WL_DISPLAY_ERROR_INVALID_METHOD = 1;
  static const int WL_DISPLAY_ERROR_NO_MEMORY = 2;
  static const int WL_DISPLAY_ERROR_IMPLEMENTATION = 3;
}

class struct_wl_display_interface extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wl_client>,
              ffi.Pointer<struct_wl_resource>, ffi.Uint32)>> sync1;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wl_client>,
              ffi.Pointer<struct_wl_resource>, ffi.Uint32)>> get_registry;
}

class struct_wl_registry_interface extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wl_client>,
              ffi.Pointer<struct_wl_resource>,
              ffi.Uint32,
              ffi.Pointer<ffi.Char>,
              ffi.Uint32,
              ffi.Uint32)>> bind;
}

class struct_wl_compositor_interface extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wl_client>,
              ffi.Pointer<struct_wl_resource>, ffi.Uint32)>> create_surface;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wl_client>,
              ffi.Pointer<struct_wl_resource>, ffi.Uint32)>> create_region;
}

class struct_wl_shm_pool_interface extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wl_client>,
              ffi.Pointer<struct_wl_resource>,
              ffi.Uint32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Uint32)>> create_buffer;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wl_client>,
              ffi.Pointer<struct_wl_resource>)>> destroy;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wl_client>,
              ffi.Pointer<struct_wl_resource>, ffi.Int32)>> resize;
}

abstract class enum_wl_shm_error {
  static const int WL_SHM_ERROR_INVALID_FORMAT = 0;
  static const int WL_SHM_ERROR_INVALID_STRIDE = 1;
  static const int WL_SHM_ERROR_INVALID_FD = 2;
}

abstract class enum_wl_shm_format {
  static const int WL_SHM_FORMAT_ARGB8888 = 0;
  static const int WL_SHM_FORMAT_XRGB8888 = 1;
  static const int WL_SHM_FORMAT_C8 = 538982467;
  static const int WL_SHM_FORMAT_RGB332 = 943867730;
  static const int WL_SHM_FORMAT_BGR233 = 944916290;
  static const int WL_SHM_FORMAT_XRGB4444 = 842093144;
  static const int WL_SHM_FORMAT_XBGR4444 = 842089048;
  static const int WL_SHM_FORMAT_RGBX4444 = 842094674;
  static const int WL_SHM_FORMAT_BGRX4444 = 842094658;
  static const int WL_SHM_FORMAT_ARGB4444 = 842093121;
  static const int WL_SHM_FORMAT_ABGR4444 = 842089025;
  static const int WL_SHM_FORMAT_RGBA4444 = 842088786;
  static const int WL_SHM_FORMAT_BGRA4444 = 842088770;
  static const int WL_SHM_FORMAT_XRGB1555 = 892424792;
  static const int WL_SHM_FORMAT_XBGR1555 = 892420696;
  static const int WL_SHM_FORMAT_RGBX5551 = 892426322;
  static const int WL_SHM_FORMAT_BGRX5551 = 892426306;
  static const int WL_SHM_FORMAT_ARGB1555 = 892424769;
  static const int WL_SHM_FORMAT_ABGR1555 = 892420673;
  static const int WL_SHM_FORMAT_RGBA5551 = 892420434;
  static const int WL_SHM_FORMAT_BGRA5551 = 892420418;
  static const int WL_SHM_FORMAT_RGB565 = 909199186;
  static const int WL_SHM_FORMAT_BGR565 = 909199170;
  static const int WL_SHM_FORMAT_RGB888 = 875710290;
  static const int WL_SHM_FORMAT_BGR888 = 875710274;
  static const int WL_SHM_FORMAT_XBGR8888 = 875709016;
  static const int WL_SHM_FORMAT_RGBX8888 = 875714642;
  static const int WL_SHM_FORMAT_BGRX8888 = 875714626;
  static const int WL_SHM_FORMAT_ABGR8888 = 875708993;
  static const int WL_SHM_FORMAT_RGBA8888 = 875708754;
  static const int WL_SHM_FORMAT_BGRA8888 = 875708738;
  static const int WL_SHM_FORMAT_XRGB2101010 = 808669784;
  static const int WL_SHM_FORMAT_XBGR2101010 = 808665688;
  static const int WL_SHM_FORMAT_RGBX1010102 = 808671314;
  static const int WL_SHM_FORMAT_BGRX1010102 = 808671298;
  static const int WL_SHM_FORMAT_ARGB2101010 = 808669761;
  static const int WL_SHM_FORMAT_ABGR2101010 = 808665665;
  static const int WL_SHM_FORMAT_RGBA1010102 = 808665426;
  static const int WL_SHM_FORMAT_BGRA1010102 = 808665410;
  static const int WL_SHM_FORMAT_YUYV = 1448695129;
  static const int WL_SHM_FORMAT_YVYU = 1431918169;
  static const int WL_SHM_FORMAT_UYVY = 1498831189;
  static const int WL_SHM_FORMAT_VYUY = 1498765654;
  static const int WL_SHM_FORMAT_AYUV = 1448433985;
  static const int WL_SHM_FORMAT_NV12 = 842094158;
  static const int WL_SHM_FORMAT_NV21 = 825382478;
  static const int WL_SHM_FORMAT_NV16 = 909203022;
  static const int WL_SHM_FORMAT_NV61 = 825644622;
  static const int WL_SHM_FORMAT_YUV410 = 961959257;
  static const int WL_SHM_FORMAT_YVU410 = 961893977;
  static const int WL_SHM_FORMAT_YUV411 = 825316697;
  static const int WL_SHM_FORMAT_YVU411 = 825316953;
  static const int WL_SHM_FORMAT_YUV420 = 842093913;
  static const int WL_SHM_FORMAT_YVU420 = 842094169;
  static const int WL_SHM_FORMAT_YUV422 = 909202777;
  static const int WL_SHM_FORMAT_YVU422 = 909203033;
  static const int WL_SHM_FORMAT_YUV444 = 875713881;
  static const int WL_SHM_FORMAT_YVU444 = 875714137;
  static const int WL_SHM_FORMAT_R8 = 538982482;
  static const int WL_SHM_FORMAT_R16 = 540422482;
  static const int WL_SHM_FORMAT_RG88 = 943212370;
  static const int WL_SHM_FORMAT_GR88 = 943215175;
  static const int WL_SHM_FORMAT_RG1616 = 842221394;
  static const int WL_SHM_FORMAT_GR1616 = 842224199;
  static const int WL_SHM_FORMAT_XRGB16161616F = 1211388504;
  static const int WL_SHM_FORMAT_XBGR16161616F = 1211384408;
  static const int WL_SHM_FORMAT_ARGB16161616F = 1211388481;
  static const int WL_SHM_FORMAT_ABGR16161616F = 1211384385;
  static const int WL_SHM_FORMAT_XYUV8888 = 1448434008;
  static const int WL_SHM_FORMAT_VUY888 = 875713878;
  static const int WL_SHM_FORMAT_VUY101010 = 808670550;
  static const int WL_SHM_FORMAT_Y210 = 808530521;
  static const int WL_SHM_FORMAT_Y212 = 842084953;
  static const int WL_SHM_FORMAT_Y216 = 909193817;
  static const int WL_SHM_FORMAT_Y410 = 808531033;
  static const int WL_SHM_FORMAT_Y412 = 842085465;
  static const int WL_SHM_FORMAT_Y416 = 909194329;
  static const int WL_SHM_FORMAT_XVYU2101010 = 808670808;
  static const int WL_SHM_FORMAT_XVYU12_16161616 = 909334104;
  static const int WL_SHM_FORMAT_XVYU16161616 = 942954072;
  static const int WL_SHM_FORMAT_Y0L0 = 810299481;
  static const int WL_SHM_FORMAT_X0L0 = 810299480;
  static const int WL_SHM_FORMAT_Y0L2 = 843853913;
  static const int WL_SHM_FORMAT_X0L2 = 843853912;
  static const int WL_SHM_FORMAT_YUV420_8BIT = 942691673;
  static const int WL_SHM_FORMAT_YUV420_10BIT = 808539481;
  static const int WL_SHM_FORMAT_XRGB8888_A8 = 943805016;
  static const int WL_SHM_FORMAT_XBGR8888_A8 = 943800920;
  static const int WL_SHM_FORMAT_RGBX8888_A8 = 943806546;
  static const int WL_SHM_FORMAT_BGRX8888_A8 = 943806530;
  static const int WL_SHM_FORMAT_RGB888_A8 = 943798354;
  static const int WL_SHM_FORMAT_BGR888_A8 = 943798338;
  static const int WL_SHM_FORMAT_RGB565_A8 = 943797586;
  static const int WL_SHM_FORMAT_BGR565_A8 = 943797570;
  static const int WL_SHM_FORMAT_NV24 = 875714126;
  static const int WL_SHM_FORMAT_NV42 = 842290766;
  static const int WL_SHM_FORMAT_P210 = 808530512;
  static const int WL_SHM_FORMAT_P010 = 808530000;
  static const int WL_SHM_FORMAT_P012 = 842084432;
  static const int WL_SHM_FORMAT_P016 = 909193296;
  static const int WL_SHM_FORMAT_AXBXGXRX106106106106 = 808534593;
  static const int WL_SHM_FORMAT_NV15 = 892425806;
  static const int WL_SHM_FORMAT_Q410 = 808531025;
  static const int WL_SHM_FORMAT_Q401 = 825242705;
  static const int WL_SHM_FORMAT_XRGB16161616 = 942953048;
  static const int WL_SHM_FORMAT_XBGR16161616 = 942948952;
  static const int WL_SHM_FORMAT_ARGB16161616 = 942953025;
  static const int WL_SHM_FORMAT_ABGR16161616 = 942948929;
}

class struct_wl_shm_interface extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wl_client>,
              ffi.Pointer<struct_wl_resource>,
              ffi.Uint32,
              ffi.Int32,
              ffi.Int32)>> create_pool;
}

class struct_wl_buffer_interface extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wl_client>,
              ffi.Pointer<struct_wl_resource>)>> destroy;
}

abstract class enum_wl_data_offer_error {
  static const int WL_DATA_OFFER_ERROR_INVALID_FINISH = 0;
  static const int WL_DATA_OFFER_ERROR_INVALID_ACTION_MASK = 1;
  static const int WL_DATA_OFFER_ERROR_INVALID_ACTION = 2;
  static const int WL_DATA_OFFER_ERROR_INVALID_OFFER = 3;
}

class struct_wl_data_offer_interface extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wl_client>,
              ffi.Pointer<struct_wl_resource>,
              ffi.Uint32,
              ffi.Pointer<ffi.Char>)>> accept;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wl_client>,
              ffi.Pointer<struct_wl_resource>,
              ffi.Pointer<ffi.Char>,
              ffi.Int32)>> receive;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wl_client>,
              ffi.Pointer<struct_wl_resource>)>> destroy;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wl_client>,
              ffi.Pointer<struct_wl_resource>)>> finish;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wl_client>,
              ffi.Pointer<struct_wl_resource>,
              ffi.Uint32,
              ffi.Uint32)>> set_actions;
}

abstract class enum_wl_data_source_error {
  static const int WL_DATA_SOURCE_ERROR_INVALID_ACTION_MASK = 0;
  static const int WL_DATA_SOURCE_ERROR_INVALID_SOURCE = 1;
}

class struct_wl_data_source_interface extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wl_client>,
              ffi.Pointer<struct_wl_resource>, ffi.Pointer<ffi.Char>)>> offer;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wl_client>,
              ffi.Pointer<struct_wl_resource>)>> destroy;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wl_client>,
              ffi.Pointer<struct_wl_resource>, ffi.Uint32)>> set_actions;
}

abstract class enum_wl_data_device_error {
  static const int WL_DATA_DEVICE_ERROR_ROLE = 0;
}

class struct_wl_data_device_interface extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wl_client>,
              ffi.Pointer<struct_wl_resource>,
              ffi.Pointer<struct_wl_resource>,
              ffi.Pointer<struct_wl_resource>,
              ffi.Pointer<struct_wl_resource>,
              ffi.Uint32)>> start_drag;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wl_client>,
              ffi.Pointer<struct_wl_resource>,
              ffi.Pointer<struct_wl_resource>,
              ffi.Uint32)>> set_selection;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wl_client>,
              ffi.Pointer<struct_wl_resource>)>> release;
}

abstract class enum_wl_data_device_manager_dnd_action {
  static const int WL_DATA_DEVICE_MANAGER_DND_ACTION_NONE = 0;
  static const int WL_DATA_DEVICE_MANAGER_DND_ACTION_COPY = 1;
  static const int WL_DATA_DEVICE_MANAGER_DND_ACTION_MOVE = 2;
  static const int WL_DATA_DEVICE_MANAGER_DND_ACTION_ASK = 4;
}

class struct_wl_data_device_manager_interface extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wl_client>,
              ffi.Pointer<struct_wl_resource>, ffi.Uint32)>> create_data_source;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wl_client>,
              ffi.Pointer<struct_wl_resource>,
              ffi.Uint32,
              ffi.Pointer<struct_wl_resource>)>> get_data_device;
}

abstract class enum_wl_shell_error {
  static const int WL_SHELL_ERROR_ROLE = 0;
}

class struct_wl_shell_interface extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wl_client>,
              ffi.Pointer<struct_wl_resource>,
              ffi.Uint32,
              ffi.Pointer<struct_wl_resource>)>> get_shell_surface;
}

abstract class enum_wl_shell_surface_resize {
  static const int WL_SHELL_SURFACE_RESIZE_NONE = 0;
  static const int WL_SHELL_SURFACE_RESIZE_TOP = 1;
  static const int WL_SHELL_SURFACE_RESIZE_BOTTOM = 2;
  static const int WL_SHELL_SURFACE_RESIZE_LEFT = 4;
  static const int WL_SHELL_SURFACE_RESIZE_TOP_LEFT = 5;
  static const int WL_SHELL_SURFACE_RESIZE_BOTTOM_LEFT = 6;
  static const int WL_SHELL_SURFACE_RESIZE_RIGHT = 8;
  static const int WL_SHELL_SURFACE_RESIZE_TOP_RIGHT = 9;
  static const int WL_SHELL_SURFACE_RESIZE_BOTTOM_RIGHT = 10;
}

abstract class enum_wl_shell_surface_transient {
  static const int WL_SHELL_SURFACE_TRANSIENT_INACTIVE = 1;
}

abstract class enum_wl_shell_surface_fullscreen_method {
  static const int WL_SHELL_SURFACE_FULLSCREEN_METHOD_DEFAULT = 0;
  static const int WL_SHELL_SURFACE_FULLSCREEN_METHOD_SCALE = 1;
  static const int WL_SHELL_SURFACE_FULLSCREEN_METHOD_DRIVER = 2;
  static const int WL_SHELL_SURFACE_FULLSCREEN_METHOD_FILL = 3;
}

class struct_wl_shell_surface_interface extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wl_client>,
              ffi.Pointer<struct_wl_resource>, ffi.Uint32)>> pong;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wl_client>,
              ffi.Pointer<struct_wl_resource>,
              ffi.Pointer<struct_wl_resource>,
              ffi.Uint32)>> move;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wl_client>,
              ffi.Pointer<struct_wl_resource>,
              ffi.Pointer<struct_wl_resource>,
              ffi.Uint32,
              ffi.Uint32)>> resize;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wl_client>,
              ffi.Pointer<struct_wl_resource>)>> set_toplevel;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wl_client>,
              ffi.Pointer<struct_wl_resource>,
              ffi.Pointer<struct_wl_resource>,
              ffi.Int32,
              ffi.Int32,
              ffi.Uint32)>> set_transient;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wl_client>,
              ffi.Pointer<struct_wl_resource>,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Pointer<struct_wl_resource>)>> set_fullscreen;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wl_client>,
              ffi.Pointer<struct_wl_resource>,
              ffi.Pointer<struct_wl_resource>,
              ffi.Uint32,
              ffi.Pointer<struct_wl_resource>,
              ffi.Int32,
              ffi.Int32,
              ffi.Uint32)>> set_popup;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wl_client>,
              ffi.Pointer<struct_wl_resource>,
              ffi.Pointer<struct_wl_resource>)>> set_maximized;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wl_client>,
              ffi.Pointer<struct_wl_resource>,
              ffi.Pointer<ffi.Char>)>> set_title;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wl_client>,
              ffi.Pointer<struct_wl_resource>,
              ffi.Pointer<ffi.Char>)>> set_class;
}

abstract class enum_wl_surface_error {
  static const int WL_SURFACE_ERROR_INVALID_SCALE = 0;
  static const int WL_SURFACE_ERROR_INVALID_TRANSFORM = 1;
  static const int WL_SURFACE_ERROR_INVALID_SIZE = 2;
  static const int WL_SURFACE_ERROR_INVALID_OFFSET = 3;
}

class struct_wl_surface_interface extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wl_client>,
              ffi.Pointer<struct_wl_resource>)>> destroy;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wl_client>,
              ffi.Pointer<struct_wl_resource>,
              ffi.Pointer<struct_wl_resource>,
              ffi.Int32,
              ffi.Int32)>> attach;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wl_client>,
              ffi.Pointer<struct_wl_resource>,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32)>> damage;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wl_client>,
              ffi.Pointer<struct_wl_resource>, ffi.Uint32)>> frame;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wl_client>,
              ffi.Pointer<struct_wl_resource>,
              ffi.Pointer<struct_wl_resource>)>> set_opaque_region;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wl_client>,
              ffi.Pointer<struct_wl_resource>,
              ffi.Pointer<struct_wl_resource>)>> set_input_region;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wl_client>,
              ffi.Pointer<struct_wl_resource>)>> commit;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wl_client>,
              ffi.Pointer<struct_wl_resource>,
              ffi.Int32)>> set_buffer_transform;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wl_client>,
              ffi.Pointer<struct_wl_resource>, ffi.Int32)>> set_buffer_scale;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wl_client>,
              ffi.Pointer<struct_wl_resource>,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32)>> damage_buffer;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wl_client>,
              ffi.Pointer<struct_wl_resource>, ffi.Int32, ffi.Int32)>> offset;
}

abstract class enum_wl_seat_capability {
  static const int WL_SEAT_CAPABILITY_POINTER = 1;
  static const int WL_SEAT_CAPABILITY_KEYBOARD = 2;
  static const int WL_SEAT_CAPABILITY_TOUCH = 4;
}

abstract class enum_wl_seat_error {
  static const int WL_SEAT_ERROR_MISSING_CAPABILITY = 0;
}

class struct_wl_seat_interface extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wl_client>,
              ffi.Pointer<struct_wl_resource>, ffi.Uint32)>> get_pointer;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wl_client>,
              ffi.Pointer<struct_wl_resource>, ffi.Uint32)>> get_keyboard;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wl_client>,
              ffi.Pointer<struct_wl_resource>, ffi.Uint32)>> get_touch;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wl_client>,
              ffi.Pointer<struct_wl_resource>)>> release;
}

abstract class enum_wl_pointer_error {
  static const int WL_POINTER_ERROR_ROLE = 0;
}

abstract class enum_wl_pointer_button_state {
  static const int WL_POINTER_BUTTON_STATE_RELEASED = 0;
  static const int WL_POINTER_BUTTON_STATE_PRESSED = 1;
}

abstract class enum_wl_pointer_axis {
  static const int WL_POINTER_AXIS_VERTICAL_SCROLL = 0;
  static const int WL_POINTER_AXIS_HORIZONTAL_SCROLL = 1;
}

abstract class enum_wl_pointer_axis_source {
  static const int WL_POINTER_AXIS_SOURCE_WHEEL = 0;
  static const int WL_POINTER_AXIS_SOURCE_FINGER = 1;
  static const int WL_POINTER_AXIS_SOURCE_CONTINUOUS = 2;
  static const int WL_POINTER_AXIS_SOURCE_WHEEL_TILT = 3;
}

class struct_wl_pointer_interface extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wl_client>,
              ffi.Pointer<struct_wl_resource>,
              ffi.Uint32,
              ffi.Pointer<struct_wl_resource>,
              ffi.Int32,
              ffi.Int32)>> set_cursor;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wl_client>,
              ffi.Pointer<struct_wl_resource>)>> release;
}

abstract class enum_wl_keyboard_keymap_format {
  static const int WL_KEYBOARD_KEYMAP_FORMAT_NO_KEYMAP = 0;
  static const int WL_KEYBOARD_KEYMAP_FORMAT_XKB_V1 = 1;
}

abstract class enum_wl_keyboard_key_state {
  static const int WL_KEYBOARD_KEY_STATE_RELEASED = 0;
  static const int WL_KEYBOARD_KEY_STATE_PRESSED = 1;
}

class struct_wl_keyboard_interface extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wl_client>,
              ffi.Pointer<struct_wl_resource>)>> release;
}

class struct_wl_touch_interface extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wl_client>,
              ffi.Pointer<struct_wl_resource>)>> release;
}

abstract class enum_wl_output_subpixel {
  static const int WL_OUTPUT_SUBPIXEL_UNKNOWN = 0;
  static const int WL_OUTPUT_SUBPIXEL_NONE = 1;
  static const int WL_OUTPUT_SUBPIXEL_HORIZONTAL_RGB = 2;
  static const int WL_OUTPUT_SUBPIXEL_HORIZONTAL_BGR = 3;
  static const int WL_OUTPUT_SUBPIXEL_VERTICAL_RGB = 4;
  static const int WL_OUTPUT_SUBPIXEL_VERTICAL_BGR = 5;
}

abstract class enum_wl_output_mode {
  static const int WL_OUTPUT_MODE_CURRENT = 1;
  static const int WL_OUTPUT_MODE_PREFERRED = 2;
}

class struct_wl_output_interface extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wl_client>,
              ffi.Pointer<struct_wl_resource>)>> release;
}

class struct_wl_region_interface extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wl_client>,
              ffi.Pointer<struct_wl_resource>)>> destroy;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wl_client>,
              ffi.Pointer<struct_wl_resource>,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32)>> add;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wl_client>,
              ffi.Pointer<struct_wl_resource>,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32)>> subtract;
}

abstract class enum_wl_subcompositor_error {
  static const int WL_SUBCOMPOSITOR_ERROR_BAD_SURFACE = 0;
}

class struct_wl_subcompositor_interface extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wl_client>,
              ffi.Pointer<struct_wl_resource>)>> destroy;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wl_client>,
              ffi.Pointer<struct_wl_resource>,
              ffi.Uint32,
              ffi.Pointer<struct_wl_resource>,
              ffi.Pointer<struct_wl_resource>)>> get_subsurface;
}

abstract class enum_wl_subsurface_error {
  static const int WL_SUBSURFACE_ERROR_BAD_SURFACE = 0;
}

class struct_wl_subsurface_interface extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wl_client>,
              ffi.Pointer<struct_wl_resource>)>> destroy;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wl_client>,
              ffi.Pointer<struct_wl_resource>,
              ffi.Int32,
              ffi.Int32)>> set_position;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wl_client>,
              ffi.Pointer<struct_wl_resource>,
              ffi.Pointer<struct_wl_resource>)>> place_above;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wl_client>,
              ffi.Pointer<struct_wl_resource>,
              ffi.Pointer<struct_wl_resource>)>> place_below;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wl_client>,
              ffi.Pointer<struct_wl_resource>)>> set_sync;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wl_client>,
              ffi.Pointer<struct_wl_resource>)>> set_desync;
}

class struct___mbstate_t extends ffi.Struct {
  @ffi.Int()
  external int __count;

  external UnnamedUnion3 __value;
}

class UnnamedUnion3 extends ffi.Union {
  @ffi.UnsignedInt()
  external int __wch;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Char> __wchb;
}

class struct__G_fpos_t extends ffi.Struct {
  @__off_t()
  external int __pos;

  external struct___mbstate_t __state;
}

class struct__G_fpos64_t extends ffi.Struct {
  @__off64_t()
  external int __pos;

  external struct___mbstate_t __state;
}

typedef __off64_t = ffi.Long;

class struct__IO_FILE extends ffi.Struct {
  @ffi.Int()
  external int _flags;

  external ffi.Pointer<ffi.Char> _IO_read_ptr;

  external ffi.Pointer<ffi.Char> _IO_read_end;

  external ffi.Pointer<ffi.Char> _IO_read_base;

  external ffi.Pointer<ffi.Char> _IO_write_base;

  external ffi.Pointer<ffi.Char> _IO_write_ptr;

  external ffi.Pointer<ffi.Char> _IO_write_end;

  external ffi.Pointer<ffi.Char> _IO_buf_base;

  external ffi.Pointer<ffi.Char> _IO_buf_end;

  external ffi.Pointer<ffi.Char> _IO_save_base;

  external ffi.Pointer<ffi.Char> _IO_backup_base;

  external ffi.Pointer<ffi.Char> _IO_save_end;

  external ffi.Pointer<struct__IO_marker> _markers;

  external ffi.Pointer<struct__IO_FILE> _chain;

  @ffi.Int()
  external int _fileno;

  @ffi.Int()
  external int _flags2;

  @__off_t()
  external int _old_offset;

  @ffi.UnsignedShort()
  external int _cur_column;

  @ffi.SignedChar()
  external int _vtable_offset;

  @ffi.Array.multi([1])
  external ffi.Array<ffi.Char> _shortbuf;

  external ffi.Pointer<_IO_lock_t> _lock;

  @__off64_t()
  external int _offset;

  external ffi.Pointer<struct__IO_codecvt> _codecvt;

  external ffi.Pointer<struct__IO_wide_data> _wide_data;

  external ffi.Pointer<struct__IO_FILE> _freeres_list;

  external ffi.Pointer<ffi.Void> _freeres_buf;

  @ffi.Size()
  external int __pad5;

  @ffi.Int()
  external int _mode;

  @ffi.Array.multi([20])
  external ffi.Array<ffi.Char> _unused2;
}

class struct__IO_marker extends ffi.Opaque {}

typedef _IO_lock_t = ffi.Void;

class struct__IO_codecvt extends ffi.Opaque {}

class struct__IO_wide_data extends ffi.Opaque {}

typedef FILE = struct__IO_FILE;
typedef fpos_t = __fpos_t;
typedef __fpos_t = struct__G_fpos_t;

class struct_xkb_context extends ffi.Opaque {}

class struct_xkb_rule_names extends ffi.Struct {
  external ffi.Pointer<ffi.Char> rules;

  external ffi.Pointer<ffi.Char> model;

  external ffi.Pointer<ffi.Char> layout;

  external ffi.Pointer<ffi.Char> variant;

  external ffi.Pointer<ffi.Char> options;
}

typedef xkb_keysym_t = ffi.Uint32;

abstract class enum_xkb_keysym_flags {
  static const int XKB_KEYSYM_NO_FLAGS = 0;
  static const int XKB_KEYSYM_CASE_INSENSITIVE = 1;
}

abstract class enum_xkb_context_flags {
  static const int XKB_CONTEXT_NO_FLAGS = 0;
  static const int XKB_CONTEXT_NO_DEFAULT_INCLUDES = 1;
  static const int XKB_CONTEXT_NO_ENVIRONMENT_NAMES = 2;
}

abstract class enum_xkb_log_level {
  static const int XKB_LOG_LEVEL_CRITICAL = 10;
  static const int XKB_LOG_LEVEL_ERROR = 20;
  static const int XKB_LOG_LEVEL_WARNING = 30;
  static const int XKB_LOG_LEVEL_INFO = 40;
  static const int XKB_LOG_LEVEL_DEBUG = 50;
}

abstract class enum_xkb_keymap_compile_flags {
  static const int XKB_KEYMAP_COMPILE_NO_FLAGS = 0;
}

abstract class enum_xkb_keymap_format {
  static const int XKB_KEYMAP_FORMAT_TEXT_V1 = 1;
}

typedef xkb_keycode_t = ffi.Uint32;
typedef xkb_keymap_key_iter_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<struct_xkb_keymap>, xkb_keycode_t,
            ffi.Pointer<ffi.Void>)>>;
typedef xkb_layout_index_t = ffi.Uint32;
typedef xkb_level_index_t = ffi.Uint32;

abstract class enum_xkb_key_direction {
  static const int XKB_KEY_UP = 0;
  static const int XKB_KEY_DOWN = 1;
}

abstract class enum_xkb_state_component {
  static const int XKB_STATE_MODS_DEPRESSED = 1;
  static const int XKB_STATE_MODS_LATCHED = 2;
  static const int XKB_STATE_MODS_LOCKED = 4;
  static const int XKB_STATE_MODS_EFFECTIVE = 8;
  static const int XKB_STATE_LAYOUT_DEPRESSED = 16;
  static const int XKB_STATE_LAYOUT_LATCHED = 32;
  static const int XKB_STATE_LAYOUT_LOCKED = 64;
  static const int XKB_STATE_LAYOUT_EFFECTIVE = 128;
  static const int XKB_STATE_LEDS = 256;
}

abstract class enum_xkb_state_match {
  static const int XKB_STATE_MATCH_ANY = 1;
  static const int XKB_STATE_MATCH_ALL = 2;
  static const int XKB_STATE_MATCH_NON_EXCLUSIVE = 65536;
}

abstract class enum_xkb_consumed_mode {
  static const int XKB_CONSUMED_MODE_XKB = 0;
  static const int XKB_CONSUMED_MODE_GTK = 1;
}

abstract class enum_wlr_keyboard_led {
  static const int WLR_LED_NUM_LOCK = 1;
  static const int WLR_LED_CAPS_LOCK = 2;
  static const int WLR_LED_SCROLL_LOCK = 4;
}

abstract class enum_wlr_keyboard_modifier {
  static const int WLR_MODIFIER_SHIFT = 1;
  static const int WLR_MODIFIER_CAPS = 2;
  static const int WLR_MODIFIER_CTRL = 4;
  static const int WLR_MODIFIER_ALT = 8;
  static const int WLR_MODIFIER_MOD2 = 16;
  static const int WLR_MODIFIER_MOD3 = 32;
  static const int WLR_MODIFIER_LOGO = 64;
  static const int WLR_MODIFIER_MOD5 = 128;
}

class struct_wlr_event_keyboard_key extends ffi.Struct {
  @ffi.Uint32()
  external int time_msec;

  @ffi.Uint32()
  external int keycode;

  @ffi.Bool()
  external bool update_state;

  @ffi.Int32()
  external int state;
}

class struct_pixman_color extends ffi.Struct {
  @ffi.Uint16()
  external int red;

  @ffi.Uint16()
  external int green;

  @ffi.Uint16()
  external int blue;

  @ffi.Uint16()
  external int alpha;
}

class struct_pixman_point_fixed extends ffi.Struct {
  @pixman_fixed_t()
  external int x;

  @pixman_fixed_t()
  external int y;
}

typedef pixman_fixed_t = pixman_fixed_16_16_t;
typedef pixman_fixed_16_16_t = ffi.Int32;

class struct_pixman_line_fixed extends ffi.Struct {
  external pixman_point_fixed_t p1;

  external pixman_point_fixed_t p2;
}

typedef pixman_point_fixed_t = struct_pixman_point_fixed;

class struct_pixman_vector extends ffi.Struct {
  @ffi.Array.multi([3])
  external ffi.Array<pixman_fixed_t> vector;
}

class struct_pixman_transform extends ffi.Struct {
  @ffi.Array.multi([3, 3])
  external ffi.Array<ffi.Array<pixman_fixed_t>> matrix;
}

class struct_pixman_box16 extends ffi.Struct {
  @ffi.Int16()
  external int x1;

  @ffi.Int16()
  external int y1;

  @ffi.Int16()
  external int x2;

  @ffi.Int16()
  external int y2;
}

class pixman_image extends ffi.Opaque {}

typedef pixman_bool_t = ffi.Int;

class struct_pixman_f_transform extends ffi.Struct {
  @ffi.Array.multi([3, 3])
  external ffi.Array<ffi.Array<ffi.Double>> m;
}

class struct_pixman_f_vector extends ffi.Struct {
  @ffi.Array.multi([3])
  external ffi.Array<ffi.Double> v;
}

abstract class enum_pixman_repeat_t {
  static const int PIXMAN_REPEAT_NONE = 0;
  static const int PIXMAN_REPEAT_NORMAL = 1;
  static const int PIXMAN_REPEAT_PAD = 2;
  static const int PIXMAN_REPEAT_REFLECT = 3;
}

abstract class enum_pixman_dither_t {
  static const int PIXMAN_DITHER_NONE = 0;
  static const int PIXMAN_DITHER_FAST = 1;
  static const int PIXMAN_DITHER_GOOD = 2;
  static const int PIXMAN_DITHER_BEST = 3;
  static const int PIXMAN_DITHER_ORDERED_BAYER_8 = 4;
  static const int PIXMAN_DITHER_ORDERED_BLUE_NOISE_64 = 5;
}

abstract class enum_pixman_filter_t {
  static const int PIXMAN_FILTER_FAST = 0;
  static const int PIXMAN_FILTER_GOOD = 1;
  static const int PIXMAN_FILTER_BEST = 2;
  static const int PIXMAN_FILTER_NEAREST = 3;
  static const int PIXMAN_FILTER_BILINEAR = 4;
  static const int PIXMAN_FILTER_CONVOLUTION = 5;
  static const int PIXMAN_FILTER_SEPARABLE_CONVOLUTION = 6;
}

abstract class enum_pixman_op_t {
  static const int PIXMAN_OP_CLEAR = 0;
  static const int PIXMAN_OP_SRC = 1;
  static const int PIXMAN_OP_DST = 2;
  static const int PIXMAN_OP_OVER = 3;
  static const int PIXMAN_OP_OVER_REVERSE = 4;
  static const int PIXMAN_OP_IN = 5;
  static const int PIXMAN_OP_IN_REVERSE = 6;
  static const int PIXMAN_OP_OUT = 7;
  static const int PIXMAN_OP_OUT_REVERSE = 8;
  static const int PIXMAN_OP_ATOP = 9;
  static const int PIXMAN_OP_ATOP_REVERSE = 10;
  static const int PIXMAN_OP_XOR = 11;
  static const int PIXMAN_OP_ADD = 12;
  static const int PIXMAN_OP_SATURATE = 13;
  static const int PIXMAN_OP_DISJOINT_CLEAR = 16;
  static const int PIXMAN_OP_DISJOINT_SRC = 17;
  static const int PIXMAN_OP_DISJOINT_DST = 18;
  static const int PIXMAN_OP_DISJOINT_OVER = 19;
  static const int PIXMAN_OP_DISJOINT_OVER_REVERSE = 20;
  static const int PIXMAN_OP_DISJOINT_IN = 21;
  static const int PIXMAN_OP_DISJOINT_IN_REVERSE = 22;
  static const int PIXMAN_OP_DISJOINT_OUT = 23;
  static const int PIXMAN_OP_DISJOINT_OUT_REVERSE = 24;
  static const int PIXMAN_OP_DISJOINT_ATOP = 25;
  static const int PIXMAN_OP_DISJOINT_ATOP_REVERSE = 26;
  static const int PIXMAN_OP_DISJOINT_XOR = 27;
  static const int PIXMAN_OP_CONJOINT_CLEAR = 32;
  static const int PIXMAN_OP_CONJOINT_SRC = 33;
  static const int PIXMAN_OP_CONJOINT_DST = 34;
  static const int PIXMAN_OP_CONJOINT_OVER = 35;
  static const int PIXMAN_OP_CONJOINT_OVER_REVERSE = 36;
  static const int PIXMAN_OP_CONJOINT_IN = 37;
  static const int PIXMAN_OP_CONJOINT_IN_REVERSE = 38;
  static const int PIXMAN_OP_CONJOINT_OUT = 39;
  static const int PIXMAN_OP_CONJOINT_OUT_REVERSE = 40;
  static const int PIXMAN_OP_CONJOINT_ATOP = 41;
  static const int PIXMAN_OP_CONJOINT_ATOP_REVERSE = 42;
  static const int PIXMAN_OP_CONJOINT_XOR = 43;
  static const int PIXMAN_OP_MULTIPLY = 48;
  static const int PIXMAN_OP_SCREEN = 49;
  static const int PIXMAN_OP_OVERLAY = 50;
  static const int PIXMAN_OP_DARKEN = 51;
  static const int PIXMAN_OP_LIGHTEN = 52;
  static const int PIXMAN_OP_COLOR_DODGE = 53;
  static const int PIXMAN_OP_COLOR_BURN = 54;
  static const int PIXMAN_OP_HARD_LIGHT = 55;
  static const int PIXMAN_OP_SOFT_LIGHT = 56;
  static const int PIXMAN_OP_DIFFERENCE = 57;
  static const int PIXMAN_OP_EXCLUSION = 58;
  static const int PIXMAN_OP_HSL_HUE = 59;
  static const int PIXMAN_OP_HSL_SATURATION = 60;
  static const int PIXMAN_OP_HSL_COLOR = 61;
  static const int PIXMAN_OP_HSL_LUMINOSITY = 62;
}

class struct_pixman_region16_data extends ffi.Struct {
  @ffi.Long()
  external int size;

  @ffi.Long()
  external int numRects;
}

class struct_pixman_rectangle16 extends ffi.Struct {
  @ffi.Int16()
  external int x;

  @ffi.Int16()
  external int y;

  @ffi.Uint16()
  external int width;

  @ffi.Uint16()
  external int height;
}

class struct_pixman_region16 extends ffi.Struct {
  external pixman_box16_t extents;

  external ffi.Pointer<pixman_region16_data_t> data;
}

typedef pixman_box16_t = struct_pixman_box16;
typedef pixman_region16_data_t = struct_pixman_region16_data;

abstract class enum_pixman_region_overlap_t {
  static const int PIXMAN_REGION_OUT = 0;
  static const int PIXMAN_REGION_IN = 1;
  static const int PIXMAN_REGION_PART = 2;
}

typedef pixman_region16_t = struct_pixman_region16;
typedef pixman_image_t = pixman_image;

class struct_pixman_rectangle32 extends ffi.Struct {
  @ffi.Int32()
  external int x;

  @ffi.Int32()
  external int y;

  @ffi.Uint32()
  external int width;

  @ffi.Uint32()
  external int height;
}

class struct_pixman_indexed extends ffi.Struct {
  @pixman_bool_t()
  external int color;

  @ffi.Array.multi([256])
  external ffi.Array<ffi.Uint32> rgba;

  @ffi.Array.multi([32768])
  external ffi.Array<pixman_index_type> ent;
}

typedef pixman_index_type = ffi.Uint8;

class struct_pixman_gradient_stop extends ffi.Struct {
  @pixman_fixed_t()
  external int x;

  external pixman_color_t color;
}

typedef pixman_color_t = struct_pixman_color;

abstract class enum_pixman_format_code_t {
  static const int PIXMAN_rgba_float = 281756740;
  static const int PIXMAN_rgb_float = 214631492;
  static const int PIXMAN_a8r8g8b8 = 537036936;
  static const int PIXMAN_x8r8g8b8 = 537004168;
  static const int PIXMAN_a8b8g8r8 = 537102472;
  static const int PIXMAN_x8b8g8r8 = 537069704;
  static const int PIXMAN_b8g8r8a8 = 537430152;
  static const int PIXMAN_b8g8r8x8 = 537397384;
  static const int PIXMAN_r8g8b8a8 = 537495688;
  static const int PIXMAN_r8g8b8x8 = 537462920;
  static const int PIXMAN_x14r6g6b6 = 537003622;
  static const int PIXMAN_x2r10g10b10 = 537004714;
  static const int PIXMAN_a2r10g10b10 = 537012906;
  static const int PIXMAN_x2b10g10r10 = 537070250;
  static const int PIXMAN_a2b10g10r10 = 537078442;
  static const int PIXMAN_a8r8g8b8_sRGB = 537561224;
  static const int PIXMAN_r8g8b8 = 402786440;
  static const int PIXMAN_b8g8r8 = 402851976;
  static const int PIXMAN_r5g6b5 = 268567909;
  static const int PIXMAN_b5g6r5 = 268633445;
  static const int PIXMAN_a1r5g5b5 = 268571989;
  static const int PIXMAN_x1r5g5b5 = 268567893;
  static const int PIXMAN_a1b5g5r5 = 268637525;
  static const int PIXMAN_x1b5g5r5 = 268633429;
  static const int PIXMAN_a4r4g4b4 = 268584004;
  static const int PIXMAN_x4r4g4b4 = 268567620;
  static const int PIXMAN_a4b4g4r4 = 268649540;
  static const int PIXMAN_x4b4g4r4 = 268633156;
  static const int PIXMAN_a8 = 134316032;
  static const int PIXMAN_r3g3b2 = 134349618;
  static const int PIXMAN_b2g3r3 = 134415154;
  static const int PIXMAN_a2r2g2b2 = 134357538;
  static const int PIXMAN_a2b2g2r2 = 134423074;
  static const int PIXMAN_c8 = 134479872;
  static const int PIXMAN_g8 = 134545408;
  static const int PIXMAN_x4a4 = 134299648;
  static const int PIXMAN_x4c4 = 134479872;
  static const int PIXMAN_x4g4 = 134545408;
  static const int PIXMAN_a4 = 67190784;
  static const int PIXMAN_r1g2b1 = 67240225;
  static const int PIXMAN_b1g2r1 = 67305761;
  static const int PIXMAN_a1r1g1b1 = 67244305;
  static const int PIXMAN_a1b1g1r1 = 67309841;
  static const int PIXMAN_c4 = 67371008;
  static const int PIXMAN_g4 = 67436544;
  static const int PIXMAN_a1 = 16846848;
  static const int PIXMAN_g1 = 17104896;
  static const int PIXMAN_yuy2 = 268828672;
  static const int PIXMAN_yv12 = 201785344;
}

typedef pixman_gradient_stop_t = struct_pixman_gradient_stop;
typedef pixman_image_destroy_func_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<pixman_image_t>, ffi.Pointer<ffi.Void>)>>;
typedef pixman_transform_t = struct_pixman_transform;
typedef pixman_read_memory_func_t = ffi.Pointer<
    ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<ffi.Void>, ffi.Int)>>;
typedef pixman_write_memory_func_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Uint32, ffi.Int)>>;
typedef pixman_indexed_t = struct_pixman_indexed;

abstract class enum_pixman_kernel_t {
  static const int PIXMAN_KERNEL_IMPULSE = 0;
  static const int PIXMAN_KERNEL_BOX = 1;
  static const int PIXMAN_KERNEL_LINEAR = 2;
  static const int PIXMAN_KERNEL_CUBIC = 3;
  static const int PIXMAN_KERNEL_GAUSSIAN = 4;
  static const int PIXMAN_KERNEL_LANCZOS2 = 5;
  static const int PIXMAN_KERNEL_LANCZOS3 = 6;
  static const int PIXMAN_KERNEL_LANCZOS3_STRETCHED = 7;
}

typedef pixman_rectangle16_t = struct_pixman_rectangle16;

class struct_pixman_glyph_cache_t extends ffi.Opaque {}

class struct_pixman_glyph_t extends ffi.Struct {
  @ffi.Int()
  external int x;

  @ffi.Int()
  external int y;

  external ffi.Pointer<ffi.Void> glyph;
}

class struct_pixman_edge extends ffi.Struct {
  @pixman_fixed_t()
  external int x;

  @pixman_fixed_t()
  external int e;

  @pixman_fixed_t()
  external int stepx;

  @pixman_fixed_t()
  external int signdx;

  @pixman_fixed_t()
  external int dy;

  @pixman_fixed_t()
  external int dx;

  @pixman_fixed_t()
  external int stepx_small;

  @pixman_fixed_t()
  external int stepx_big;

  @pixman_fixed_t()
  external int dx_small;

  @pixman_fixed_t()
  external int dx_big;
}

class struct_pixman_trapezoid extends ffi.Struct {
  @pixman_fixed_t()
  external int top;

  @pixman_fixed_t()
  external int bottom;

  external pixman_line_fixed_t left;

  external pixman_line_fixed_t right;
}

typedef pixman_line_fixed_t = struct_pixman_line_fixed;

class struct_pixman_trap extends ffi.Struct {
  external pixman_span_fix_t top;

  external pixman_span_fix_t bot;
}

typedef pixman_span_fix_t = struct_pixman_span_fix;

class struct_pixman_span_fix extends ffi.Struct {
  @pixman_fixed_t()
  external int l;

  @pixman_fixed_t()
  external int r;

  @pixman_fixed_t()
  external int y;
}

class struct_pixman_triangle extends ffi.Struct {
  external pixman_point_fixed_t p1;

  external pixman_point_fixed_t p2;

  external pixman_point_fixed_t p3;
}

typedef pixman_edge_t = struct_pixman_edge;
typedef pixman_trap_t = struct_pixman_trap;
typedef pixman_trapezoid_t = struct_pixman_trapezoid;
typedef pixman_triangle_t = struct_pixman_triangle;

class struct_tm extends ffi.Struct {
  @ffi.Int()
  external int tm_sec;

  @ffi.Int()
  external int tm_min;

  @ffi.Int()
  external int tm_hour;

  @ffi.Int()
  external int tm_mday;

  @ffi.Int()
  external int tm_mon;

  @ffi.Int()
  external int tm_year;

  @ffi.Int()
  external int tm_wday;

  @ffi.Int()
  external int tm_yday;

  @ffi.Int()
  external int tm_isdst;

  @ffi.Long()
  external int tm_gmtoff;

  external ffi.Pointer<ffi.Char> tm_zone;
}

class struct_itimerspec extends ffi.Struct {
  external struct_timespec it_interval;

  external struct_timespec it_value;
}

class struct_sigevent extends ffi.Opaque {}

class struct___locale_struct extends ffi.Struct {
  @ffi.Array.multi([13])
  external ffi.Array<ffi.Pointer<struct___locale_data>> __locales;

  external ffi.Pointer<ffi.UnsignedShort> __ctype_b;

  external ffi.Pointer<ffi.Int> __ctype_tolower;

  external ffi.Pointer<ffi.Int> __ctype_toupper;

  @ffi.Array.multi([13])
  external ffi.Array<ffi.Pointer<ffi.Char>> __names;
}

class struct___locale_data extends ffi.Opaque {}

typedef clock_t = __clock_t;
typedef __clock_t = ffi.Long;
typedef time_t = __time_t;
typedef locale_t = __locale_t;
typedef __locale_t = ffi.Pointer<struct___locale_struct>;
typedef timer_t = __timer_t;
typedef __timer_t = ffi.Pointer<ffi.Void>;

class struct_wlr_addon extends ffi.Struct {
  external ffi.Pointer<struct_wlr_addon_interface> impl;

  external ffi.Pointer<ffi.Void> owner;

  external struct_wl_list link;
}

class struct_wlr_addon_interface extends ffi.Struct {
  external ffi.Pointer<ffi.Char> name;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<struct_wlr_addon>)>>
      destroy;
}

abstract class enum_wlr_buffer_cap {
  static const int WLR_BUFFER_CAP_DATA_PTR = 1;
  static const int WLR_BUFFER_CAP_DMABUF = 2;
  static const int WLR_BUFFER_CAP_SHM = 4;
}

class struct_wlr_buffer_resource_interface extends ffi.Struct {
  external ffi.Pointer<ffi.Char> name;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<struct_wl_resource>)>> is_instance;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<struct_wlr_buffer> Function(
              ffi.Pointer<struct_wl_resource>)>> from_resource;
}

abstract class enum_wlr_buffer_data_ptr_access_flag {
  static const int WLR_BUFFER_DATA_PTR_ACCESS_READ = 1;
  static const int WLR_BUFFER_DATA_PTR_ACCESS_WRITE = 2;
}

class struct_wlr_output_mode extends ffi.Struct {
  @ffi.Int32()
  external int width;

  @ffi.Int32()
  external int height;

  @ffi.Int32()
  external int refresh;

  @ffi.Bool()
  external bool preferred;

  external struct_wl_list link;
}

class struct_wlr_output_cursor extends ffi.Struct {
  external ffi.Pointer<struct_wlr_output> output;

  @ffi.Double()
  external double x;

  @ffi.Double()
  external double y;

  @ffi.Bool()
  external bool enabled;

  @ffi.Bool()
  external bool visible;

  @ffi.Uint32()
  external int width;

  @ffi.Uint32()
  external int height;

  @ffi.Int32()
  external int hotspot_x;

  @ffi.Int32()
  external int hotspot_y;

  external struct_wl_list link;

  external ffi.Pointer<struct_wlr_texture> texture;

  external ffi.Pointer<struct_wlr_surface> surface;

  external struct_wl_listener surface_commit;

  external struct_wl_listener surface_destroy;

  external UnnamedStruct19 events;
}

class struct_wlr_output extends ffi.Struct {
  external ffi.Pointer<struct_wlr_output_impl> impl;

  external ffi.Pointer<struct_wlr_backend> backend;

  external ffi.Pointer<struct_wl_display> display;

  external ffi.Pointer<struct_wl_global> global;

  external struct_wl_list resources;

  external ffi.Pointer<ffi.Char> name;

  external ffi.Pointer<ffi.Char> description;

  @ffi.Array.multi([56])
  external ffi.Array<ffi.Char> make;

  @ffi.Array.multi([16])
  external ffi.Array<ffi.Char> model;

  @ffi.Array.multi([16])
  external ffi.Array<ffi.Char> serial;

  @ffi.Int32()
  external int phys_width;

  @ffi.Int32()
  external int phys_height;

  external struct_wl_list modes;

  external ffi.Pointer<struct_wlr_output_mode> current_mode;

  @ffi.Int32()
  external int width;

  @ffi.Int32()
  external int height;

  @ffi.Int32()
  external int refresh;

  @ffi.Bool()
  external bool enabled;

  @ffi.Float()
  external double scale;

  @ffi.Int32()
  external int subpixel;

  @ffi.Int32()
  external int transform;

  @ffi.Int32()
  external int adaptive_sync_status;

  @ffi.Uint32()
  external int render_format;

  @ffi.Bool()
  external bool needs_frame;

  @ffi.Bool()
  external bool frame_pending;

  @ffi.Array.multi([9])
  external ffi.Array<ffi.Float> transform_matrix;

  @ffi.Bool()
  external bool non_desktop;

  external struct_wlr_output_state pending;

  @ffi.Uint32()
  external int commit_seq;

  external UnnamedStruct18 events;

  external ffi.Pointer<struct_wl_event_source> idle_frame;

  external ffi.Pointer<struct_wl_event_source> idle_done;

  @ffi.Int()
  external int attach_render_locks;

  external struct_wl_list cursors;

  external ffi.Pointer<struct_wlr_output_cursor> hardware_cursor;

  external ffi.Pointer<struct_wlr_swapchain> cursor_swapchain;

  external ffi.Pointer<struct_wlr_buffer> cursor_front_buffer;

  @ffi.Int()
  external int software_cursor_locks;

  external ffi.Pointer<struct_wlr_allocator> allocator;

  external ffi.Pointer<struct_wlr_renderer> renderer;

  external ffi.Pointer<struct_wlr_swapchain> swapchain;

  external ffi.Pointer<struct_wlr_buffer> back_buffer;

  external struct_wl_listener display_destroy;

  external struct_wlr_addon_set addons;

  external ffi.Pointer<ffi.Void> data;
}

class struct_wlr_output_impl extends ffi.Opaque {}

abstract class enum_wlr_output_adaptive_sync_status {
  static const int WLR_OUTPUT_ADAPTIVE_SYNC_DISABLED = 0;
  static const int WLR_OUTPUT_ADAPTIVE_SYNC_ENABLED = 1;
  static const int WLR_OUTPUT_ADAPTIVE_SYNC_UNKNOWN = 2;
}

class struct_wlr_output_state extends ffi.Struct {
  @ffi.Uint32()
  external int committed;

  external pixman_region32_t damage;

  @ffi.Bool()
  external bool enabled;

  @ffi.Float()
  external double scale;

  @ffi.Int32()
  external int transform;

  @ffi.Bool()
  external bool adaptive_sync_enabled;

  @ffi.Uint32()
  external int render_format;

  external ffi.Pointer<struct_wlr_buffer> buffer;

  @ffi.Int32()
  external int mode_type;

  external ffi.Pointer<struct_wlr_output_mode> mode;

  external UnnamedStruct17 custom_mode;

  external ffi.Pointer<ffi.Uint16> gamma_lut;

  @ffi.Size()
  external int gamma_lut_size;
}

abstract class enum_wlr_output_state_mode_type {
  static const int WLR_OUTPUT_STATE_MODE_FIXED = 0;
  static const int WLR_OUTPUT_STATE_MODE_CUSTOM = 1;
}

class UnnamedStruct17 extends ffi.Struct {
  @ffi.Int32()
  external int width;

  @ffi.Int32()
  external int height;

  @ffi.Int32()
  external int refresh;
}

class UnnamedStruct18 extends ffi.Struct {
  external struct_wl_signal frame;

  external struct_wl_signal damage;

  external struct_wl_signal needs_frame;

  external struct_wl_signal precommit;

  external struct_wl_signal commit;

  external struct_wl_signal present;

  external struct_wl_signal bind;

  external struct_wl_signal enable;

  external struct_wl_signal mode;

  external struct_wl_signal description;

  external struct_wl_signal destroy;
}

class struct_wlr_swapchain extends ffi.Opaque {}

class UnnamedStruct19 extends ffi.Struct {
  external struct_wl_signal destroy;
}

abstract class enum_wlr_output_state_field {
  static const int WLR_OUTPUT_STATE_BUFFER = 1;
  static const int WLR_OUTPUT_STATE_DAMAGE = 2;
  static const int WLR_OUTPUT_STATE_MODE = 4;
  static const int WLR_OUTPUT_STATE_ENABLED = 8;
  static const int WLR_OUTPUT_STATE_SCALE = 16;
  static const int WLR_OUTPUT_STATE_TRANSFORM = 32;
  static const int WLR_OUTPUT_STATE_ADAPTIVE_SYNC_ENABLED = 64;
  static const int WLR_OUTPUT_STATE_GAMMA_LUT = 128;
  static const int WLR_OUTPUT_STATE_RENDER_FORMAT = 256;
}

class struct_wlr_output_event_damage extends ffi.Struct {
  external ffi.Pointer<struct_wlr_output> output;

  external ffi.Pointer<pixman_region32_t> damage;
}

class struct_wlr_output_event_precommit extends ffi.Struct {
  external ffi.Pointer<struct_wlr_output> output;

  external ffi.Pointer<struct_timespec> when;
}

class struct_wlr_output_event_commit extends ffi.Struct {
  external ffi.Pointer<struct_wlr_output> output;

  @ffi.Uint32()
  external int committed;

  external ffi.Pointer<struct_timespec> when;

  external ffi.Pointer<struct_wlr_buffer> buffer;
}

abstract class enum_wlr_output_present_flag {
  static const int WLR_OUTPUT_PRESENT_VSYNC = 1;
  static const int WLR_OUTPUT_PRESENT_HW_CLOCK = 2;
  static const int WLR_OUTPUT_PRESENT_HW_COMPLETION = 4;
  static const int WLR_OUTPUT_PRESENT_ZERO_COPY = 8;
}

class struct_wlr_output_event_present extends ffi.Struct {
  external ffi.Pointer<struct_wlr_output> output;

  @ffi.Uint32()
  external int commit_seq;

  @ffi.Bool()
  external bool presented;

  external ffi.Pointer<struct_timespec> when;

  @ffi.UnsignedInt()
  external int seq;

  @ffi.Int()
  external int refresh;

  @ffi.Uint32()
  external int flags;
}

class struct_wlr_output_event_bind extends ffi.Struct {
  external ffi.Pointer<struct_wlr_output> output;

  external ffi.Pointer<struct_wl_resource> resource;
}

class struct_wlr_output_damage extends ffi.Struct {
  external ffi.Pointer<struct_wlr_output> output;

  @ffi.Int()
  external int max_rects;

  external pixman_region32_t current;

  @ffi.Array.multi([2])
  external ffi.Array<pixman_region32_t> previous;

  @ffi.Size()
  external int previous_idx;

  @ffi.Bool()
  external bool pending_attach_render;

  external UnnamedStruct20 events;

  external struct_wl_listener output_destroy;

  external struct_wl_listener output_mode;

  external struct_wl_listener output_needs_frame;

  external struct_wl_listener output_damage;

  external struct_wl_listener output_frame;

  external struct_wl_listener output_precommit;

  external struct_wl_listener output_commit;
}

class UnnamedStruct20 extends ffi.Struct {
  external struct_wl_signal frame;

  external struct_wl_signal destroy;
}

class struct_wlr_event_pointer_motion extends ffi.Struct {
  external ffi.Pointer<struct_wlr_input_device> device;

  @ffi.Uint32()
  external int time_msec;

  @ffi.Double()
  external double delta_x;

  @ffi.Double()
  external double delta_y;

  @ffi.Double()
  external double unaccel_dx;

  @ffi.Double()
  external double unaccel_dy;
}

class struct_wlr_event_pointer_motion_absolute extends ffi.Struct {
  external ffi.Pointer<struct_wlr_input_device> device;

  @ffi.Uint32()
  external int time_msec;

  @ffi.Double()
  external double x;

  @ffi.Double()
  external double y;
}

class struct_wlr_event_pointer_button extends ffi.Struct {
  external ffi.Pointer<struct_wlr_input_device> device;

  @ffi.Uint32()
  external int time_msec;

  @ffi.Uint32()
  external int button;

  @ffi.Int32()
  external int state;
}

abstract class enum_wlr_axis_source {
  static const int WLR_AXIS_SOURCE_WHEEL = 0;
  static const int WLR_AXIS_SOURCE_FINGER = 1;
  static const int WLR_AXIS_SOURCE_CONTINUOUS = 2;
  static const int WLR_AXIS_SOURCE_WHEEL_TILT = 3;
}

abstract class enum_wlr_axis_orientation {
  static const int WLR_AXIS_ORIENTATION_VERTICAL = 0;
  static const int WLR_AXIS_ORIENTATION_HORIZONTAL = 1;
}

class struct_wlr_event_pointer_axis extends ffi.Struct {
  external ffi.Pointer<struct_wlr_input_device> device;

  @ffi.Uint32()
  external int time_msec;

  @ffi.Int32()
  external int source;

  @ffi.Int32()
  external int orientation;

  @ffi.Double()
  external double delta;

  @ffi.Int32()
  external int delta_discrete;
}

class struct_wlr_event_pointer_swipe_begin extends ffi.Struct {
  external ffi.Pointer<struct_wlr_input_device> device;

  @ffi.Uint32()
  external int time_msec;

  @ffi.Uint32()
  external int fingers;
}

class struct_wlr_event_pointer_swipe_update extends ffi.Struct {
  external ffi.Pointer<struct_wlr_input_device> device;

  @ffi.Uint32()
  external int time_msec;

  @ffi.Uint32()
  external int fingers;

  @ffi.Double()
  external double dx;

  @ffi.Double()
  external double dy;
}

class struct_wlr_event_pointer_swipe_end extends ffi.Struct {
  external ffi.Pointer<struct_wlr_input_device> device;

  @ffi.Uint32()
  external int time_msec;

  @ffi.Bool()
  external bool cancelled;
}

class struct_wlr_event_pointer_pinch_begin extends ffi.Struct {
  external ffi.Pointer<struct_wlr_input_device> device;

  @ffi.Uint32()
  external int time_msec;

  @ffi.Uint32()
  external int fingers;
}

class struct_wlr_event_pointer_pinch_update extends ffi.Struct {
  external ffi.Pointer<struct_wlr_input_device> device;

  @ffi.Uint32()
  external int time_msec;

  @ffi.Uint32()
  external int fingers;

  @ffi.Double()
  external double dx;

  @ffi.Double()
  external double dy;

  @ffi.Double()
  external double scale;

  @ffi.Double()
  external double rotation;
}

class struct_wlr_event_pointer_pinch_end extends ffi.Struct {
  external ffi.Pointer<struct_wlr_input_device> device;

  @ffi.Uint32()
  external int time_msec;

  @ffi.Bool()
  external bool cancelled;
}

class struct_wlr_event_pointer_hold_begin extends ffi.Struct {
  external ffi.Pointer<struct_wlr_input_device> device;

  @ffi.Uint32()
  external int time_msec;

  @ffi.Uint32()
  external int fingers;
}

class struct_wlr_event_pointer_hold_end extends ffi.Struct {
  external ffi.Pointer<struct_wlr_input_device> device;

  @ffi.Uint32()
  external int time_msec;

  @ffi.Bool()
  external bool cancelled;
}

abstract class enum_wlr_surface_state_field {
  static const int WLR_SURFACE_STATE_BUFFER = 1;
  static const int WLR_SURFACE_STATE_SURFACE_DAMAGE = 2;
  static const int WLR_SURFACE_STATE_BUFFER_DAMAGE = 4;
  static const int WLR_SURFACE_STATE_OPAQUE_REGION = 8;
  static const int WLR_SURFACE_STATE_INPUT_REGION = 16;
  static const int WLR_SURFACE_STATE_TRANSFORM = 32;
  static const int WLR_SURFACE_STATE_SCALE = 64;
  static const int WLR_SURFACE_STATE_FRAME_CALLBACK_LIST = 128;
  static const int WLR_SURFACE_STATE_VIEWPORT = 256;
}

class struct_wlr_surface_output extends ffi.Struct {
  external ffi.Pointer<struct_wlr_surface> surface;

  external ffi.Pointer<struct_wlr_output> output;

  external struct_wl_list link;

  external struct_wl_listener bind;

  external struct_wl_listener destroy;
}

typedef wlr_surface_iterator_func_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<struct_wlr_surface>, ffi.Int, ffi.Int,
            ffi.Pointer<ffi.Void>)>>;

class struct_wlr_serial_range extends ffi.Struct {
  @ffi.Uint32()
  external int min_incl;

  @ffi.Uint32()
  external int max_incl;
}

class struct_wlr_serial_ringset extends ffi.Struct {
  @ffi.Array.multi([128])
  external ffi.Array<struct_wlr_serial_range> data;

  @ffi.Int()
  external int end;

  @ffi.Int()
  external int count;
}

class struct_wlr_seat_client extends ffi.Struct {
  external ffi.Pointer<struct_wl_client> client;

  external ffi.Pointer<struct_wlr_seat> seat;

  external struct_wl_list link;

  external struct_wl_list resources;

  external struct_wl_list pointers;

  external struct_wl_list keyboards;

  external struct_wl_list touches;

  external struct_wl_list data_devices;

  external UnnamedStruct25 events;

  external struct_wlr_serial_ringset serials;

  @ffi.Bool()
  external bool needs_touch_frame;
}

class struct_wlr_seat extends ffi.Struct {
  external ffi.Pointer<struct_wl_global> global;

  external ffi.Pointer<struct_wl_display> display;

  external struct_wl_list clients;

  external ffi.Pointer<ffi.Char> name;

  @ffi.Uint32()
  external int capabilities;

  @ffi.Uint32()
  external int accumulated_capabilities;

  external struct_timespec last_event;

  external ffi.Pointer<struct_wlr_data_source> selection_source;

  @ffi.Uint32()
  external int selection_serial;

  external struct_wl_list selection_offers;

  external ffi.Pointer<struct_wlr_primary_selection_source>
      primary_selection_source;

  @ffi.Uint32()
  external int primary_selection_serial;

  external ffi.Pointer<struct_wlr_drag> drag;

  external ffi.Pointer<struct_wlr_data_source> drag_source;

  @ffi.Uint32()
  external int drag_serial;

  external struct_wl_list drag_offers;

  external struct_wlr_seat_pointer_state pointer_state;

  external struct_wlr_seat_keyboard_state keyboard_state;

  external struct_wlr_seat_touch_state touch_state;

  external struct_wl_listener display_destroy;

  external struct_wl_listener selection_source_destroy;

  external struct_wl_listener primary_selection_source_destroy;

  external struct_wl_listener drag_source_destroy;

  external UnnamedStruct24 events;

  external ffi.Pointer<ffi.Void> data;
}

class struct_wlr_data_source extends ffi.Opaque {}

class struct_wlr_primary_selection_source extends ffi.Opaque {}

class struct_wlr_drag extends ffi.Opaque {}

class struct_wlr_seat_pointer_state extends ffi.Struct {
  external ffi.Pointer<struct_wlr_seat> seat;

  external ffi.Pointer<struct_wlr_seat_client> focused_client;

  external ffi.Pointer<struct_wlr_surface> focused_surface;

  @ffi.Double()
  external double sx;

  @ffi.Double()
  external double sy;

  external ffi.Pointer<struct_wlr_seat_pointer_grab> grab;

  external ffi.Pointer<struct_wlr_seat_pointer_grab> default_grab;

  @ffi.Bool()
  external bool sent_axis_source;

  @ffi.Int32()
  external int cached_axis_source;

  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint32> buttons;

  @ffi.Size()
  external int button_count;

  @ffi.Uint32()
  external int grab_button;

  @ffi.Uint32()
  external int grab_serial;

  @ffi.Uint32()
  external int grab_time;

  external struct_wl_listener surface_destroy;

  external UnnamedStruct21 events;
}

class struct_wlr_seat_pointer_grab extends ffi.Struct {
  external ffi.Pointer<struct_wlr_pointer_grab_interface> interface1;

  external ffi.Pointer<struct_wlr_seat> seat;

  external ffi.Pointer<ffi.Void> data;
}

class struct_wlr_pointer_grab_interface extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wlr_seat_pointer_grab>,
              ffi.Pointer<struct_wlr_surface>, ffi.Double, ffi.Double)>> enter;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<struct_wlr_seat_pointer_grab>)>>
      clear_focus;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wlr_seat_pointer_grab>,
              ffi.Uint32, ffi.Double, ffi.Double)>> motion;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Uint32 Function(ffi.Pointer<struct_wlr_seat_pointer_grab>,
              ffi.Uint32, ffi.Uint32, ffi.Int32)>> button;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wlr_seat_pointer_grab>,
              ffi.Uint32, ffi.Int32, ffi.Double, ffi.Int32, ffi.Int32)>> axis;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wlr_seat_pointer_grab>)>> frame;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wlr_seat_pointer_grab>)>> cancel;
}

class UnnamedStruct21 extends ffi.Struct {
  external struct_wl_signal focus_change;
}

class struct_wlr_seat_keyboard_state extends ffi.Struct {
  external ffi.Pointer<struct_wlr_seat> seat;

  external ffi.Pointer<struct_wlr_keyboard> keyboard;

  external ffi.Pointer<struct_wlr_seat_client> focused_client;

  external ffi.Pointer<struct_wlr_surface> focused_surface;

  external struct_wl_listener keyboard_destroy;

  external struct_wl_listener keyboard_keymap;

  external struct_wl_listener keyboard_repeat_info;

  external struct_wl_listener surface_destroy;

  external ffi.Pointer<struct_wlr_seat_keyboard_grab> grab;

  external ffi.Pointer<struct_wlr_seat_keyboard_grab> default_grab;

  external UnnamedStruct22 events;
}

class struct_wlr_seat_keyboard_grab extends ffi.Struct {
  external ffi.Pointer<struct_wlr_keyboard_grab_interface> interface1;

  external ffi.Pointer<struct_wlr_seat> seat;

  external ffi.Pointer<ffi.Void> data;
}

class struct_wlr_keyboard_grab_interface extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wlr_seat_keyboard_grab>,
              ffi.Pointer<struct_wlr_surface>,
              ffi.Pointer<ffi.Uint32>,
              ffi.Size,
              ffi.Pointer<struct_wlr_keyboard_modifiers>)>> enter;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<struct_wlr_seat_keyboard_grab>)>>
      clear_focus;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wlr_seat_keyboard_grab>,
              ffi.Uint32, ffi.Uint32, ffi.Uint32)>> key;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wlr_seat_keyboard_grab>,
              ffi.Pointer<struct_wlr_keyboard_modifiers>)>> modifiers;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<struct_wlr_seat_keyboard_grab>)>>
      cancel;
}

class UnnamedStruct22 extends ffi.Struct {
  external struct_wl_signal focus_change;
}

class struct_wlr_seat_touch_state extends ffi.Struct {
  external ffi.Pointer<struct_wlr_seat> seat;

  external struct_wl_list touch_points;

  @ffi.Uint32()
  external int grab_serial;

  @ffi.Uint32()
  external int grab_id;

  external ffi.Pointer<struct_wlr_seat_touch_grab> grab;

  external ffi.Pointer<struct_wlr_seat_touch_grab> default_grab;
}

class struct_wlr_seat_touch_grab extends ffi.Struct {
  external ffi.Pointer<struct_wlr_touch_grab_interface> interface1;

  external ffi.Pointer<struct_wlr_seat> seat;

  external ffi.Pointer<ffi.Void> data;
}

class struct_wlr_touch_grab_interface extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Uint32 Function(ffi.Pointer<struct_wlr_seat_touch_grab>,
              ffi.Uint32, ffi.Pointer<struct_wlr_touch_point>)>> down;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wlr_seat_touch_grab>, ffi.Uint32,
              ffi.Pointer<struct_wlr_touch_point>)>> up;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wlr_seat_touch_grab>, ffi.Uint32,
              ffi.Pointer<struct_wlr_touch_point>)>> motion;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wlr_seat_touch_grab>, ffi.Uint32,
              ffi.Pointer<struct_wlr_touch_point>)>> enter;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wlr_seat_touch_grab>)>> frame;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wlr_seat_touch_grab>)>> cancel;
}

class struct_wlr_touch_point extends ffi.Struct {
  @ffi.Int32()
  external int touch_id;

  external ffi.Pointer<struct_wlr_surface> surface;

  external ffi.Pointer<struct_wlr_seat_client> client;

  external ffi.Pointer<struct_wlr_surface> focus_surface;

  external ffi.Pointer<struct_wlr_seat_client> focus_client;

  @ffi.Double()
  external double sx;

  @ffi.Double()
  external double sy;

  external struct_wl_listener surface_destroy;

  external struct_wl_listener focus_surface_destroy;

  external struct_wl_listener client_destroy;

  external UnnamedStruct23 events;

  external struct_wl_list link;
}

class UnnamedStruct23 extends ffi.Struct {
  external struct_wl_signal destroy;
}

class UnnamedStruct24 extends ffi.Struct {
  external struct_wl_signal pointer_grab_begin;

  external struct_wl_signal pointer_grab_end;

  external struct_wl_signal keyboard_grab_begin;

  external struct_wl_signal keyboard_grab_end;

  external struct_wl_signal touch_grab_begin;

  external struct_wl_signal touch_grab_end;

  external struct_wl_signal request_set_cursor;

  external struct_wl_signal request_set_selection;

  external struct_wl_signal set_selection;

  external struct_wl_signal request_set_primary_selection;

  external struct_wl_signal set_primary_selection;

  external struct_wl_signal request_start_drag;

  external struct_wl_signal start_drag;

  external struct_wl_signal destroy;
}

class UnnamedStruct25 extends ffi.Struct {
  external struct_wl_signal destroy;
}

class struct_wlr_seat_pointer_request_set_cursor_event extends ffi.Struct {
  external ffi.Pointer<struct_wlr_seat_client> seat_client;

  external ffi.Pointer<struct_wlr_surface> surface;

  @ffi.Uint32()
  external int serial;

  @ffi.Int32()
  external int hotspot_x;

  @ffi.Int32()
  external int hotspot_y;
}

class struct_wlr_seat_request_set_selection_event extends ffi.Struct {
  external ffi.Pointer<struct_wlr_data_source> source;

  @ffi.Uint32()
  external int serial;
}

class struct_wlr_seat_request_set_primary_selection_event extends ffi.Struct {
  external ffi.Pointer<struct_wlr_primary_selection_source> source;

  @ffi.Uint32()
  external int serial;
}

class struct_wlr_seat_request_start_drag_event extends ffi.Struct {
  external ffi.Pointer<struct_wlr_drag> drag;

  external ffi.Pointer<struct_wlr_surface> origin;

  @ffi.Uint32()
  external int serial;
}

class struct_wlr_seat_pointer_focus_change_event extends ffi.Struct {
  external ffi.Pointer<struct_wlr_seat> seat;

  external ffi.Pointer<struct_wlr_surface> old_surface;

  external ffi.Pointer<struct_wlr_surface> new_surface;

  @ffi.Double()
  external double sx;

  @ffi.Double()
  external double sy;
}

class struct_wlr_seat_keyboard_focus_change_event extends ffi.Struct {
  external ffi.Pointer<struct_wlr_seat> seat;

  external ffi.Pointer<struct_wlr_surface> old_surface;

  external ffi.Pointer<struct_wlr_surface> new_surface;
}

class struct_xdg_popup extends ffi.Opaque {}

class struct_xdg_positioner extends ffi.Opaque {}

class struct_xdg_surface extends ffi.Opaque {}

class struct_xdg_toplevel extends ffi.Opaque {}

class struct_xdg_wm_base extends ffi.Opaque {}

abstract class enum_xdg_wm_base_error {
  static const int XDG_WM_BASE_ERROR_ROLE = 0;
  static const int XDG_WM_BASE_ERROR_DEFUNCT_SURFACES = 1;
  static const int XDG_WM_BASE_ERROR_NOT_THE_TOPMOST_POPUP = 2;
  static const int XDG_WM_BASE_ERROR_INVALID_POPUP_PARENT = 3;
  static const int XDG_WM_BASE_ERROR_INVALID_SURFACE_STATE = 4;
  static const int XDG_WM_BASE_ERROR_INVALID_POSITIONER = 5;
}

class struct_xdg_wm_base_interface extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wl_client>,
              ffi.Pointer<struct_wl_resource>)>> destroy;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wl_client>,
              ffi.Pointer<struct_wl_resource>, ffi.Uint32)>> create_positioner;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wl_client>,
              ffi.Pointer<struct_wl_resource>,
              ffi.Uint32,
              ffi.Pointer<struct_wl_resource>)>> get_xdg_surface;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wl_client>,
              ffi.Pointer<struct_wl_resource>, ffi.Uint32)>> pong;
}

abstract class enum_xdg_positioner_error {
  static const int XDG_POSITIONER_ERROR_INVALID_INPUT = 0;
}

abstract class enum_xdg_positioner_anchor {
  static const int XDG_POSITIONER_ANCHOR_NONE = 0;
  static const int XDG_POSITIONER_ANCHOR_TOP = 1;
  static const int XDG_POSITIONER_ANCHOR_BOTTOM = 2;
  static const int XDG_POSITIONER_ANCHOR_LEFT = 3;
  static const int XDG_POSITIONER_ANCHOR_RIGHT = 4;
  static const int XDG_POSITIONER_ANCHOR_TOP_LEFT = 5;
  static const int XDG_POSITIONER_ANCHOR_BOTTOM_LEFT = 6;
  static const int XDG_POSITIONER_ANCHOR_TOP_RIGHT = 7;
  static const int XDG_POSITIONER_ANCHOR_BOTTOM_RIGHT = 8;
}

abstract class enum_xdg_positioner_gravity {
  static const int XDG_POSITIONER_GRAVITY_NONE = 0;
  static const int XDG_POSITIONER_GRAVITY_TOP = 1;
  static const int XDG_POSITIONER_GRAVITY_BOTTOM = 2;
  static const int XDG_POSITIONER_GRAVITY_LEFT = 3;
  static const int XDG_POSITIONER_GRAVITY_RIGHT = 4;
  static const int XDG_POSITIONER_GRAVITY_TOP_LEFT = 5;
  static const int XDG_POSITIONER_GRAVITY_BOTTOM_LEFT = 6;
  static const int XDG_POSITIONER_GRAVITY_TOP_RIGHT = 7;
  static const int XDG_POSITIONER_GRAVITY_BOTTOM_RIGHT = 8;
}

abstract class enum_xdg_positioner_constraint_adjustment {
  static const int XDG_POSITIONER_CONSTRAINT_ADJUSTMENT_NONE = 0;
  static const int XDG_POSITIONER_CONSTRAINT_ADJUSTMENT_SLIDE_X = 1;
  static const int XDG_POSITIONER_CONSTRAINT_ADJUSTMENT_SLIDE_Y = 2;
  static const int XDG_POSITIONER_CONSTRAINT_ADJUSTMENT_FLIP_X = 4;
  static const int XDG_POSITIONER_CONSTRAINT_ADJUSTMENT_FLIP_Y = 8;
  static const int XDG_POSITIONER_CONSTRAINT_ADJUSTMENT_RESIZE_X = 16;
  static const int XDG_POSITIONER_CONSTRAINT_ADJUSTMENT_RESIZE_Y = 32;
}

class struct_xdg_positioner_interface extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wl_client>,
              ffi.Pointer<struct_wl_resource>)>> destroy;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wl_client>,
              ffi.Pointer<struct_wl_resource>, ffi.Int32, ffi.Int32)>> set_size;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wl_client>,
              ffi.Pointer<struct_wl_resource>,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32)>> set_anchor_rect;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wl_client>,
              ffi.Pointer<struct_wl_resource>, ffi.Uint32)>> set_anchor;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wl_client>,
              ffi.Pointer<struct_wl_resource>, ffi.Uint32)>> set_gravity;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wl_client>,
              ffi.Pointer<struct_wl_resource>,
              ffi.Uint32)>> set_constraint_adjustment;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wl_client>,
              ffi.Pointer<struct_wl_resource>,
              ffi.Int32,
              ffi.Int32)>> set_offset;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wl_client>,
              ffi.Pointer<struct_wl_resource>)>> set_reactive;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wl_client>,
              ffi.Pointer<struct_wl_resource>,
              ffi.Int32,
              ffi.Int32)>> set_parent_size;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wl_client>,
              ffi.Pointer<struct_wl_resource>,
              ffi.Uint32)>> set_parent_configure;
}

abstract class enum_xdg_surface_error {
  static const int XDG_SURFACE_ERROR_NOT_CONSTRUCTED = 1;
  static const int XDG_SURFACE_ERROR_ALREADY_CONSTRUCTED = 2;
  static const int XDG_SURFACE_ERROR_UNCONFIGURED_BUFFER = 3;
  static const int XDG_SURFACE_ERROR_INVALID_SERIAL = 4;
}

class struct_xdg_surface_interface extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wl_client>,
              ffi.Pointer<struct_wl_resource>)>> destroy;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wl_client>,
              ffi.Pointer<struct_wl_resource>, ffi.Uint32)>> get_toplevel;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wl_client>,
              ffi.Pointer<struct_wl_resource>,
              ffi.Uint32,
              ffi.Pointer<struct_wl_resource>,
              ffi.Pointer<struct_wl_resource>)>> get_popup;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wl_client>,
              ffi.Pointer<struct_wl_resource>,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32)>> set_window_geometry;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wl_client>,
              ffi.Pointer<struct_wl_resource>, ffi.Uint32)>> ack_configure;
}

abstract class enum_xdg_toplevel_error {
  static const int XDG_TOPLEVEL_ERROR_INVALID_RESIZE_EDGE = 0;
  static const int XDG_TOPLEVEL_ERROR_INVALID_PARENT = 1;
}

abstract class enum_xdg_toplevel_resize_edge {
  static const int XDG_TOPLEVEL_RESIZE_EDGE_NONE = 0;
  static const int XDG_TOPLEVEL_RESIZE_EDGE_TOP = 1;
  static const int XDG_TOPLEVEL_RESIZE_EDGE_BOTTOM = 2;
  static const int XDG_TOPLEVEL_RESIZE_EDGE_LEFT = 4;
  static const int XDG_TOPLEVEL_RESIZE_EDGE_TOP_LEFT = 5;
  static const int XDG_TOPLEVEL_RESIZE_EDGE_BOTTOM_LEFT = 6;
  static const int XDG_TOPLEVEL_RESIZE_EDGE_RIGHT = 8;
  static const int XDG_TOPLEVEL_RESIZE_EDGE_TOP_RIGHT = 9;
  static const int XDG_TOPLEVEL_RESIZE_EDGE_BOTTOM_RIGHT = 10;
}

abstract class enum_xdg_toplevel_state {
  static const int XDG_TOPLEVEL_STATE_MAXIMIZED = 1;
  static const int XDG_TOPLEVEL_STATE_FULLSCREEN = 2;
  static const int XDG_TOPLEVEL_STATE_RESIZING = 3;
  static const int XDG_TOPLEVEL_STATE_ACTIVATED = 4;
  static const int XDG_TOPLEVEL_STATE_TILED_LEFT = 5;
  static const int XDG_TOPLEVEL_STATE_TILED_RIGHT = 6;
  static const int XDG_TOPLEVEL_STATE_TILED_TOP = 7;
  static const int XDG_TOPLEVEL_STATE_TILED_BOTTOM = 8;
}

abstract class enum_xdg_toplevel_wm_capabilities {
  static const int XDG_TOPLEVEL_WM_CAPABILITIES_WINDOW_MENU = 1;
  static const int XDG_TOPLEVEL_WM_CAPABILITIES_MAXIMIZE = 2;
  static const int XDG_TOPLEVEL_WM_CAPABILITIES_FULLSCREEN = 3;
  static const int XDG_TOPLEVEL_WM_CAPABILITIES_MINIMIZE = 4;
}

class struct_xdg_toplevel_interface extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wl_client>,
              ffi.Pointer<struct_wl_resource>)>> destroy;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wl_client>,
              ffi.Pointer<struct_wl_resource>,
              ffi.Pointer<struct_wl_resource>)>> set_parent;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wl_client>,
              ffi.Pointer<struct_wl_resource>,
              ffi.Pointer<ffi.Char>)>> set_title;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wl_client>,
              ffi.Pointer<struct_wl_resource>,
              ffi.Pointer<ffi.Char>)>> set_app_id;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wl_client>,
              ffi.Pointer<struct_wl_resource>,
              ffi.Pointer<struct_wl_resource>,
              ffi.Uint32,
              ffi.Int32,
              ffi.Int32)>> show_window_menu;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wl_client>,
              ffi.Pointer<struct_wl_resource>,
              ffi.Pointer<struct_wl_resource>,
              ffi.Uint32)>> move;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wl_client>,
              ffi.Pointer<struct_wl_resource>,
              ffi.Pointer<struct_wl_resource>,
              ffi.Uint32,
              ffi.Uint32)>> resize;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wl_client>,
              ffi.Pointer<struct_wl_resource>,
              ffi.Int32,
              ffi.Int32)>> set_max_size;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wl_client>,
              ffi.Pointer<struct_wl_resource>,
              ffi.Int32,
              ffi.Int32)>> set_min_size;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wl_client>,
              ffi.Pointer<struct_wl_resource>)>> set_maximized;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wl_client>,
              ffi.Pointer<struct_wl_resource>)>> unset_maximized;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wl_client>,
              ffi.Pointer<struct_wl_resource>,
              ffi.Pointer<struct_wl_resource>)>> set_fullscreen;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wl_client>,
              ffi.Pointer<struct_wl_resource>)>> unset_fullscreen;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wl_client>,
              ffi.Pointer<struct_wl_resource>)>> set_minimized;
}

abstract class enum_xdg_popup_error {
  static const int XDG_POPUP_ERROR_INVALID_GRAB = 0;
}

class struct_xdg_popup_interface extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wl_client>,
              ffi.Pointer<struct_wl_resource>)>> destroy;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wl_client>,
              ffi.Pointer<struct_wl_resource>,
              ffi.Pointer<struct_wl_resource>,
              ffi.Uint32)>> grab;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wl_client>,
              ffi.Pointer<struct_wl_resource>,
              ffi.Pointer<struct_wl_resource>,
              ffi.Uint32)>> reposition;
}

class struct_wlr_xdg_shell extends ffi.Struct {
  external ffi.Pointer<struct_wl_global> global;

  external struct_wl_list clients;

  external struct_wl_list popup_grabs;

  @ffi.Uint32()
  external int ping_timeout;

  external struct_wl_listener display_destroy;

  external UnnamedStruct26 events;

  external ffi.Pointer<ffi.Void> data;
}

class UnnamedStruct26 extends ffi.Struct {
  external struct_wl_signal new_surface;

  external struct_wl_signal destroy;
}

class struct_wlr_xdg_client extends ffi.Struct {
  external ffi.Pointer<struct_wlr_xdg_shell> shell;

  external ffi.Pointer<struct_wl_resource> resource;

  external ffi.Pointer<struct_wl_client> client;

  external struct_wl_list surfaces;

  external struct_wl_list link;

  @ffi.Uint32()
  external int ping_serial;

  external ffi.Pointer<struct_wl_event_source> ping_timer;
}

class struct_wlr_xdg_positioner extends ffi.Struct {
  external struct_wlr_box anchor_rect;

  @ffi.Int32()
  external int anchor;

  @ffi.Int32()
  external int gravity;

  @ffi.Int32()
  external int constraint_adjustment;

  external UnnamedStruct27 size;

  external UnnamedStruct28 offset;
}

class UnnamedStruct27 extends ffi.Struct {
  @ffi.Int32()
  external int width;

  @ffi.Int32()
  external int height;
}

class UnnamedStruct28 extends ffi.Struct {
  @ffi.Int32()
  external int x;

  @ffi.Int32()
  external int y;
}

class struct_wlr_xdg_popup extends ffi.Struct {
  external ffi.Pointer<struct_wlr_xdg_surface> base;

  external struct_wl_list link;

  external ffi.Pointer<struct_wl_resource> resource;

  @ffi.Bool()
  external bool committed;

  external ffi.Pointer<struct_wlr_surface> parent;

  external ffi.Pointer<struct_wlr_seat> seat;

  external struct_wlr_box geometry;

  external struct_wlr_xdg_positioner positioner;

  external struct_wl_list grab_link;
}

class struct_wlr_xdg_surface extends ffi.Struct {
  external ffi.Pointer<struct_wlr_xdg_client> client;

  external ffi.Pointer<struct_wl_resource> resource;

  external ffi.Pointer<struct_wlr_surface> surface;

  external struct_wl_list link;

  @ffi.Int32()
  external int role;

  external UnnamedUnion4 unnamed;

  external struct_wl_list popups;

  @ffi.Bool()
  external bool added;

  @ffi.Bool()
  external bool configured;

  @ffi.Bool()
  external bool mapped;

  external ffi.Pointer<struct_wl_event_source> configure_idle;

  @ffi.Uint32()
  external int scheduled_serial;

  external struct_wl_list configure_list;

  external struct_wlr_xdg_surface_state current;

  external struct_wlr_xdg_surface_state pending;

  external struct_wl_listener surface_destroy;

  external struct_wl_listener surface_commit;

  external UnnamedStruct30 events;

  external ffi.Pointer<ffi.Void> data;
}

abstract class enum_wlr_xdg_surface_role {
  static const int WLR_XDG_SURFACE_ROLE_NONE = 0;
  static const int WLR_XDG_SURFACE_ROLE_TOPLEVEL = 1;
  static const int WLR_XDG_SURFACE_ROLE_POPUP = 2;
}

class UnnamedUnion4 extends ffi.Union {
  external ffi.Pointer<struct_wlr_xdg_toplevel> toplevel;

  external ffi.Pointer<struct_wlr_xdg_popup> popup;
}

class struct_wlr_xdg_toplevel extends ffi.Struct {
  external ffi.Pointer<struct_wl_resource> resource;

  external ffi.Pointer<struct_wlr_xdg_surface> base;

  @ffi.Bool()
  external bool added;

  external ffi.Pointer<struct_wlr_xdg_surface> parent;

  external struct_wl_listener parent_unmap;

  external struct_wlr_xdg_toplevel_state current;

  external struct_wlr_xdg_toplevel_state pending;

  external struct_wlr_xdg_toplevel_configure scheduled;

  external struct_wlr_xdg_toplevel_requested requested;

  external ffi.Pointer<ffi.Char> title;

  external ffi.Pointer<ffi.Char> app_id;

  external UnnamedStruct29 events;
}

class struct_wlr_xdg_toplevel_state extends ffi.Struct {
  @ffi.Bool()
  external bool maximized;

  @ffi.Bool()
  external bool fullscreen;

  @ffi.Bool()
  external bool resizing;

  @ffi.Bool()
  external bool activated;

  @ffi.Uint32()
  external int tiled;

  @ffi.Uint32()
  external int width;

  @ffi.Uint32()
  external int height;

  @ffi.Uint32()
  external int max_width;

  @ffi.Uint32()
  external int max_height;

  @ffi.Uint32()
  external int min_width;

  @ffi.Uint32()
  external int min_height;
}

class struct_wlr_xdg_toplevel_configure extends ffi.Struct {
  @ffi.Bool()
  external bool maximized;

  @ffi.Bool()
  external bool fullscreen;

  @ffi.Bool()
  external bool resizing;

  @ffi.Bool()
  external bool activated;

  @ffi.Uint32()
  external int tiled;

  @ffi.Uint32()
  external int width;

  @ffi.Uint32()
  external int height;
}

class struct_wlr_xdg_toplevel_requested extends ffi.Struct {
  @ffi.Bool()
  external bool maximized;

  @ffi.Bool()
  external bool minimized;

  @ffi.Bool()
  external bool fullscreen;

  external ffi.Pointer<struct_wlr_output> fullscreen_output;

  external struct_wl_listener fullscreen_output_destroy;
}

class UnnamedStruct29 extends ffi.Struct {
  external struct_wl_signal request_maximize;

  external struct_wl_signal request_fullscreen;

  external struct_wl_signal request_minimize;

  external struct_wl_signal request_move;

  external struct_wl_signal request_resize;

  external struct_wl_signal request_show_window_menu;

  external struct_wl_signal set_parent;

  external struct_wl_signal set_title;

  external struct_wl_signal set_app_id;
}

class struct_wlr_xdg_surface_state extends ffi.Struct {
  @ffi.Uint32()
  external int configure_serial;

  external struct_wlr_box geometry;
}

class UnnamedStruct30 extends ffi.Struct {
  external struct_wl_signal destroy;

  external struct_wl_signal ping_timeout;

  external struct_wl_signal new_popup;

  external struct_wl_signal map;

  external struct_wl_signal unmap;

  external struct_wl_signal configure;

  external struct_wl_signal ack_configure;
}

class struct_wlr_xdg_popup_grab extends ffi.Struct {
  external ffi.Pointer<struct_wl_client> client;

  external struct_wlr_seat_pointer_grab pointer_grab;

  external struct_wlr_seat_keyboard_grab keyboard_grab;

  external struct_wlr_seat_touch_grab touch_grab;

  external ffi.Pointer<struct_wlr_seat> seat;

  external struct_wl_list popups;

  external struct_wl_list link;

  external struct_wl_listener seat_destroy;
}

class struct_wlr_xdg_surface_configure extends ffi.Struct {
  external ffi.Pointer<struct_wlr_xdg_surface> surface;

  external struct_wl_list link;

  @ffi.Uint32()
  external int serial;

  external ffi.Pointer<struct_wlr_xdg_toplevel_configure> toplevel_configure;
}

class struct_wlr_xdg_toplevel_move_event extends ffi.Struct {
  external ffi.Pointer<struct_wlr_xdg_surface> surface;

  external ffi.Pointer<struct_wlr_seat_client> seat;

  @ffi.Uint32()
  external int serial;
}

class struct_wlr_xdg_toplevel_resize_event extends ffi.Struct {
  external ffi.Pointer<struct_wlr_xdg_surface> surface;

  external ffi.Pointer<struct_wlr_seat_client> seat;

  @ffi.Uint32()
  external int serial;

  @ffi.Uint32()
  external int edges;
}

class struct_wlr_xdg_toplevel_set_fullscreen_event extends ffi.Struct {
  external ffi.Pointer<struct_wlr_xdg_surface> surface;

  @ffi.Bool()
  external bool fullscreen;

  external ffi.Pointer<struct_wlr_output> output;
}

class struct_wlr_xdg_toplevel_show_window_menu_event extends ffi.Struct {
  external ffi.Pointer<struct_wlr_xdg_surface> surface;

  external ffi.Pointer<struct_wlr_seat_client> seat;

  @ffi.Uint32()
  external int serial;

  @ffi.Uint32()
  external int x;

  @ffi.Uint32()
  external int y;
}

class struct_mallinfo extends ffi.Struct {
  @ffi.Int()
  external int arena;

  @ffi.Int()
  external int ordblks;

  @ffi.Int()
  external int smblks;

  @ffi.Int()
  external int hblks;

  @ffi.Int()
  external int hblkhd;

  @ffi.Int()
  external int usmblks;

  @ffi.Int()
  external int fsmblks;

  @ffi.Int()
  external int uordblks;

  @ffi.Int()
  external int fordblks;

  @ffi.Int()
  external int keepcost;
}

class struct_mallinfo2 extends ffi.Struct {
  @ffi.Size()
  external int arena;

  @ffi.Size()
  external int ordblks;

  @ffi.Size()
  external int smblks;

  @ffi.Size()
  external int hblks;

  @ffi.Size()
  external int hblkhd;

  @ffi.Size()
  external int usmblks;

  @ffi.Size()
  external int fsmblks;

  @ffi.Size()
  external int uordblks;

  @ffi.Size()
  external int fordblks;

  @ffi.Size()
  external int keepcost;
}

abstract class enum_event_type {
  static const int event_type_monitor_new = 0;
  static const int event_type_monitor_remove = 1;
  static const int event_type_monitor_frame = 2;
  static const int event_type_window_new = 3;
  static const int event_type_window_remove = 4;
  static const int event_type_window_show = 5;
  static const int event_type_window_hide = 6;
  static const int event_type_window_move = 7;
  static const int event_type_input_new = 8;
  static const int event_type_pointer_move = 9;
  static const int event_type_pointer_teleport = 10;
  static const int event_type_pointer_button = 11;
  static const int event_type_pointer_axis = 12;
  static const int event_type_pointer_remove = 13;
  static const int event_type_keyboard_key = 14;
  static const int event_type_keyboard_modifiers = 15;
  static const int event_type_keyboard_remove = 16;
}

class struct_waybright extends ffi.Struct {
  external ffi.Pointer<struct_wl_display> wl_display;

  external ffi.Pointer<struct_wlr_backend> wlr_backend;

  external ffi.Pointer<struct_wlr_renderer> wlr_renderer;

  external ffi.Pointer<struct_wlr_allocator> wlr_allocator;

  external ffi.Pointer<struct_wlr_compositor> wlr_compositor;

  external ffi.Pointer<struct_wlr_xdg_shell> wlr_xdg_shell;

  external ffi.Pointer<struct_wlr_seat> wlr_seat;

  @ffi.Uint32()
  external int last_pointer_button_serial;

  external ffi.Pointer<ffi.Char> socket_name;

  external UnnamedStruct31 listeners;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Void>)>>
      handle_event;
}

class UnnamedStruct31 extends ffi.Struct {
  external struct_wl_listener monitor_new;

  external struct_wl_listener window_new;

  external struct_wl_listener input_new;
}

class struct_waybright_renderer extends ffi.Struct {
  external ffi.Pointer<struct_wlr_output> wlr_output;

  external ffi.Pointer<struct_wlr_renderer> wlr_renderer;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Float> color_fill;
}

class struct_waybright_monitor extends ffi.Struct {
  external ffi.Pointer<struct_waybright> wb;

  external ffi.Pointer<struct_waybright_renderer> wb_renderer;

  external ffi.Pointer<struct_wlr_output> wlr_output;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Float> background_color;

  external UnnamedStruct32 listeners;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Void>)>>
      handle_event;
}

class UnnamedStruct32 extends ffi.Struct {
  external struct_wl_listener remove;

  external struct_wl_listener frame;
}

class struct_waybright_window extends ffi.Struct {
  external ffi.Pointer<struct_waybright> wb;

  external ffi.Pointer<struct_wlr_xdg_surface> wlr_xdg_surface;

  external ffi.Pointer<struct_wlr_xdg_toplevel> wlr_xdg_toplevel;

  @ffi.Int()
  external int is_popup;

  external UnnamedStruct33 listeners;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Void>)>>
      handle_event;
}

class UnnamedStruct33 extends ffi.Struct {
  external struct_wl_listener show1;

  external struct_wl_listener hide1;

  external struct_wl_listener remove;

  external struct_wl_listener move;
}

class struct_waybright_input extends ffi.Struct {
  external ffi.Pointer<struct_waybright> wb;

  external ffi.Pointer<struct_wlr_input_device> wlr_input_device;

  external ffi.Pointer<struct_waybright_pointer> pointer;

  external ffi.Pointer<struct_waybright_keyboard> keyboard;
}

class struct_waybright_pointer extends ffi.Struct {
  external ffi.Pointer<struct_waybright> wb;

  external ffi.Pointer<struct_waybright_input> wb_input;

  external ffi.Pointer<struct_wlr_pointer> wlr_pointer;

  @ffi.Double()
  external double x;

  @ffi.Double()
  external double y;

  external UnnamedStruct34 listeners;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Void>)>>
      handle_event;
}

class UnnamedStruct34 extends ffi.Struct {
  external struct_wl_listener move;

  external struct_wl_listener teleport;

  external struct_wl_listener button;

  external struct_wl_listener axis;

  external struct_wl_listener remove;
}

class struct_waybright_keyboard extends ffi.Struct {
  external ffi.Pointer<struct_waybright> wb;

  external ffi.Pointer<struct_waybright_input> wb_input;

  external ffi.Pointer<struct_wlr_keyboard> wlr_keyboard;

  external UnnamedStruct35 listeners;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Void>)>>
      handle_event;
}

class UnnamedStruct35 extends ffi.Struct {
  external struct_wl_listener key;

  external struct_wl_listener modifiers;

  external struct_wl_listener remove;
}

class struct_waybright_pointer_event extends ffi.Struct {
  external ffi.Pointer<struct_waybright_pointer> wb_pointer;

  external ffi.Pointer<ffi.Void> event;
}

class struct_waybright_keyboard_event extends ffi.Struct {
  external ffi.Pointer<struct_waybright_keyboard> wb_keyboard;

  external ffi.Pointer<ffi.Void> event;
}

const int FP_NAN = 0;

const int FP_INFINITE = 1;

const int FP_ZERO = 2;

const int FP_SUBNORMAL = 3;

const int FP_NORMAL = 4;

const int WL_EVENT_READABLE = 1;

const int WL_EVENT_WRITABLE = 2;

const int WL_EVENT_HANGUP = 4;

const int WL_EVENT_ERROR = 8;

const int _SYS_TYPES_H = 1;

const int _FEATURES_H = 1;

const int _DEFAULT_SOURCE = 1;

const int __GLIBC_USE_ISOC2X = 1;

const int __USE_ISOC11 = 1;

const int __USE_ISOC99 = 1;

const int __USE_ISOC95 = 1;

const int _POSIX_SOURCE = 1;

const int _POSIX_C_SOURCE = 200809;

const int __USE_POSIX = 1;

const int __USE_POSIX2 = 1;

const int __USE_POSIX199309 = 1;

const int __USE_POSIX199506 = 1;

const int __USE_XOPEN2K = 1;

const int __USE_XOPEN2K8 = 1;

const int _ATFILE_SOURCE = 1;

const int __WORDSIZE = 64;

const int __WORDSIZE_TIME64_COMPAT32 = 1;

const int __SYSCALL_WORDSIZE = 64;

const int __TIMESIZE = 64;

const int __USE_MISC = 1;

const int __USE_ATFILE = 1;

const int __USE_FORTIFY_LEVEL = 0;

const int __GLIBC_USE_DEPRECATED_GETS = 0;

const int __GLIBC_USE_DEPRECATED_SCANF = 0;

const int _STDC_PREDEF_H = 1;

const int __STDC_IEC_559__ = 1;

const int __STDC_IEC_60559_BFP__ = 201404;

const int __STDC_IEC_559_COMPLEX__ = 1;

const int __STDC_IEC_60559_COMPLEX__ = 201404;

const int __STDC_ISO_10646__ = 201706;

const int __GNU_LIBRARY__ = 6;

const int __GLIBC__ = 2;

const int __GLIBC_MINOR__ = 36;

const int _SYS_CDEFS_H = 1;

const int __THROW = 1;

const int __THROWNL = 1;

const int __glibc_c99_flexarr_available = 1;

const int __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI = 0;

const int __HAVE_GENERIC_SELECTION = 0;

const int _BITS_TYPES_H = 1;

const int _BITS_TYPESIZES_H = 1;

const int __OFF_T_MATCHES_OFF64_T = 1;

const int __INO_T_MATCHES_INO64_T = 1;

const int __RLIM_T_MATCHES_RLIM64_T = 1;

const int __STATFS_MATCHES_STATFS64 = 1;

const int __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64 = 1;

const int __FD_SETSIZE = 1024;

const int _BITS_TIME64_H = 1;

const int __clock_t_defined = 1;

const int __clockid_t_defined = 1;

const int __time_t_defined = 1;

const int __timer_t_defined = 1;

const int _BITS_STDINT_INTN_H = 1;

const int __BIT_TYPES_DEFINED__ = 1;

const int _ENDIAN_H = 1;

const int _BITS_ENDIAN_H = 1;

const int __LITTLE_ENDIAN = 1234;

const int __BIG_ENDIAN = 4321;

const int __PDP_ENDIAN = 3412;

const int _BITS_ENDIANNESS_H = 1;

const int __BYTE_ORDER = 1234;

const int __FLOAT_WORD_ORDER = 1234;

const int LITTLE_ENDIAN = 1234;

const int BIG_ENDIAN = 4321;

const int PDP_ENDIAN = 3412;

const int BYTE_ORDER = 1234;

const int _BITS_BYTESWAP_H = 1;

const int _BITS_UINTN_IDENTITY_H = 1;

const int _SYS_SELECT_H = 1;

const int __sigset_t_defined = 1;

const int _SIGSET_NWORDS = 16;

const int __timeval_defined = 1;

const int _STRUCT_TIMESPEC = 1;

const int __NFDBITS = 64;

const int FD_SETSIZE = 1024;

const int NFDBITS = 64;

const int _BITS_PTHREADTYPES_COMMON_H = 1;

const int _THREAD_SHARED_TYPES_H = 1;

const int _BITS_PTHREADTYPES_ARCH_H = 1;

const int __SIZEOF_PTHREAD_MUTEX_T = 40;

const int __SIZEOF_PTHREAD_ATTR_T = 56;

const int __SIZEOF_PTHREAD_RWLOCK_T = 56;

const int __SIZEOF_PTHREAD_BARRIER_T = 32;

const int __SIZEOF_PTHREAD_MUTEXATTR_T = 4;

const int __SIZEOF_PTHREAD_COND_T = 48;

const int __SIZEOF_PTHREAD_CONDATTR_T = 4;

const int __SIZEOF_PTHREAD_RWLOCKATTR_T = 8;

const int __SIZEOF_PTHREAD_BARRIERATTR_T = 4;

const int _THREAD_MUTEX_INTERNAL_H = 1;

const int __PTHREAD_MUTEX_HAVE_PREV = 1;

const int __PTHREAD_RWLOCK_ELISION_EXTRA = 0;

const int __have_pthread_attr_t = 1;

const int _STDINT_H = 1;

const int __GLIBC_USE_LIB_EXT2 = 1;

const int __GLIBC_USE_IEC_60559_BFP_EXT = 1;

const int __GLIBC_USE_IEC_60559_BFP_EXT_C2X = 1;

const int __GLIBC_USE_IEC_60559_EXT = 1;

const int __GLIBC_USE_IEC_60559_FUNCS_EXT = 1;

const int __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X = 1;

const int __GLIBC_USE_IEC_60559_TYPES_EXT = 1;

const int _BITS_WCHAR_H = 1;

const int __WCHAR_MAX = 2147483647;

const int __WCHAR_MIN = -2147483648;

const int _BITS_STDINT_UINTN_H = 1;

const int INT8_MIN = -128;

const int INT16_MIN = -32768;

const int INT32_MIN = -2147483648;

const int INT64_MIN = -9223372036854775808;

const int INT8_MAX = 127;

const int INT16_MAX = 32767;

const int INT32_MAX = 2147483647;

const int INT64_MAX = 9223372036854775807;

const int UINT8_MAX = 255;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int INT_LEAST8_MIN = -128;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST64_MAX = 9223372036854775807;

const int UINT_LEAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int INT_FAST8_MIN = -128;

const int INT_FAST16_MIN = -9223372036854775808;

const int INT_FAST32_MIN = -9223372036854775808;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST16_MAX = 9223372036854775807;

const int INT_FAST32_MAX = 9223372036854775807;

const int INT_FAST64_MAX = 9223372036854775807;

const int UINT_FAST8_MAX = 255;

const int UINT_FAST16_MAX = -1;

const int UINT_FAST32_MAX = -1;

const int UINT_FAST64_MAX = -1;

const int INTPTR_MIN = -9223372036854775808;

const int INTPTR_MAX = 9223372036854775807;

const int UINTPTR_MAX = -1;

const int INTMAX_MIN = -9223372036854775808;

const int INTMAX_MAX = 9223372036854775807;

const int UINTMAX_MAX = -1;

const int PTRDIFF_MIN = -9223372036854775808;

const int PTRDIFF_MAX = 9223372036854775807;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIG_ATOMIC_MAX = 2147483647;

const int SIZE_MAX = -1;

const int WCHAR_MIN = -2147483648;

const int WCHAR_MAX = 2147483647;

const int WINT_MIN = 0;

const int WINT_MAX = 4294967295;

const int __bool_true_false_are_defined = 1;

const int true1 = 1;

const int false1 = 0;

const int _MATH_H = 1;

const int _BITS_LIBM_SIMD_DECL_STUBS_H = 1;

const int __HAVE_FLOAT128 = 0;

const int __HAVE_DISTINCT_FLOAT128 = 0;

const int __HAVE_FLOAT64X = 1;

const int __HAVE_FLOAT64X_LONG_DOUBLE = 1;

const int __HAVE_FLOAT16 = 0;

const int __HAVE_FLOAT32 = 1;

const int __HAVE_FLOAT64 = 1;

const int __HAVE_FLOAT32X = 1;

const int __HAVE_FLOAT128X = 0;

const int __HAVE_DISTINCT_FLOAT16 = 0;

const int __HAVE_DISTINCT_FLOAT32 = 0;

const int __HAVE_DISTINCT_FLOAT64 = 0;

const int __HAVE_DISTINCT_FLOAT32X = 0;

const int __HAVE_DISTINCT_FLOAT64X = 0;

const int __HAVE_DISTINCT_FLOAT128X = 0;

const int __HAVE_FLOAT128_UNLIKE_LDBL = 0;

const int __HAVE_FLOATN_NOT_TYPEDEF = 0;

const double HUGE_VAL = double.infinity;

const double HUGE_VALF = double.infinity;

const double HUGE_VALL = double.infinity;

const double INFINITY = double.infinity;

const double NAN = double.nan;

const int __GLIBC_FLT_EVAL_METHOD = 0;

const int __FP_LOGB0_IS_MIN = 1;

const int __FP_LOGBNAN_IS_MIN = 1;

const int FP_ILOGB0 = -2147483648;

const int FP_ILOGBNAN = -2147483648;

const int __MATH_DECLARE_LDOUBLE = 1;

const int FP_NAN1 = 0;

const int FP_INFINITE1 = 1;

const int FP_ZERO1 = 2;

const int FP_SUBNORMAL1 = 3;

const int FP_NORMAL1 = 4;

const int MATH_ERRNO = 1;

const int MATH_ERREXCEPT = 2;

const int math_errhandling = 3;

const double M_E = 2.718281828459045;

const double M_LOG2E = 1.4426950408889634;

const double M_LOG10E = 0.4342944819032518;

const double M_LN2 = 0.6931471805599453;

const double M_LN10 = 2.302585092994046;

const double M_PI = 3.141592653589793;

const double M_PI_2 = 1.5707963267948966;

const double M_PI_4 = 0.7853981633974483;

const double M_1_PI = 0.3183098861837907;

const double M_2_PI = 0.6366197723675814;

const double M_2_SQRTPI = 1.1283791670955126;

const double M_SQRT2 = 1.4142135623730951;

const double M_SQRT1_2 = 0.7071067811865476;

const int NULL = 0;

const int _INTTYPES_H = 1;

const int ____gwchar_t_defined = 1;

const String __PRI64_PREFIX = 'l';

const String __PRIPTR_PREFIX = 'l';

const String PRId8 = 'd';

const String PRId16 = 'd';

const String PRId32 = 'd';

const String PRId64 = 'ld';

const String PRIdLEAST8 = 'd';

const String PRIdLEAST16 = 'd';

const String PRIdLEAST32 = 'd';

const String PRIdLEAST64 = 'ld';

const String PRIdFAST8 = 'd';

const String PRIdFAST16 = 'ld';

const String PRIdFAST32 = 'ld';

const String PRIdFAST64 = 'ld';

const String PRIi8 = 'i';

const String PRIi16 = 'i';

const String PRIi32 = 'i';

const String PRIi64 = 'li';

const String PRIiLEAST8 = 'i';

const String PRIiLEAST16 = 'i';

const String PRIiLEAST32 = 'i';

const String PRIiLEAST64 = 'li';

const String PRIiFAST8 = 'i';

const String PRIiFAST16 = 'li';

const String PRIiFAST32 = 'li';

const String PRIiFAST64 = 'li';

const String PRIo8 = 'o';

const String PRIo16 = 'o';

const String PRIo32 = 'o';

const String PRIo64 = 'lo';

const String PRIoLEAST8 = 'o';

const String PRIoLEAST16 = 'o';

const String PRIoLEAST32 = 'o';

const String PRIoLEAST64 = 'lo';

const String PRIoFAST8 = 'o';

const String PRIoFAST16 = 'lo';

const String PRIoFAST32 = 'lo';

const String PRIoFAST64 = 'lo';

const String PRIu8 = 'u';

const String PRIu16 = 'u';

const String PRIu32 = 'u';

const String PRIu64 = 'lu';

const String PRIuLEAST8 = 'u';

const String PRIuLEAST16 = 'u';

const String PRIuLEAST32 = 'u';

const String PRIuLEAST64 = 'lu';

const String PRIuFAST8 = 'u';

const String PRIuFAST16 = 'lu';

const String PRIuFAST32 = 'lu';

const String PRIuFAST64 = 'lu';

const String PRIx8 = 'x';

const String PRIx16 = 'x';

const String PRIx32 = 'x';

const String PRIx64 = 'lx';

const String PRIxLEAST8 = 'x';

const String PRIxLEAST16 = 'x';

const String PRIxLEAST32 = 'x';

const String PRIxLEAST64 = 'lx';

const String PRIxFAST8 = 'x';

const String PRIxFAST16 = 'lx';

const String PRIxFAST32 = 'lx';

const String PRIxFAST64 = 'lx';

const String PRIX8 = 'X';

const String PRIX16 = 'X';

const String PRIX32 = 'X';

const String PRIX64 = 'lX';

const String PRIXLEAST8 = 'X';

const String PRIXLEAST16 = 'X';

const String PRIXLEAST32 = 'X';

const String PRIXLEAST64 = 'lX';

const String PRIXFAST8 = 'X';

const String PRIXFAST16 = 'lX';

const String PRIXFAST32 = 'lX';

const String PRIXFAST64 = 'lX';

const String PRIdMAX = 'ld';

const String PRIiMAX = 'li';

const String PRIoMAX = 'lo';

const String PRIuMAX = 'lu';

const String PRIxMAX = 'lx';

const String PRIXMAX = 'lX';

const String PRIdPTR = 'ld';

const String PRIiPTR = 'li';

const String PRIoPTR = 'lo';

const String PRIuPTR = 'lu';

const String PRIxPTR = 'lx';

const String PRIXPTR = 'lX';

const String SCNd8 = 'hhd';

const String SCNd16 = 'hd';

const String SCNd32 = 'd';

const String SCNd64 = 'ld';

const String SCNdLEAST8 = 'hhd';

const String SCNdLEAST16 = 'hd';

const String SCNdLEAST32 = 'd';

const String SCNdLEAST64 = 'ld';

const String SCNdFAST8 = 'hhd';

const String SCNdFAST16 = 'ld';

const String SCNdFAST32 = 'ld';

const String SCNdFAST64 = 'ld';

const String SCNi8 = 'hhi';

const String SCNi16 = 'hi';

const String SCNi32 = 'i';

const String SCNi64 = 'li';

const String SCNiLEAST8 = 'hhi';

const String SCNiLEAST16 = 'hi';

const String SCNiLEAST32 = 'i';

const String SCNiLEAST64 = 'li';

const String SCNiFAST8 = 'hhi';

const String SCNiFAST16 = 'li';

const String SCNiFAST32 = 'li';

const String SCNiFAST64 = 'li';

const String SCNu8 = 'hhu';

const String SCNu16 = 'hu';

const String SCNu32 = 'u';

const String SCNu64 = 'lu';

const String SCNuLEAST8 = 'hhu';

const String SCNuLEAST16 = 'hu';

const String SCNuLEAST32 = 'u';

const String SCNuLEAST64 = 'lu';

const String SCNuFAST8 = 'hhu';

const String SCNuFAST16 = 'lu';

const String SCNuFAST32 = 'lu';

const String SCNuFAST64 = 'lu';

const String SCNo8 = 'hho';

const String SCNo16 = 'ho';

const String SCNo32 = 'o';

const String SCNo64 = 'lo';

const String SCNoLEAST8 = 'hho';

const String SCNoLEAST16 = 'ho';

const String SCNoLEAST32 = 'o';

const String SCNoLEAST64 = 'lo';

const String SCNoFAST8 = 'hho';

const String SCNoFAST16 = 'lo';

const String SCNoFAST32 = 'lo';

const String SCNoFAST64 = 'lo';

const String SCNx8 = 'hhx';

const String SCNx16 = 'hx';

const String SCNx32 = 'x';

const String SCNx64 = 'lx';

const String SCNxLEAST8 = 'hhx';

const String SCNxLEAST16 = 'hx';

const String SCNxLEAST32 = 'x';

const String SCNxLEAST64 = 'lx';

const String SCNxFAST8 = 'hhx';

const String SCNxFAST16 = 'lx';

const String SCNxFAST32 = 'lx';

const String SCNxFAST64 = 'lx';

const String SCNdMAX = 'ld';

const String SCNiMAX = 'li';

const String SCNoMAX = 'lo';

const String SCNuMAX = 'lu';

const String SCNxMAX = 'lx';

const String SCNdPTR = 'ld';

const String SCNiPTR = 'li';

const String SCNoPTR = 'lo';

const String SCNuPTR = 'lu';

const String SCNxPTR = 'lx';

const int __GNUC_VA_LIST = 1;

const int WAYLAND_VERSION_MAJOR = 1;

const int WAYLAND_VERSION_MINOR = 21;

const int WAYLAND_VERSION_MICRO = 0;

const String WAYLAND_VERSION = '1.21.0';

const int _SYS_SYSMACROS_H = 1;

const int _BITS_SYSMACROS_H = 1;

const int WLR_DMABUF_MAX_PLANES = 4;

const int WL_DISPLAY_ERROR = 0;

const int WL_DISPLAY_DELETE_ID = 1;

const int WL_DISPLAY_ERROR_SINCE_VERSION = 1;

const int WL_DISPLAY_DELETE_ID_SINCE_VERSION = 1;

const int WL_DISPLAY_SYNC_SINCE_VERSION = 1;

const int WL_DISPLAY_GET_REGISTRY_SINCE_VERSION = 1;

const int WL_REGISTRY_GLOBAL = 0;

const int WL_REGISTRY_GLOBAL_REMOVE = 1;

const int WL_REGISTRY_GLOBAL_SINCE_VERSION = 1;

const int WL_REGISTRY_GLOBAL_REMOVE_SINCE_VERSION = 1;

const int WL_REGISTRY_BIND_SINCE_VERSION = 1;

const int WL_CALLBACK_DONE = 0;

const int WL_CALLBACK_DONE_SINCE_VERSION = 1;

const int WL_COMPOSITOR_CREATE_SURFACE_SINCE_VERSION = 1;

const int WL_COMPOSITOR_CREATE_REGION_SINCE_VERSION = 1;

const int WL_SHM_POOL_CREATE_BUFFER_SINCE_VERSION = 1;

const int WL_SHM_POOL_DESTROY_SINCE_VERSION = 1;

const int WL_SHM_POOL_RESIZE_SINCE_VERSION = 1;

const int WL_SHM_FORMAT = 0;

const int WL_SHM_FORMAT_SINCE_VERSION = 1;

const int WL_SHM_CREATE_POOL_SINCE_VERSION = 1;

const int WL_BUFFER_RELEASE = 0;

const int WL_BUFFER_RELEASE_SINCE_VERSION = 1;

const int WL_BUFFER_DESTROY_SINCE_VERSION = 1;

const int WL_DATA_OFFER_OFFER = 0;

const int WL_DATA_OFFER_SOURCE_ACTIONS = 1;

const int WL_DATA_OFFER_ACTION = 2;

const int WL_DATA_OFFER_OFFER_SINCE_VERSION = 1;

const int WL_DATA_OFFER_SOURCE_ACTIONS_SINCE_VERSION = 3;

const int WL_DATA_OFFER_ACTION_SINCE_VERSION = 3;

const int WL_DATA_OFFER_ACCEPT_SINCE_VERSION = 1;

const int WL_DATA_OFFER_RECEIVE_SINCE_VERSION = 1;

const int WL_DATA_OFFER_DESTROY_SINCE_VERSION = 1;

const int WL_DATA_OFFER_FINISH_SINCE_VERSION = 3;

const int WL_DATA_OFFER_SET_ACTIONS_SINCE_VERSION = 3;

const int WL_DATA_SOURCE_TARGET = 0;

const int WL_DATA_SOURCE_SEND = 1;

const int WL_DATA_SOURCE_CANCELLED = 2;

const int WL_DATA_SOURCE_DND_DROP_PERFORMED = 3;

const int WL_DATA_SOURCE_DND_FINISHED = 4;

const int WL_DATA_SOURCE_ACTION = 5;

const int WL_DATA_SOURCE_TARGET_SINCE_VERSION = 1;

const int WL_DATA_SOURCE_SEND_SINCE_VERSION = 1;

const int WL_DATA_SOURCE_CANCELLED_SINCE_VERSION = 1;

const int WL_DATA_SOURCE_DND_DROP_PERFORMED_SINCE_VERSION = 3;

const int WL_DATA_SOURCE_DND_FINISHED_SINCE_VERSION = 3;

const int WL_DATA_SOURCE_ACTION_SINCE_VERSION = 3;

const int WL_DATA_SOURCE_OFFER_SINCE_VERSION = 1;

const int WL_DATA_SOURCE_DESTROY_SINCE_VERSION = 1;

const int WL_DATA_SOURCE_SET_ACTIONS_SINCE_VERSION = 3;

const int WL_DATA_DEVICE_DATA_OFFER = 0;

const int WL_DATA_DEVICE_ENTER = 1;

const int WL_DATA_DEVICE_LEAVE = 2;

const int WL_DATA_DEVICE_MOTION = 3;

const int WL_DATA_DEVICE_DROP = 4;

const int WL_DATA_DEVICE_SELECTION = 5;

const int WL_DATA_DEVICE_DATA_OFFER_SINCE_VERSION = 1;

const int WL_DATA_DEVICE_ENTER_SINCE_VERSION = 1;

const int WL_DATA_DEVICE_LEAVE_SINCE_VERSION = 1;

const int WL_DATA_DEVICE_MOTION_SINCE_VERSION = 1;

const int WL_DATA_DEVICE_DROP_SINCE_VERSION = 1;

const int WL_DATA_DEVICE_SELECTION_SINCE_VERSION = 1;

const int WL_DATA_DEVICE_START_DRAG_SINCE_VERSION = 1;

const int WL_DATA_DEVICE_SET_SELECTION_SINCE_VERSION = 1;

const int WL_DATA_DEVICE_RELEASE_SINCE_VERSION = 2;

const int WL_DATA_DEVICE_MANAGER_CREATE_DATA_SOURCE_SINCE_VERSION = 1;

const int WL_DATA_DEVICE_MANAGER_GET_DATA_DEVICE_SINCE_VERSION = 1;

const int WL_SHELL_GET_SHELL_SURFACE_SINCE_VERSION = 1;

const int WL_SHELL_SURFACE_PING = 0;

const int WL_SHELL_SURFACE_CONFIGURE = 1;

const int WL_SHELL_SURFACE_POPUP_DONE = 2;

const int WL_SHELL_SURFACE_PING_SINCE_VERSION = 1;

const int WL_SHELL_SURFACE_CONFIGURE_SINCE_VERSION = 1;

const int WL_SHELL_SURFACE_POPUP_DONE_SINCE_VERSION = 1;

const int WL_SHELL_SURFACE_PONG_SINCE_VERSION = 1;

const int WL_SHELL_SURFACE_MOVE_SINCE_VERSION = 1;

const int WL_SHELL_SURFACE_RESIZE_SINCE_VERSION = 1;

const int WL_SHELL_SURFACE_SET_TOPLEVEL_SINCE_VERSION = 1;

const int WL_SHELL_SURFACE_SET_TRANSIENT_SINCE_VERSION = 1;

const int WL_SHELL_SURFACE_SET_FULLSCREEN_SINCE_VERSION = 1;

const int WL_SHELL_SURFACE_SET_POPUP_SINCE_VERSION = 1;

const int WL_SHELL_SURFACE_SET_MAXIMIZED_SINCE_VERSION = 1;

const int WL_SHELL_SURFACE_SET_TITLE_SINCE_VERSION = 1;

const int WL_SHELL_SURFACE_SET_CLASS_SINCE_VERSION = 1;

const int WL_SURFACE_ENTER = 0;

const int WL_SURFACE_LEAVE = 1;

const int WL_SURFACE_ENTER_SINCE_VERSION = 1;

const int WL_SURFACE_LEAVE_SINCE_VERSION = 1;

const int WL_SURFACE_DESTROY_SINCE_VERSION = 1;

const int WL_SURFACE_ATTACH_SINCE_VERSION = 1;

const int WL_SURFACE_DAMAGE_SINCE_VERSION = 1;

const int WL_SURFACE_FRAME_SINCE_VERSION = 1;

const int WL_SURFACE_SET_OPAQUE_REGION_SINCE_VERSION = 1;

const int WL_SURFACE_SET_INPUT_REGION_SINCE_VERSION = 1;

const int WL_SURFACE_COMMIT_SINCE_VERSION = 1;

const int WL_SURFACE_SET_BUFFER_TRANSFORM_SINCE_VERSION = 2;

const int WL_SURFACE_SET_BUFFER_SCALE_SINCE_VERSION = 3;

const int WL_SURFACE_DAMAGE_BUFFER_SINCE_VERSION = 4;

const int WL_SURFACE_OFFSET_SINCE_VERSION = 5;

const int WL_SEAT_CAPABILITIES = 0;

const int WL_SEAT_NAME = 1;

const int WL_SEAT_CAPABILITIES_SINCE_VERSION = 1;

const int WL_SEAT_NAME_SINCE_VERSION = 2;

const int WL_SEAT_GET_POINTER_SINCE_VERSION = 1;

const int WL_SEAT_GET_KEYBOARD_SINCE_VERSION = 1;

const int WL_SEAT_GET_TOUCH_SINCE_VERSION = 1;

const int WL_SEAT_RELEASE_SINCE_VERSION = 5;

const int WL_POINTER_AXIS_SOURCE_WHEEL_TILT_SINCE_VERSION = 6;

const int WL_POINTER_ENTER = 0;

const int WL_POINTER_LEAVE = 1;

const int WL_POINTER_MOTION = 2;

const int WL_POINTER_BUTTON = 3;

const int WL_POINTER_AXIS = 4;

const int WL_POINTER_FRAME = 5;

const int WL_POINTER_AXIS_SOURCE = 6;

const int WL_POINTER_AXIS_STOP = 7;

const int WL_POINTER_AXIS_DISCRETE = 8;

const int WL_POINTER_AXIS_VALUE120 = 9;

const int WL_POINTER_ENTER_SINCE_VERSION = 1;

const int WL_POINTER_LEAVE_SINCE_VERSION = 1;

const int WL_POINTER_MOTION_SINCE_VERSION = 1;

const int WL_POINTER_BUTTON_SINCE_VERSION = 1;

const int WL_POINTER_AXIS_SINCE_VERSION = 1;

const int WL_POINTER_FRAME_SINCE_VERSION = 5;

const int WL_POINTER_AXIS_SOURCE_SINCE_VERSION = 5;

const int WL_POINTER_AXIS_STOP_SINCE_VERSION = 5;

const int WL_POINTER_AXIS_DISCRETE_SINCE_VERSION = 5;

const int WL_POINTER_AXIS_VALUE120_SINCE_VERSION = 8;

const int WL_POINTER_SET_CURSOR_SINCE_VERSION = 1;

const int WL_POINTER_RELEASE_SINCE_VERSION = 3;

const int WL_KEYBOARD_KEYMAP = 0;

const int WL_KEYBOARD_ENTER = 1;

const int WL_KEYBOARD_LEAVE = 2;

const int WL_KEYBOARD_KEY = 3;

const int WL_KEYBOARD_MODIFIERS = 4;

const int WL_KEYBOARD_REPEAT_INFO = 5;

const int WL_KEYBOARD_KEYMAP_SINCE_VERSION = 1;

const int WL_KEYBOARD_ENTER_SINCE_VERSION = 1;

const int WL_KEYBOARD_LEAVE_SINCE_VERSION = 1;

const int WL_KEYBOARD_KEY_SINCE_VERSION = 1;

const int WL_KEYBOARD_MODIFIERS_SINCE_VERSION = 1;

const int WL_KEYBOARD_REPEAT_INFO_SINCE_VERSION = 4;

const int WL_KEYBOARD_RELEASE_SINCE_VERSION = 3;

const int WL_TOUCH_DOWN = 0;

const int WL_TOUCH_UP = 1;

const int WL_TOUCH_MOTION = 2;

const int WL_TOUCH_FRAME = 3;

const int WL_TOUCH_CANCEL = 4;

const int WL_TOUCH_SHAPE = 5;

const int WL_TOUCH_ORIENTATION = 6;

const int WL_TOUCH_DOWN_SINCE_VERSION = 1;

const int WL_TOUCH_UP_SINCE_VERSION = 1;

const int WL_TOUCH_MOTION_SINCE_VERSION = 1;

const int WL_TOUCH_FRAME_SINCE_VERSION = 1;

const int WL_TOUCH_CANCEL_SINCE_VERSION = 1;

const int WL_TOUCH_SHAPE_SINCE_VERSION = 6;

const int WL_TOUCH_ORIENTATION_SINCE_VERSION = 6;

const int WL_TOUCH_RELEASE_SINCE_VERSION = 3;

const int WL_OUTPUT_GEOMETRY = 0;

const int WL_OUTPUT_MODE = 1;

const int WL_OUTPUT_DONE = 2;

const int WL_OUTPUT_SCALE = 3;

const int WL_OUTPUT_NAME = 4;

const int WL_OUTPUT_DESCRIPTION = 5;

const int WL_OUTPUT_GEOMETRY_SINCE_VERSION = 1;

const int WL_OUTPUT_MODE_SINCE_VERSION = 1;

const int WL_OUTPUT_DONE_SINCE_VERSION = 2;

const int WL_OUTPUT_SCALE_SINCE_VERSION = 2;

const int WL_OUTPUT_NAME_SINCE_VERSION = 4;

const int WL_OUTPUT_DESCRIPTION_SINCE_VERSION = 4;

const int WL_OUTPUT_RELEASE_SINCE_VERSION = 3;

const int WL_REGION_DESTROY_SINCE_VERSION = 1;

const int WL_REGION_ADD_SINCE_VERSION = 1;

const int WL_REGION_SUBTRACT_SINCE_VERSION = 1;

const int WL_SUBCOMPOSITOR_DESTROY_SINCE_VERSION = 1;

const int WL_SUBCOMPOSITOR_GET_SUBSURFACE_SINCE_VERSION = 1;

const int WL_SUBSURFACE_DESTROY_SINCE_VERSION = 1;

const int WL_SUBSURFACE_SET_POSITION_SINCE_VERSION = 1;

const int WL_SUBSURFACE_PLACE_ABOVE_SINCE_VERSION = 1;

const int WL_SUBSURFACE_PLACE_BELOW_SINCE_VERSION = 1;

const int WL_SUBSURFACE_SET_SYNC_SINCE_VERSION = 1;

const int WL_SUBSURFACE_SET_DESYNC_SINCE_VERSION = 1;

const int _STDIO_H = 1;

const int _____fpos_t_defined = 1;

const int ____mbstate_t_defined = 1;

const int _____fpos64_t_defined = 1;

const int ____FILE_defined = 1;

const int __FILE_defined = 1;

const int __struct_FILE_defined = 1;

const int _IO_EOF_SEEN = 16;

const int _IO_ERR_SEEN = 32;

const int _IO_USER_LOCK = 32768;

const int _IOFBF = 0;

const int _IOLBF = 1;

const int _IONBF = 2;

const int BUFSIZ = 8192;

const int EOF = -1;

const int SEEK_SET = 0;

const int SEEK_CUR = 1;

const int SEEK_END = 2;

const String P_tmpdir = '/tmp';

const int _BITS_STDIO_LIM_H = 1;

const int L_tmpnam = 20;

const int TMP_MAX = 238328;

const int FILENAME_MAX = 4096;

const int L_ctermid = 9;

const int FOPEN_MAX = 16;

const String XKB_MOD_NAME_SHIFT = 'Shift';

const String XKB_MOD_NAME_CAPS = 'Lock';

const String XKB_MOD_NAME_CTRL = 'Control';

const String XKB_MOD_NAME_ALT = 'Mod1';

const String XKB_MOD_NAME_NUM = 'Mod2';

const String XKB_MOD_NAME_LOGO = 'Mod4';

const String XKB_LED_NAME_CAPS = 'Caps Lock';

const String XKB_LED_NAME_NUM = 'Num Lock';

const String XKB_LED_NAME_SCROLL = 'Scroll Lock';

const int XKB_KEY_NoSymbol = 0;

const int XKB_KEY_VoidSymbol = 16777215;

const int XKB_KEY_BackSpace = 65288;

const int XKB_KEY_Tab = 65289;

const int XKB_KEY_Linefeed = 65290;

const int XKB_KEY_Clear = 65291;

const int XKB_KEY_Return = 65293;

const int XKB_KEY_Pause = 65299;

const int XKB_KEY_Scroll_Lock = 65300;

const int XKB_KEY_Sys_Req = 65301;

const int XKB_KEY_Escape = 65307;

const int XKB_KEY_Delete = 65535;

const int XKB_KEY_Multi_key = 65312;

const int XKB_KEY_Codeinput = 65335;

const int XKB_KEY_SingleCandidate = 65340;

const int XKB_KEY_MultipleCandidate = 65341;

const int XKB_KEY_PreviousCandidate = 65342;

const int XKB_KEY_Kanji = 65313;

const int XKB_KEY_Muhenkan = 65314;

const int XKB_KEY_Henkan_Mode = 65315;

const int XKB_KEY_Henkan = 65315;

const int XKB_KEY_Romaji = 65316;

const int XKB_KEY_Hiragana = 65317;

const int XKB_KEY_Katakana = 65318;

const int XKB_KEY_Hiragana_Katakana = 65319;

const int XKB_KEY_Zenkaku = 65320;

const int XKB_KEY_Hankaku = 65321;

const int XKB_KEY_Zenkaku_Hankaku = 65322;

const int XKB_KEY_Touroku = 65323;

const int XKB_KEY_Massyo = 65324;

const int XKB_KEY_Kana_Lock = 65325;

const int XKB_KEY_Kana_Shift = 65326;

const int XKB_KEY_Eisu_Shift = 65327;

const int XKB_KEY_Eisu_toggle = 65328;

const int XKB_KEY_Kanji_Bangou = 65335;

const int XKB_KEY_Zen_Koho = 65341;

const int XKB_KEY_Mae_Koho = 65342;

const int XKB_KEY_Home = 65360;

const int XKB_KEY_Left = 65361;

const int XKB_KEY_Up = 65362;

const int XKB_KEY_Right = 65363;

const int XKB_KEY_Down = 65364;

const int XKB_KEY_Prior = 65365;

const int XKB_KEY_Page_Up = 65365;

const int XKB_KEY_Next = 65366;

const int XKB_KEY_Page_Down = 65366;

const int XKB_KEY_End = 65367;

const int XKB_KEY_Begin = 65368;

const int XKB_KEY_Select = 65376;

const int XKB_KEY_Print = 65377;

const int XKB_KEY_Execute = 65378;

const int XKB_KEY_Insert = 65379;

const int XKB_KEY_Undo = 65381;

const int XKB_KEY_Redo = 65382;

const int XKB_KEY_Menu = 65383;

const int XKB_KEY_Find = 65384;

const int XKB_KEY_Cancel = 65385;

const int XKB_KEY_Help = 65386;

const int XKB_KEY_Break = 65387;

const int XKB_KEY_Mode_switch = 65406;

const int XKB_KEY_script_switch = 65406;

const int XKB_KEY_Num_Lock = 65407;

const int XKB_KEY_KP_Space = 65408;

const int XKB_KEY_KP_Tab = 65417;

const int XKB_KEY_KP_Enter = 65421;

const int XKB_KEY_KP_F1 = 65425;

const int XKB_KEY_KP_F2 = 65426;

const int XKB_KEY_KP_F3 = 65427;

const int XKB_KEY_KP_F4 = 65428;

const int XKB_KEY_KP_Home = 65429;

const int XKB_KEY_KP_Left = 65430;

const int XKB_KEY_KP_Up = 65431;

const int XKB_KEY_KP_Right = 65432;

const int XKB_KEY_KP_Down = 65433;

const int XKB_KEY_KP_Prior = 65434;

const int XKB_KEY_KP_Page_Up = 65434;

const int XKB_KEY_KP_Next = 65435;

const int XKB_KEY_KP_Page_Down = 65435;

const int XKB_KEY_KP_End = 65436;

const int XKB_KEY_KP_Begin = 65437;

const int XKB_KEY_KP_Insert = 65438;

const int XKB_KEY_KP_Delete = 65439;

const int XKB_KEY_KP_Equal = 65469;

const int XKB_KEY_KP_Multiply = 65450;

const int XKB_KEY_KP_Add = 65451;

const int XKB_KEY_KP_Separator = 65452;

const int XKB_KEY_KP_Subtract = 65453;

const int XKB_KEY_KP_Decimal = 65454;

const int XKB_KEY_KP_Divide = 65455;

const int XKB_KEY_KP_0 = 65456;

const int XKB_KEY_KP_1 = 65457;

const int XKB_KEY_KP_2 = 65458;

const int XKB_KEY_KP_3 = 65459;

const int XKB_KEY_KP_4 = 65460;

const int XKB_KEY_KP_5 = 65461;

const int XKB_KEY_KP_6 = 65462;

const int XKB_KEY_KP_7 = 65463;

const int XKB_KEY_KP_8 = 65464;

const int XKB_KEY_KP_9 = 65465;

const int XKB_KEY_F1 = 65470;

const int XKB_KEY_F2 = 65471;

const int XKB_KEY_F3 = 65472;

const int XKB_KEY_F4 = 65473;

const int XKB_KEY_F5 = 65474;

const int XKB_KEY_F6 = 65475;

const int XKB_KEY_F7 = 65476;

const int XKB_KEY_F8 = 65477;

const int XKB_KEY_F9 = 65478;

const int XKB_KEY_F10 = 65479;

const int XKB_KEY_F11 = 65480;

const int XKB_KEY_L1 = 65480;

const int XKB_KEY_F12 = 65481;

const int XKB_KEY_L2 = 65481;

const int XKB_KEY_F13 = 65482;

const int XKB_KEY_L3 = 65482;

const int XKB_KEY_F14 = 65483;

const int XKB_KEY_L4 = 65483;

const int XKB_KEY_F15 = 65484;

const int XKB_KEY_L5 = 65484;

const int XKB_KEY_F16 = 65485;

const int XKB_KEY_L6 = 65485;

const int XKB_KEY_F17 = 65486;

const int XKB_KEY_L7 = 65486;

const int XKB_KEY_F18 = 65487;

const int XKB_KEY_L8 = 65487;

const int XKB_KEY_F19 = 65488;

const int XKB_KEY_L9 = 65488;

const int XKB_KEY_F20 = 65489;

const int XKB_KEY_L10 = 65489;

const int XKB_KEY_F21 = 65490;

const int XKB_KEY_R1 = 65490;

const int XKB_KEY_F22 = 65491;

const int XKB_KEY_R2 = 65491;

const int XKB_KEY_F23 = 65492;

const int XKB_KEY_R3 = 65492;

const int XKB_KEY_F24 = 65493;

const int XKB_KEY_R4 = 65493;

const int XKB_KEY_F25 = 65494;

const int XKB_KEY_R5 = 65494;

const int XKB_KEY_F26 = 65495;

const int XKB_KEY_R6 = 65495;

const int XKB_KEY_F27 = 65496;

const int XKB_KEY_R7 = 65496;

const int XKB_KEY_F28 = 65497;

const int XKB_KEY_R8 = 65497;

const int XKB_KEY_F29 = 65498;

const int XKB_KEY_R9 = 65498;

const int XKB_KEY_F30 = 65499;

const int XKB_KEY_R10 = 65499;

const int XKB_KEY_F31 = 65500;

const int XKB_KEY_R11 = 65500;

const int XKB_KEY_F32 = 65501;

const int XKB_KEY_R12 = 65501;

const int XKB_KEY_F33 = 65502;

const int XKB_KEY_R13 = 65502;

const int XKB_KEY_F34 = 65503;

const int XKB_KEY_R14 = 65503;

const int XKB_KEY_F35 = 65504;

const int XKB_KEY_R15 = 65504;

const int XKB_KEY_Shift_L = 65505;

const int XKB_KEY_Shift_R = 65506;

const int XKB_KEY_Control_L = 65507;

const int XKB_KEY_Control_R = 65508;

const int XKB_KEY_Caps_Lock = 65509;

const int XKB_KEY_Shift_Lock = 65510;

const int XKB_KEY_Meta_L = 65511;

const int XKB_KEY_Meta_R = 65512;

const int XKB_KEY_Alt_L = 65513;

const int XKB_KEY_Alt_R = 65514;

const int XKB_KEY_Super_L = 65515;

const int XKB_KEY_Super_R = 65516;

const int XKB_KEY_Hyper_L = 65517;

const int XKB_KEY_Hyper_R = 65518;

const int XKB_KEY_ISO_Lock = 65025;

const int XKB_KEY_ISO_Level2_Latch = 65026;

const int XKB_KEY_ISO_Level3_Shift = 65027;

const int XKB_KEY_ISO_Level3_Latch = 65028;

const int XKB_KEY_ISO_Level3_Lock = 65029;

const int XKB_KEY_ISO_Level5_Shift = 65041;

const int XKB_KEY_ISO_Level5_Latch = 65042;

const int XKB_KEY_ISO_Level5_Lock = 65043;

const int XKB_KEY_ISO_Group_Shift = 65406;

const int XKB_KEY_ISO_Group_Latch = 65030;

const int XKB_KEY_ISO_Group_Lock = 65031;

const int XKB_KEY_ISO_Next_Group = 65032;

const int XKB_KEY_ISO_Next_Group_Lock = 65033;

const int XKB_KEY_ISO_Prev_Group = 65034;

const int XKB_KEY_ISO_Prev_Group_Lock = 65035;

const int XKB_KEY_ISO_First_Group = 65036;

const int XKB_KEY_ISO_First_Group_Lock = 65037;

const int XKB_KEY_ISO_Last_Group = 65038;

const int XKB_KEY_ISO_Last_Group_Lock = 65039;

const int XKB_KEY_ISO_Left_Tab = 65056;

const int XKB_KEY_ISO_Move_Line_Up = 65057;

const int XKB_KEY_ISO_Move_Line_Down = 65058;

const int XKB_KEY_ISO_Partial_Line_Up = 65059;

const int XKB_KEY_ISO_Partial_Line_Down = 65060;

const int XKB_KEY_ISO_Partial_Space_Left = 65061;

const int XKB_KEY_ISO_Partial_Space_Right = 65062;

const int XKB_KEY_ISO_Set_Margin_Left = 65063;

const int XKB_KEY_ISO_Set_Margin_Right = 65064;

const int XKB_KEY_ISO_Release_Margin_Left = 65065;

const int XKB_KEY_ISO_Release_Margin_Right = 65066;

const int XKB_KEY_ISO_Release_Both_Margins = 65067;

const int XKB_KEY_ISO_Fast_Cursor_Left = 65068;

const int XKB_KEY_ISO_Fast_Cursor_Right = 65069;

const int XKB_KEY_ISO_Fast_Cursor_Up = 65070;

const int XKB_KEY_ISO_Fast_Cursor_Down = 65071;

const int XKB_KEY_ISO_Continuous_Underline = 65072;

const int XKB_KEY_ISO_Discontinuous_Underline = 65073;

const int XKB_KEY_ISO_Emphasize = 65074;

const int XKB_KEY_ISO_Center_Object = 65075;

const int XKB_KEY_ISO_Enter = 65076;

const int XKB_KEY_dead_grave = 65104;

const int XKB_KEY_dead_acute = 65105;

const int XKB_KEY_dead_circumflex = 65106;

const int XKB_KEY_dead_tilde = 65107;

const int XKB_KEY_dead_perispomeni = 65107;

const int XKB_KEY_dead_macron = 65108;

const int XKB_KEY_dead_breve = 65109;

const int XKB_KEY_dead_abovedot = 65110;

const int XKB_KEY_dead_diaeresis = 65111;

const int XKB_KEY_dead_abovering = 65112;

const int XKB_KEY_dead_doubleacute = 65113;

const int XKB_KEY_dead_caron = 65114;

const int XKB_KEY_dead_cedilla = 65115;

const int XKB_KEY_dead_ogonek = 65116;

const int XKB_KEY_dead_iota = 65117;

const int XKB_KEY_dead_voiced_sound = 65118;

const int XKB_KEY_dead_semivoiced_sound = 65119;

const int XKB_KEY_dead_belowdot = 65120;

const int XKB_KEY_dead_hook = 65121;

const int XKB_KEY_dead_horn = 65122;

const int XKB_KEY_dead_stroke = 65123;

const int XKB_KEY_dead_abovecomma = 65124;

const int XKB_KEY_dead_psili = 65124;

const int XKB_KEY_dead_abovereversedcomma = 65125;

const int XKB_KEY_dead_dasia = 65125;

const int XKB_KEY_dead_doublegrave = 65126;

const int XKB_KEY_dead_belowring = 65127;

const int XKB_KEY_dead_belowmacron = 65128;

const int XKB_KEY_dead_belowcircumflex = 65129;

const int XKB_KEY_dead_belowtilde = 65130;

const int XKB_KEY_dead_belowbreve = 65131;

const int XKB_KEY_dead_belowdiaeresis = 65132;

const int XKB_KEY_dead_invertedbreve = 65133;

const int XKB_KEY_dead_belowcomma = 65134;

const int XKB_KEY_dead_currency = 65135;

const int XKB_KEY_dead_lowline = 65168;

const int XKB_KEY_dead_aboveverticalline = 65169;

const int XKB_KEY_dead_belowverticalline = 65170;

const int XKB_KEY_dead_longsolidusoverlay = 65171;

const int XKB_KEY_dead_a = 65152;

const int XKB_KEY_dead_A = 65153;

const int XKB_KEY_dead_e = 65154;

const int XKB_KEY_dead_E = 65155;

const int XKB_KEY_dead_i = 65156;

const int XKB_KEY_dead_I = 65157;

const int XKB_KEY_dead_o = 65158;

const int XKB_KEY_dead_O = 65159;

const int XKB_KEY_dead_u = 65160;

const int XKB_KEY_dead_U = 65161;

const int XKB_KEY_dead_small_schwa = 65162;

const int XKB_KEY_dead_capital_schwa = 65163;

const int XKB_KEY_dead_greek = 65164;

const int XKB_KEY_First_Virtual_Screen = 65232;

const int XKB_KEY_Prev_Virtual_Screen = 65233;

const int XKB_KEY_Next_Virtual_Screen = 65234;

const int XKB_KEY_Last_Virtual_Screen = 65236;

const int XKB_KEY_Terminate_Server = 65237;

const int XKB_KEY_AccessX_Enable = 65136;

const int XKB_KEY_AccessX_Feedback_Enable = 65137;

const int XKB_KEY_RepeatKeys_Enable = 65138;

const int XKB_KEY_SlowKeys_Enable = 65139;

const int XKB_KEY_BounceKeys_Enable = 65140;

const int XKB_KEY_StickyKeys_Enable = 65141;

const int XKB_KEY_MouseKeys_Enable = 65142;

const int XKB_KEY_MouseKeys_Accel_Enable = 65143;

const int XKB_KEY_Overlay1_Enable = 65144;

const int XKB_KEY_Overlay2_Enable = 65145;

const int XKB_KEY_AudibleBell_Enable = 65146;

const int XKB_KEY_Pointer_Left = 65248;

const int XKB_KEY_Pointer_Right = 65249;

const int XKB_KEY_Pointer_Up = 65250;

const int XKB_KEY_Pointer_Down = 65251;

const int XKB_KEY_Pointer_UpLeft = 65252;

const int XKB_KEY_Pointer_UpRight = 65253;

const int XKB_KEY_Pointer_DownLeft = 65254;

const int XKB_KEY_Pointer_DownRight = 65255;

const int XKB_KEY_Pointer_Button_Dflt = 65256;

const int XKB_KEY_Pointer_Button1 = 65257;

const int XKB_KEY_Pointer_Button2 = 65258;

const int XKB_KEY_Pointer_Button3 = 65259;

const int XKB_KEY_Pointer_Button4 = 65260;

const int XKB_KEY_Pointer_Button5 = 65261;

const int XKB_KEY_Pointer_DblClick_Dflt = 65262;

const int XKB_KEY_Pointer_DblClick1 = 65263;

const int XKB_KEY_Pointer_DblClick2 = 65264;

const int XKB_KEY_Pointer_DblClick3 = 65265;

const int XKB_KEY_Pointer_DblClick4 = 65266;

const int XKB_KEY_Pointer_DblClick5 = 65267;

const int XKB_KEY_Pointer_Drag_Dflt = 65268;

const int XKB_KEY_Pointer_Drag1 = 65269;

const int XKB_KEY_Pointer_Drag2 = 65270;

const int XKB_KEY_Pointer_Drag3 = 65271;

const int XKB_KEY_Pointer_Drag4 = 65272;

const int XKB_KEY_Pointer_Drag5 = 65277;

const int XKB_KEY_Pointer_EnableKeys = 65273;

const int XKB_KEY_Pointer_Accelerate = 65274;

const int XKB_KEY_Pointer_DfltBtnNext = 65275;

const int XKB_KEY_Pointer_DfltBtnPrev = 65276;

const int XKB_KEY_ch = 65184;

const int XKB_KEY_Ch = 65185;

const int XKB_KEY_CH = 65186;

const int XKB_KEY_c_h = 65187;

const int XKB_KEY_C_h = 65188;

const int XKB_KEY_C_H = 65189;

const int XKB_KEY_3270_Duplicate = 64769;

const int XKB_KEY_3270_FieldMark = 64770;

const int XKB_KEY_3270_Right2 = 64771;

const int XKB_KEY_3270_Left2 = 64772;

const int XKB_KEY_3270_BackTab = 64773;

const int XKB_KEY_3270_EraseEOF = 64774;

const int XKB_KEY_3270_EraseInput = 64775;

const int XKB_KEY_3270_Reset = 64776;

const int XKB_KEY_3270_Quit = 64777;

const int XKB_KEY_3270_PA1 = 64778;

const int XKB_KEY_3270_PA2 = 64779;

const int XKB_KEY_3270_PA3 = 64780;

const int XKB_KEY_3270_Test = 64781;

const int XKB_KEY_3270_Attn = 64782;

const int XKB_KEY_3270_CursorBlink = 64783;

const int XKB_KEY_3270_AltCursor = 64784;

const int XKB_KEY_3270_KeyClick = 64785;

const int XKB_KEY_3270_Jump = 64786;

const int XKB_KEY_3270_Ident = 64787;

const int XKB_KEY_3270_Rule = 64788;

const int XKB_KEY_3270_Copy = 64789;

const int XKB_KEY_3270_Play = 64790;

const int XKB_KEY_3270_Setup = 64791;

const int XKB_KEY_3270_Record = 64792;

const int XKB_KEY_3270_ChangeScreen = 64793;

const int XKB_KEY_3270_DeleteWord = 64794;

const int XKB_KEY_3270_ExSelect = 64795;

const int XKB_KEY_3270_CursorSelect = 64796;

const int XKB_KEY_3270_PrintScreen = 64797;

const int XKB_KEY_3270_Enter = 64798;

const int XKB_KEY_space = 32;

const int XKB_KEY_exclam = 33;

const int XKB_KEY_quotedbl = 34;

const int XKB_KEY_numbersign = 35;

const int XKB_KEY_dollar = 36;

const int XKB_KEY_percent = 37;

const int XKB_KEY_ampersand = 38;

const int XKB_KEY_apostrophe = 39;

const int XKB_KEY_quoteright = 39;

const int XKB_KEY_parenleft = 40;

const int XKB_KEY_parenright = 41;

const int XKB_KEY_asterisk = 42;

const int XKB_KEY_plus = 43;

const int XKB_KEY_comma = 44;

const int XKB_KEY_minus = 45;

const int XKB_KEY_period = 46;

const int XKB_KEY_slash = 47;

const int XKB_KEY_0 = 48;

const int XKB_KEY_1 = 49;

const int XKB_KEY_2 = 50;

const int XKB_KEY_3 = 51;

const int XKB_KEY_4 = 52;

const int XKB_KEY_5 = 53;

const int XKB_KEY_6 = 54;

const int XKB_KEY_7 = 55;

const int XKB_KEY_8 = 56;

const int XKB_KEY_9 = 57;

const int XKB_KEY_colon = 58;

const int XKB_KEY_semicolon = 59;

const int XKB_KEY_less = 60;

const int XKB_KEY_equal = 61;

const int XKB_KEY_greater = 62;

const int XKB_KEY_question = 63;

const int XKB_KEY_at = 64;

const int XKB_KEY_A = 65;

const int XKB_KEY_B = 66;

const int XKB_KEY_C = 67;

const int XKB_KEY_D = 68;

const int XKB_KEY_E = 69;

const int XKB_KEY_F = 70;

const int XKB_KEY_G = 71;

const int XKB_KEY_H = 72;

const int XKB_KEY_I = 73;

const int XKB_KEY_J = 74;

const int XKB_KEY_K = 75;

const int XKB_KEY_L = 76;

const int XKB_KEY_M = 77;

const int XKB_KEY_N = 78;

const int XKB_KEY_O = 79;

const int XKB_KEY_P = 80;

const int XKB_KEY_Q = 81;

const int XKB_KEY_R = 82;

const int XKB_KEY_S = 83;

const int XKB_KEY_T = 84;

const int XKB_KEY_U = 85;

const int XKB_KEY_V = 86;

const int XKB_KEY_W = 87;

const int XKB_KEY_X = 88;

const int XKB_KEY_Y = 89;

const int XKB_KEY_Z = 90;

const int XKB_KEY_bracketleft = 91;

const int XKB_KEY_backslash = 92;

const int XKB_KEY_bracketright = 93;

const int XKB_KEY_asciicircum = 94;

const int XKB_KEY_underscore = 95;

const int XKB_KEY_grave = 96;

const int XKB_KEY_quoteleft = 96;

const int XKB_KEY_a = 97;

const int XKB_KEY_b = 98;

const int XKB_KEY_c = 99;

const int XKB_KEY_d = 100;

const int XKB_KEY_e = 101;

const int XKB_KEY_f = 102;

const int XKB_KEY_g = 103;

const int XKB_KEY_h = 104;

const int XKB_KEY_i = 105;

const int XKB_KEY_j = 106;

const int XKB_KEY_k = 107;

const int XKB_KEY_l = 108;

const int XKB_KEY_m = 109;

const int XKB_KEY_n = 110;

const int XKB_KEY_o = 111;

const int XKB_KEY_p = 112;

const int XKB_KEY_q = 113;

const int XKB_KEY_r = 114;

const int XKB_KEY_s = 115;

const int XKB_KEY_t = 116;

const int XKB_KEY_u = 117;

const int XKB_KEY_v = 118;

const int XKB_KEY_w = 119;

const int XKB_KEY_x = 120;

const int XKB_KEY_y = 121;

const int XKB_KEY_z = 122;

const int XKB_KEY_braceleft = 123;

const int XKB_KEY_bar = 124;

const int XKB_KEY_braceright = 125;

const int XKB_KEY_asciitilde = 126;

const int XKB_KEY_nobreakspace = 160;

const int XKB_KEY_exclamdown = 161;

const int XKB_KEY_cent = 162;

const int XKB_KEY_sterling = 163;

const int XKB_KEY_currency = 164;

const int XKB_KEY_yen = 165;

const int XKB_KEY_brokenbar = 166;

const int XKB_KEY_section = 167;

const int XKB_KEY_diaeresis = 168;

const int XKB_KEY_copyright = 169;

const int XKB_KEY_ordfeminine = 170;

const int XKB_KEY_guillemotleft = 171;

const int XKB_KEY_notsign = 172;

const int XKB_KEY_hyphen = 173;

const int XKB_KEY_registered = 174;

const int XKB_KEY_macron = 175;

const int XKB_KEY_degree = 176;

const int XKB_KEY_plusminus = 177;

const int XKB_KEY_twosuperior = 178;

const int XKB_KEY_threesuperior = 179;

const int XKB_KEY_acute = 180;

const int XKB_KEY_mu = 181;

const int XKB_KEY_paragraph = 182;

const int XKB_KEY_periodcentered = 183;

const int XKB_KEY_cedilla = 184;

const int XKB_KEY_onesuperior = 185;

const int XKB_KEY_masculine = 186;

const int XKB_KEY_guillemotright = 187;

const int XKB_KEY_onequarter = 188;

const int XKB_KEY_onehalf = 189;

const int XKB_KEY_threequarters = 190;

const int XKB_KEY_questiondown = 191;

const int XKB_KEY_Agrave = 192;

const int XKB_KEY_Aacute = 193;

const int XKB_KEY_Acircumflex = 194;

const int XKB_KEY_Atilde = 195;

const int XKB_KEY_Adiaeresis = 196;

const int XKB_KEY_Aring = 197;

const int XKB_KEY_AE = 198;

const int XKB_KEY_Ccedilla = 199;

const int XKB_KEY_Egrave = 200;

const int XKB_KEY_Eacute = 201;

const int XKB_KEY_Ecircumflex = 202;

const int XKB_KEY_Ediaeresis = 203;

const int XKB_KEY_Igrave = 204;

const int XKB_KEY_Iacute = 205;

const int XKB_KEY_Icircumflex = 206;

const int XKB_KEY_Idiaeresis = 207;

const int XKB_KEY_ETH = 208;

const int XKB_KEY_Eth = 208;

const int XKB_KEY_Ntilde = 209;

const int XKB_KEY_Ograve = 210;

const int XKB_KEY_Oacute = 211;

const int XKB_KEY_Ocircumflex = 212;

const int XKB_KEY_Otilde = 213;

const int XKB_KEY_Odiaeresis = 214;

const int XKB_KEY_multiply = 215;

const int XKB_KEY_Oslash = 216;

const int XKB_KEY_Ooblique = 216;

const int XKB_KEY_Ugrave = 217;

const int XKB_KEY_Uacute = 218;

const int XKB_KEY_Ucircumflex = 219;

const int XKB_KEY_Udiaeresis = 220;

const int XKB_KEY_Yacute = 221;

const int XKB_KEY_THORN = 222;

const int XKB_KEY_Thorn = 222;

const int XKB_KEY_ssharp = 223;

const int XKB_KEY_agrave = 224;

const int XKB_KEY_aacute = 225;

const int XKB_KEY_acircumflex = 226;

const int XKB_KEY_atilde = 227;

const int XKB_KEY_adiaeresis = 228;

const int XKB_KEY_aring = 229;

const int XKB_KEY_ae = 230;

const int XKB_KEY_ccedilla = 231;

const int XKB_KEY_egrave = 232;

const int XKB_KEY_eacute = 233;

const int XKB_KEY_ecircumflex = 234;

const int XKB_KEY_ediaeresis = 235;

const int XKB_KEY_igrave = 236;

const int XKB_KEY_iacute = 237;

const int XKB_KEY_icircumflex = 238;

const int XKB_KEY_idiaeresis = 239;

const int XKB_KEY_eth = 240;

const int XKB_KEY_ntilde = 241;

const int XKB_KEY_ograve = 242;

const int XKB_KEY_oacute = 243;

const int XKB_KEY_ocircumflex = 244;

const int XKB_KEY_otilde = 245;

const int XKB_KEY_odiaeresis = 246;

const int XKB_KEY_division = 247;

const int XKB_KEY_oslash = 248;

const int XKB_KEY_ooblique = 248;

const int XKB_KEY_ugrave = 249;

const int XKB_KEY_uacute = 250;

const int XKB_KEY_ucircumflex = 251;

const int XKB_KEY_udiaeresis = 252;

const int XKB_KEY_yacute = 253;

const int XKB_KEY_thorn = 254;

const int XKB_KEY_ydiaeresis = 255;

const int XKB_KEY_Aogonek = 417;

const int XKB_KEY_breve = 418;

const int XKB_KEY_Lstroke = 419;

const int XKB_KEY_Lcaron = 421;

const int XKB_KEY_Sacute = 422;

const int XKB_KEY_Scaron = 425;

const int XKB_KEY_Scedilla = 426;

const int XKB_KEY_Tcaron = 427;

const int XKB_KEY_Zacute = 428;

const int XKB_KEY_Zcaron = 430;

const int XKB_KEY_Zabovedot = 431;

const int XKB_KEY_aogonek = 433;

const int XKB_KEY_ogonek = 434;

const int XKB_KEY_lstroke = 435;

const int XKB_KEY_lcaron = 437;

const int XKB_KEY_sacute = 438;

const int XKB_KEY_caron = 439;

const int XKB_KEY_scaron = 441;

const int XKB_KEY_scedilla = 442;

const int XKB_KEY_tcaron = 443;

const int XKB_KEY_zacute = 444;

const int XKB_KEY_doubleacute = 445;

const int XKB_KEY_zcaron = 446;

const int XKB_KEY_zabovedot = 447;

const int XKB_KEY_Racute = 448;

const int XKB_KEY_Abreve = 451;

const int XKB_KEY_Lacute = 453;

const int XKB_KEY_Cacute = 454;

const int XKB_KEY_Ccaron = 456;

const int XKB_KEY_Eogonek = 458;

const int XKB_KEY_Ecaron = 460;

const int XKB_KEY_Dcaron = 463;

const int XKB_KEY_Dstroke = 464;

const int XKB_KEY_Nacute = 465;

const int XKB_KEY_Ncaron = 466;

const int XKB_KEY_Odoubleacute = 469;

const int XKB_KEY_Rcaron = 472;

const int XKB_KEY_Uring = 473;

const int XKB_KEY_Udoubleacute = 475;

const int XKB_KEY_Tcedilla = 478;

const int XKB_KEY_racute = 480;

const int XKB_KEY_abreve = 483;

const int XKB_KEY_lacute = 485;

const int XKB_KEY_cacute = 486;

const int XKB_KEY_ccaron = 488;

const int XKB_KEY_eogonek = 490;

const int XKB_KEY_ecaron = 492;

const int XKB_KEY_dcaron = 495;

const int XKB_KEY_dstroke = 496;

const int XKB_KEY_nacute = 497;

const int XKB_KEY_ncaron = 498;

const int XKB_KEY_odoubleacute = 501;

const int XKB_KEY_rcaron = 504;

const int XKB_KEY_uring = 505;

const int XKB_KEY_udoubleacute = 507;

const int XKB_KEY_tcedilla = 510;

const int XKB_KEY_abovedot = 511;

const int XKB_KEY_Hstroke = 673;

const int XKB_KEY_Hcircumflex = 678;

const int XKB_KEY_Iabovedot = 681;

const int XKB_KEY_Gbreve = 683;

const int XKB_KEY_Jcircumflex = 684;

const int XKB_KEY_hstroke = 689;

const int XKB_KEY_hcircumflex = 694;

const int XKB_KEY_idotless = 697;

const int XKB_KEY_gbreve = 699;

const int XKB_KEY_jcircumflex = 700;

const int XKB_KEY_Cabovedot = 709;

const int XKB_KEY_Ccircumflex = 710;

const int XKB_KEY_Gabovedot = 725;

const int XKB_KEY_Gcircumflex = 728;

const int XKB_KEY_Ubreve = 733;

const int XKB_KEY_Scircumflex = 734;

const int XKB_KEY_cabovedot = 741;

const int XKB_KEY_ccircumflex = 742;

const int XKB_KEY_gabovedot = 757;

const int XKB_KEY_gcircumflex = 760;

const int XKB_KEY_ubreve = 765;

const int XKB_KEY_scircumflex = 766;

const int XKB_KEY_kra = 930;

const int XKB_KEY_kappa = 930;

const int XKB_KEY_Rcedilla = 931;

const int XKB_KEY_Itilde = 933;

const int XKB_KEY_Lcedilla = 934;

const int XKB_KEY_Emacron = 938;

const int XKB_KEY_Gcedilla = 939;

const int XKB_KEY_Tslash = 940;

const int XKB_KEY_rcedilla = 947;

const int XKB_KEY_itilde = 949;

const int XKB_KEY_lcedilla = 950;

const int XKB_KEY_emacron = 954;

const int XKB_KEY_gcedilla = 955;

const int XKB_KEY_tslash = 956;

const int XKB_KEY_ENG = 957;

const int XKB_KEY_eng = 959;

const int XKB_KEY_Amacron = 960;

const int XKB_KEY_Iogonek = 967;

const int XKB_KEY_Eabovedot = 972;

const int XKB_KEY_Imacron = 975;

const int XKB_KEY_Ncedilla = 977;

const int XKB_KEY_Omacron = 978;

const int XKB_KEY_Kcedilla = 979;

const int XKB_KEY_Uogonek = 985;

const int XKB_KEY_Utilde = 989;

const int XKB_KEY_Umacron = 990;

const int XKB_KEY_amacron = 992;

const int XKB_KEY_iogonek = 999;

const int XKB_KEY_eabovedot = 1004;

const int XKB_KEY_imacron = 1007;

const int XKB_KEY_ncedilla = 1009;

const int XKB_KEY_omacron = 1010;

const int XKB_KEY_kcedilla = 1011;

const int XKB_KEY_uogonek = 1017;

const int XKB_KEY_utilde = 1021;

const int XKB_KEY_umacron = 1022;

const int XKB_KEY_Wcircumflex = 16777588;

const int XKB_KEY_wcircumflex = 16777589;

const int XKB_KEY_Ycircumflex = 16777590;

const int XKB_KEY_ycircumflex = 16777591;

const int XKB_KEY_Babovedot = 16784898;

const int XKB_KEY_babovedot = 16784899;

const int XKB_KEY_Dabovedot = 16784906;

const int XKB_KEY_dabovedot = 16784907;

const int XKB_KEY_Fabovedot = 16784926;

const int XKB_KEY_fabovedot = 16784927;

const int XKB_KEY_Mabovedot = 16784960;

const int XKB_KEY_mabovedot = 16784961;

const int XKB_KEY_Pabovedot = 16784982;

const int XKB_KEY_pabovedot = 16784983;

const int XKB_KEY_Sabovedot = 16784992;

const int XKB_KEY_sabovedot = 16784993;

const int XKB_KEY_Tabovedot = 16785002;

const int XKB_KEY_tabovedot = 16785003;

const int XKB_KEY_Wgrave = 16785024;

const int XKB_KEY_wgrave = 16785025;

const int XKB_KEY_Wacute = 16785026;

const int XKB_KEY_wacute = 16785027;

const int XKB_KEY_Wdiaeresis = 16785028;

const int XKB_KEY_wdiaeresis = 16785029;

const int XKB_KEY_Ygrave = 16785138;

const int XKB_KEY_ygrave = 16785139;

const int XKB_KEY_OE = 5052;

const int XKB_KEY_oe = 5053;

const int XKB_KEY_Ydiaeresis = 5054;

const int XKB_KEY_overline = 1150;

const int XKB_KEY_kana_fullstop = 1185;

const int XKB_KEY_kana_openingbracket = 1186;

const int XKB_KEY_kana_closingbracket = 1187;

const int XKB_KEY_kana_comma = 1188;

const int XKB_KEY_kana_conjunctive = 1189;

const int XKB_KEY_kana_middledot = 1189;

const int XKB_KEY_kana_WO = 1190;

const int XKB_KEY_kana_a = 1191;

const int XKB_KEY_kana_i = 1192;

const int XKB_KEY_kana_u = 1193;

const int XKB_KEY_kana_e = 1194;

const int XKB_KEY_kana_o = 1195;

const int XKB_KEY_kana_ya = 1196;

const int XKB_KEY_kana_yu = 1197;

const int XKB_KEY_kana_yo = 1198;

const int XKB_KEY_kana_tsu = 1199;

const int XKB_KEY_kana_tu = 1199;

const int XKB_KEY_prolongedsound = 1200;

const int XKB_KEY_kana_A = 1201;

const int XKB_KEY_kana_I = 1202;

const int XKB_KEY_kana_U = 1203;

const int XKB_KEY_kana_E = 1204;

const int XKB_KEY_kana_O = 1205;

const int XKB_KEY_kana_KA = 1206;

const int XKB_KEY_kana_KI = 1207;

const int XKB_KEY_kana_KU = 1208;

const int XKB_KEY_kana_KE = 1209;

const int XKB_KEY_kana_KO = 1210;

const int XKB_KEY_kana_SA = 1211;

const int XKB_KEY_kana_SHI = 1212;

const int XKB_KEY_kana_SU = 1213;

const int XKB_KEY_kana_SE = 1214;

const int XKB_KEY_kana_SO = 1215;

const int XKB_KEY_kana_TA = 1216;

const int XKB_KEY_kana_CHI = 1217;

const int XKB_KEY_kana_TI = 1217;

const int XKB_KEY_kana_TSU = 1218;

const int XKB_KEY_kana_TU = 1218;

const int XKB_KEY_kana_TE = 1219;

const int XKB_KEY_kana_TO = 1220;

const int XKB_KEY_kana_NA = 1221;

const int XKB_KEY_kana_NI = 1222;

const int XKB_KEY_kana_NU = 1223;

const int XKB_KEY_kana_NE = 1224;

const int XKB_KEY_kana_NO = 1225;

const int XKB_KEY_kana_HA = 1226;

const int XKB_KEY_kana_HI = 1227;

const int XKB_KEY_kana_FU = 1228;

const int XKB_KEY_kana_HU = 1228;

const int XKB_KEY_kana_HE = 1229;

const int XKB_KEY_kana_HO = 1230;

const int XKB_KEY_kana_MA = 1231;

const int XKB_KEY_kana_MI = 1232;

const int XKB_KEY_kana_MU = 1233;

const int XKB_KEY_kana_ME = 1234;

const int XKB_KEY_kana_MO = 1235;

const int XKB_KEY_kana_YA = 1236;

const int XKB_KEY_kana_YU = 1237;

const int XKB_KEY_kana_YO = 1238;

const int XKB_KEY_kana_RA = 1239;

const int XKB_KEY_kana_RI = 1240;

const int XKB_KEY_kana_RU = 1241;

const int XKB_KEY_kana_RE = 1242;

const int XKB_KEY_kana_RO = 1243;

const int XKB_KEY_kana_WA = 1244;

const int XKB_KEY_kana_N = 1245;

const int XKB_KEY_voicedsound = 1246;

const int XKB_KEY_semivoicedsound = 1247;

const int XKB_KEY_kana_switch = 65406;

const int XKB_KEY_Farsi_0 = 16778992;

const int XKB_KEY_Farsi_1 = 16778993;

const int XKB_KEY_Farsi_2 = 16778994;

const int XKB_KEY_Farsi_3 = 16778995;

const int XKB_KEY_Farsi_4 = 16778996;

const int XKB_KEY_Farsi_5 = 16778997;

const int XKB_KEY_Farsi_6 = 16778998;

const int XKB_KEY_Farsi_7 = 16778999;

const int XKB_KEY_Farsi_8 = 16779000;

const int XKB_KEY_Farsi_9 = 16779001;

const int XKB_KEY_Arabic_percent = 16778858;

const int XKB_KEY_Arabic_superscript_alef = 16778864;

const int XKB_KEY_Arabic_tteh = 16778873;

const int XKB_KEY_Arabic_peh = 16778878;

const int XKB_KEY_Arabic_tcheh = 16778886;

const int XKB_KEY_Arabic_ddal = 16778888;

const int XKB_KEY_Arabic_rreh = 16778897;

const int XKB_KEY_Arabic_comma = 1452;

const int XKB_KEY_Arabic_fullstop = 16778964;

const int XKB_KEY_Arabic_0 = 16778848;

const int XKB_KEY_Arabic_1 = 16778849;

const int XKB_KEY_Arabic_2 = 16778850;

const int XKB_KEY_Arabic_3 = 16778851;

const int XKB_KEY_Arabic_4 = 16778852;

const int XKB_KEY_Arabic_5 = 16778853;

const int XKB_KEY_Arabic_6 = 16778854;

const int XKB_KEY_Arabic_7 = 16778855;

const int XKB_KEY_Arabic_8 = 16778856;

const int XKB_KEY_Arabic_9 = 16778857;

const int XKB_KEY_Arabic_semicolon = 1467;

const int XKB_KEY_Arabic_question_mark = 1471;

const int XKB_KEY_Arabic_hamza = 1473;

const int XKB_KEY_Arabic_maddaonalef = 1474;

const int XKB_KEY_Arabic_hamzaonalef = 1475;

const int XKB_KEY_Arabic_hamzaonwaw = 1476;

const int XKB_KEY_Arabic_hamzaunderalef = 1477;

const int XKB_KEY_Arabic_hamzaonyeh = 1478;

const int XKB_KEY_Arabic_alef = 1479;

const int XKB_KEY_Arabic_beh = 1480;

const int XKB_KEY_Arabic_tehmarbuta = 1481;

const int XKB_KEY_Arabic_teh = 1482;

const int XKB_KEY_Arabic_theh = 1483;

const int XKB_KEY_Arabic_jeem = 1484;

const int XKB_KEY_Arabic_hah = 1485;

const int XKB_KEY_Arabic_khah = 1486;

const int XKB_KEY_Arabic_dal = 1487;

const int XKB_KEY_Arabic_thal = 1488;

const int XKB_KEY_Arabic_ra = 1489;

const int XKB_KEY_Arabic_zain = 1490;

const int XKB_KEY_Arabic_seen = 1491;

const int XKB_KEY_Arabic_sheen = 1492;

const int XKB_KEY_Arabic_sad = 1493;

const int XKB_KEY_Arabic_dad = 1494;

const int XKB_KEY_Arabic_tah = 1495;

const int XKB_KEY_Arabic_zah = 1496;

const int XKB_KEY_Arabic_ain = 1497;

const int XKB_KEY_Arabic_ghain = 1498;

const int XKB_KEY_Arabic_tatweel = 1504;

const int XKB_KEY_Arabic_feh = 1505;

const int XKB_KEY_Arabic_qaf = 1506;

const int XKB_KEY_Arabic_kaf = 1507;

const int XKB_KEY_Arabic_lam = 1508;

const int XKB_KEY_Arabic_meem = 1509;

const int XKB_KEY_Arabic_noon = 1510;

const int XKB_KEY_Arabic_ha = 1511;

const int XKB_KEY_Arabic_heh = 1511;

const int XKB_KEY_Arabic_waw = 1512;

const int XKB_KEY_Arabic_alefmaksura = 1513;

const int XKB_KEY_Arabic_yeh = 1514;

const int XKB_KEY_Arabic_fathatan = 1515;

const int XKB_KEY_Arabic_dammatan = 1516;

const int XKB_KEY_Arabic_kasratan = 1517;

const int XKB_KEY_Arabic_fatha = 1518;

const int XKB_KEY_Arabic_damma = 1519;

const int XKB_KEY_Arabic_kasra = 1520;

const int XKB_KEY_Arabic_shadda = 1521;

const int XKB_KEY_Arabic_sukun = 1522;

const int XKB_KEY_Arabic_madda_above = 16778835;

const int XKB_KEY_Arabic_hamza_above = 16778836;

const int XKB_KEY_Arabic_hamza_below = 16778837;

const int XKB_KEY_Arabic_jeh = 16778904;

const int XKB_KEY_Arabic_veh = 16778916;

const int XKB_KEY_Arabic_keheh = 16778921;

const int XKB_KEY_Arabic_gaf = 16778927;

const int XKB_KEY_Arabic_noon_ghunna = 16778938;

const int XKB_KEY_Arabic_heh_doachashmee = 16778942;

const int XKB_KEY_Farsi_yeh = 16778956;

const int XKB_KEY_Arabic_farsi_yeh = 16778956;

const int XKB_KEY_Arabic_yeh_baree = 16778962;

const int XKB_KEY_Arabic_heh_goal = 16778945;

const int XKB_KEY_Arabic_switch = 65406;

const int XKB_KEY_Cyrillic_GHE_bar = 16778386;

const int XKB_KEY_Cyrillic_ghe_bar = 16778387;

const int XKB_KEY_Cyrillic_ZHE_descender = 16778390;

const int XKB_KEY_Cyrillic_zhe_descender = 16778391;

const int XKB_KEY_Cyrillic_KA_descender = 16778394;

const int XKB_KEY_Cyrillic_ka_descender = 16778395;

const int XKB_KEY_Cyrillic_KA_vertstroke = 16778396;

const int XKB_KEY_Cyrillic_ka_vertstroke = 16778397;

const int XKB_KEY_Cyrillic_EN_descender = 16778402;

const int XKB_KEY_Cyrillic_en_descender = 16778403;

const int XKB_KEY_Cyrillic_U_straight = 16778414;

const int XKB_KEY_Cyrillic_u_straight = 16778415;

const int XKB_KEY_Cyrillic_U_straight_bar = 16778416;

const int XKB_KEY_Cyrillic_u_straight_bar = 16778417;

const int XKB_KEY_Cyrillic_HA_descender = 16778418;

const int XKB_KEY_Cyrillic_ha_descender = 16778419;

const int XKB_KEY_Cyrillic_CHE_descender = 16778422;

const int XKB_KEY_Cyrillic_che_descender = 16778423;

const int XKB_KEY_Cyrillic_CHE_vertstroke = 16778424;

const int XKB_KEY_Cyrillic_che_vertstroke = 16778425;

const int XKB_KEY_Cyrillic_SHHA = 16778426;

const int XKB_KEY_Cyrillic_shha = 16778427;

const int XKB_KEY_Cyrillic_SCHWA = 16778456;

const int XKB_KEY_Cyrillic_schwa = 16778457;

const int XKB_KEY_Cyrillic_I_macron = 16778466;

const int XKB_KEY_Cyrillic_i_macron = 16778467;

const int XKB_KEY_Cyrillic_O_bar = 16778472;

const int XKB_KEY_Cyrillic_o_bar = 16778473;

const int XKB_KEY_Cyrillic_U_macron = 16778478;

const int XKB_KEY_Cyrillic_u_macron = 16778479;

const int XKB_KEY_Serbian_dje = 1697;

const int XKB_KEY_Macedonia_gje = 1698;

const int XKB_KEY_Cyrillic_io = 1699;

const int XKB_KEY_Ukrainian_ie = 1700;

const int XKB_KEY_Ukranian_je = 1700;

const int XKB_KEY_Macedonia_dse = 1701;

const int XKB_KEY_Ukrainian_i = 1702;

const int XKB_KEY_Ukranian_i = 1702;

const int XKB_KEY_Ukrainian_yi = 1703;

const int XKB_KEY_Ukranian_yi = 1703;

const int XKB_KEY_Cyrillic_je = 1704;

const int XKB_KEY_Serbian_je = 1704;

const int XKB_KEY_Cyrillic_lje = 1705;

const int XKB_KEY_Serbian_lje = 1705;

const int XKB_KEY_Cyrillic_nje = 1706;

const int XKB_KEY_Serbian_nje = 1706;

const int XKB_KEY_Serbian_tshe = 1707;

const int XKB_KEY_Macedonia_kje = 1708;

const int XKB_KEY_Ukrainian_ghe_with_upturn = 1709;

const int XKB_KEY_Byelorussian_shortu = 1710;

const int XKB_KEY_Cyrillic_dzhe = 1711;

const int XKB_KEY_Serbian_dze = 1711;

const int XKB_KEY_numerosign = 1712;

const int XKB_KEY_Serbian_DJE = 1713;

const int XKB_KEY_Macedonia_GJE = 1714;

const int XKB_KEY_Cyrillic_IO = 1715;

const int XKB_KEY_Ukrainian_IE = 1716;

const int XKB_KEY_Ukranian_JE = 1716;

const int XKB_KEY_Macedonia_DSE = 1717;

const int XKB_KEY_Ukrainian_I = 1718;

const int XKB_KEY_Ukranian_I = 1718;

const int XKB_KEY_Ukrainian_YI = 1719;

const int XKB_KEY_Ukranian_YI = 1719;

const int XKB_KEY_Cyrillic_JE = 1720;

const int XKB_KEY_Serbian_JE = 1720;

const int XKB_KEY_Cyrillic_LJE = 1721;

const int XKB_KEY_Serbian_LJE = 1721;

const int XKB_KEY_Cyrillic_NJE = 1722;

const int XKB_KEY_Serbian_NJE = 1722;

const int XKB_KEY_Serbian_TSHE = 1723;

const int XKB_KEY_Macedonia_KJE = 1724;

const int XKB_KEY_Ukrainian_GHE_WITH_UPTURN = 1725;

const int XKB_KEY_Byelorussian_SHORTU = 1726;

const int XKB_KEY_Cyrillic_DZHE = 1727;

const int XKB_KEY_Serbian_DZE = 1727;

const int XKB_KEY_Cyrillic_yu = 1728;

const int XKB_KEY_Cyrillic_a = 1729;

const int XKB_KEY_Cyrillic_be = 1730;

const int XKB_KEY_Cyrillic_tse = 1731;

const int XKB_KEY_Cyrillic_de = 1732;

const int XKB_KEY_Cyrillic_ie = 1733;

const int XKB_KEY_Cyrillic_ef = 1734;

const int XKB_KEY_Cyrillic_ghe = 1735;

const int XKB_KEY_Cyrillic_ha = 1736;

const int XKB_KEY_Cyrillic_i = 1737;

const int XKB_KEY_Cyrillic_shorti = 1738;

const int XKB_KEY_Cyrillic_ka = 1739;

const int XKB_KEY_Cyrillic_el = 1740;

const int XKB_KEY_Cyrillic_em = 1741;

const int XKB_KEY_Cyrillic_en = 1742;

const int XKB_KEY_Cyrillic_o = 1743;

const int XKB_KEY_Cyrillic_pe = 1744;

const int XKB_KEY_Cyrillic_ya = 1745;

const int XKB_KEY_Cyrillic_er = 1746;

const int XKB_KEY_Cyrillic_es = 1747;

const int XKB_KEY_Cyrillic_te = 1748;

const int XKB_KEY_Cyrillic_u = 1749;

const int XKB_KEY_Cyrillic_zhe = 1750;

const int XKB_KEY_Cyrillic_ve = 1751;

const int XKB_KEY_Cyrillic_softsign = 1752;

const int XKB_KEY_Cyrillic_yeru = 1753;

const int XKB_KEY_Cyrillic_ze = 1754;

const int XKB_KEY_Cyrillic_sha = 1755;

const int XKB_KEY_Cyrillic_e = 1756;

const int XKB_KEY_Cyrillic_shcha = 1757;

const int XKB_KEY_Cyrillic_che = 1758;

const int XKB_KEY_Cyrillic_hardsign = 1759;

const int XKB_KEY_Cyrillic_YU = 1760;

const int XKB_KEY_Cyrillic_A = 1761;

const int XKB_KEY_Cyrillic_BE = 1762;

const int XKB_KEY_Cyrillic_TSE = 1763;

const int XKB_KEY_Cyrillic_DE = 1764;

const int XKB_KEY_Cyrillic_IE = 1765;

const int XKB_KEY_Cyrillic_EF = 1766;

const int XKB_KEY_Cyrillic_GHE = 1767;

const int XKB_KEY_Cyrillic_HA = 1768;

const int XKB_KEY_Cyrillic_I = 1769;

const int XKB_KEY_Cyrillic_SHORTI = 1770;

const int XKB_KEY_Cyrillic_KA = 1771;

const int XKB_KEY_Cyrillic_EL = 1772;

const int XKB_KEY_Cyrillic_EM = 1773;

const int XKB_KEY_Cyrillic_EN = 1774;

const int XKB_KEY_Cyrillic_O = 1775;

const int XKB_KEY_Cyrillic_PE = 1776;

const int XKB_KEY_Cyrillic_YA = 1777;

const int XKB_KEY_Cyrillic_ER = 1778;

const int XKB_KEY_Cyrillic_ES = 1779;

const int XKB_KEY_Cyrillic_TE = 1780;

const int XKB_KEY_Cyrillic_U = 1781;

const int XKB_KEY_Cyrillic_ZHE = 1782;

const int XKB_KEY_Cyrillic_VE = 1783;

const int XKB_KEY_Cyrillic_SOFTSIGN = 1784;

const int XKB_KEY_Cyrillic_YERU = 1785;

const int XKB_KEY_Cyrillic_ZE = 1786;

const int XKB_KEY_Cyrillic_SHA = 1787;

const int XKB_KEY_Cyrillic_E = 1788;

const int XKB_KEY_Cyrillic_SHCHA = 1789;

const int XKB_KEY_Cyrillic_CHE = 1790;

const int XKB_KEY_Cyrillic_HARDSIGN = 1791;

const int XKB_KEY_Greek_ALPHAaccent = 1953;

const int XKB_KEY_Greek_EPSILONaccent = 1954;

const int XKB_KEY_Greek_ETAaccent = 1955;

const int XKB_KEY_Greek_IOTAaccent = 1956;

const int XKB_KEY_Greek_IOTAdieresis = 1957;

const int XKB_KEY_Greek_IOTAdiaeresis = 1957;

const int XKB_KEY_Greek_OMICRONaccent = 1959;

const int XKB_KEY_Greek_UPSILONaccent = 1960;

const int XKB_KEY_Greek_UPSILONdieresis = 1961;

const int XKB_KEY_Greek_OMEGAaccent = 1963;

const int XKB_KEY_Greek_accentdieresis = 1966;

const int XKB_KEY_Greek_horizbar = 1967;

const int XKB_KEY_Greek_alphaaccent = 1969;

const int XKB_KEY_Greek_epsilonaccent = 1970;

const int XKB_KEY_Greek_etaaccent = 1971;

const int XKB_KEY_Greek_iotaaccent = 1972;

const int XKB_KEY_Greek_iotadieresis = 1973;

const int XKB_KEY_Greek_iotaaccentdieresis = 1974;

const int XKB_KEY_Greek_omicronaccent = 1975;

const int XKB_KEY_Greek_upsilonaccent = 1976;

const int XKB_KEY_Greek_upsilondieresis = 1977;

const int XKB_KEY_Greek_upsilonaccentdieresis = 1978;

const int XKB_KEY_Greek_omegaaccent = 1979;

const int XKB_KEY_Greek_ALPHA = 1985;

const int XKB_KEY_Greek_BETA = 1986;

const int XKB_KEY_Greek_GAMMA = 1987;

const int XKB_KEY_Greek_DELTA = 1988;

const int XKB_KEY_Greek_EPSILON = 1989;

const int XKB_KEY_Greek_ZETA = 1990;

const int XKB_KEY_Greek_ETA = 1991;

const int XKB_KEY_Greek_THETA = 1992;

const int XKB_KEY_Greek_IOTA = 1993;

const int XKB_KEY_Greek_KAPPA = 1994;

const int XKB_KEY_Greek_LAMDA = 1995;

const int XKB_KEY_Greek_LAMBDA = 1995;

const int XKB_KEY_Greek_MU = 1996;

const int XKB_KEY_Greek_NU = 1997;

const int XKB_KEY_Greek_XI = 1998;

const int XKB_KEY_Greek_OMICRON = 1999;

const int XKB_KEY_Greek_PI = 2000;

const int XKB_KEY_Greek_RHO = 2001;

const int XKB_KEY_Greek_SIGMA = 2002;

const int XKB_KEY_Greek_TAU = 2004;

const int XKB_KEY_Greek_UPSILON = 2005;

const int XKB_KEY_Greek_PHI = 2006;

const int XKB_KEY_Greek_CHI = 2007;

const int XKB_KEY_Greek_PSI = 2008;

const int XKB_KEY_Greek_OMEGA = 2009;

const int XKB_KEY_Greek_alpha = 2017;

const int XKB_KEY_Greek_beta = 2018;

const int XKB_KEY_Greek_gamma = 2019;

const int XKB_KEY_Greek_delta = 2020;

const int XKB_KEY_Greek_epsilon = 2021;

const int XKB_KEY_Greek_zeta = 2022;

const int XKB_KEY_Greek_eta = 2023;

const int XKB_KEY_Greek_theta = 2024;

const int XKB_KEY_Greek_iota = 2025;

const int XKB_KEY_Greek_kappa = 2026;

const int XKB_KEY_Greek_lamda = 2027;

const int XKB_KEY_Greek_lambda = 2027;

const int XKB_KEY_Greek_mu = 2028;

const int XKB_KEY_Greek_nu = 2029;

const int XKB_KEY_Greek_xi = 2030;

const int XKB_KEY_Greek_omicron = 2031;

const int XKB_KEY_Greek_pi = 2032;

const int XKB_KEY_Greek_rho = 2033;

const int XKB_KEY_Greek_sigma = 2034;

const int XKB_KEY_Greek_finalsmallsigma = 2035;

const int XKB_KEY_Greek_tau = 2036;

const int XKB_KEY_Greek_upsilon = 2037;

const int XKB_KEY_Greek_phi = 2038;

const int XKB_KEY_Greek_chi = 2039;

const int XKB_KEY_Greek_psi = 2040;

const int XKB_KEY_Greek_omega = 2041;

const int XKB_KEY_Greek_switch = 65406;

const int XKB_KEY_leftradical = 2209;

const int XKB_KEY_topleftradical = 2210;

const int XKB_KEY_horizconnector = 2211;

const int XKB_KEY_topintegral = 2212;

const int XKB_KEY_botintegral = 2213;

const int XKB_KEY_vertconnector = 2214;

const int XKB_KEY_topleftsqbracket = 2215;

const int XKB_KEY_botleftsqbracket = 2216;

const int XKB_KEY_toprightsqbracket = 2217;

const int XKB_KEY_botrightsqbracket = 2218;

const int XKB_KEY_topleftparens = 2219;

const int XKB_KEY_botleftparens = 2220;

const int XKB_KEY_toprightparens = 2221;

const int XKB_KEY_botrightparens = 2222;

const int XKB_KEY_leftmiddlecurlybrace = 2223;

const int XKB_KEY_rightmiddlecurlybrace = 2224;

const int XKB_KEY_topleftsummation = 2225;

const int XKB_KEY_botleftsummation = 2226;

const int XKB_KEY_topvertsummationconnector = 2227;

const int XKB_KEY_botvertsummationconnector = 2228;

const int XKB_KEY_toprightsummation = 2229;

const int XKB_KEY_botrightsummation = 2230;

const int XKB_KEY_rightmiddlesummation = 2231;

const int XKB_KEY_lessthanequal = 2236;

const int XKB_KEY_notequal = 2237;

const int XKB_KEY_greaterthanequal = 2238;

const int XKB_KEY_integral = 2239;

const int XKB_KEY_therefore = 2240;

const int XKB_KEY_variation = 2241;

const int XKB_KEY_infinity = 2242;

const int XKB_KEY_nabla = 2245;

const int XKB_KEY_approximate = 2248;

const int XKB_KEY_similarequal = 2249;

const int XKB_KEY_ifonlyif = 2253;

const int XKB_KEY_implies = 2254;

const int XKB_KEY_identical = 2255;

const int XKB_KEY_radical = 2262;

const int XKB_KEY_includedin = 2266;

const int XKB_KEY_includes = 2267;

const int XKB_KEY_intersection = 2268;

const int XKB_KEY_union = 2269;

const int XKB_KEY_logicaland = 2270;

const int XKB_KEY_logicalor = 2271;

const int XKB_KEY_partialderivative = 2287;

const int XKB_KEY_function = 2294;

const int XKB_KEY_leftarrow = 2299;

const int XKB_KEY_uparrow = 2300;

const int XKB_KEY_rightarrow = 2301;

const int XKB_KEY_downarrow = 2302;

const int XKB_KEY_blank = 2527;

const int XKB_KEY_soliddiamond = 2528;

const int XKB_KEY_checkerboard = 2529;

const int XKB_KEY_ht = 2530;

const int XKB_KEY_ff = 2531;

const int XKB_KEY_cr = 2532;

const int XKB_KEY_lf = 2533;

const int XKB_KEY_nl = 2536;

const int XKB_KEY_vt = 2537;

const int XKB_KEY_lowrightcorner = 2538;

const int XKB_KEY_uprightcorner = 2539;

const int XKB_KEY_upleftcorner = 2540;

const int XKB_KEY_lowleftcorner = 2541;

const int XKB_KEY_crossinglines = 2542;

const int XKB_KEY_horizlinescan1 = 2543;

const int XKB_KEY_horizlinescan3 = 2544;

const int XKB_KEY_horizlinescan5 = 2545;

const int XKB_KEY_horizlinescan7 = 2546;

const int XKB_KEY_horizlinescan9 = 2547;

const int XKB_KEY_leftt = 2548;

const int XKB_KEY_rightt = 2549;

const int XKB_KEY_bott = 2550;

const int XKB_KEY_topt = 2551;

const int XKB_KEY_vertbar = 2552;

const int XKB_KEY_emspace = 2721;

const int XKB_KEY_enspace = 2722;

const int XKB_KEY_em3space = 2723;

const int XKB_KEY_em4space = 2724;

const int XKB_KEY_digitspace = 2725;

const int XKB_KEY_punctspace = 2726;

const int XKB_KEY_thinspace = 2727;

const int XKB_KEY_hairspace = 2728;

const int XKB_KEY_emdash = 2729;

const int XKB_KEY_endash = 2730;

const int XKB_KEY_signifblank = 2732;

const int XKB_KEY_ellipsis = 2734;

const int XKB_KEY_doubbaselinedot = 2735;

const int XKB_KEY_onethird = 2736;

const int XKB_KEY_twothirds = 2737;

const int XKB_KEY_onefifth = 2738;

const int XKB_KEY_twofifths = 2739;

const int XKB_KEY_threefifths = 2740;

const int XKB_KEY_fourfifths = 2741;

const int XKB_KEY_onesixth = 2742;

const int XKB_KEY_fivesixths = 2743;

const int XKB_KEY_careof = 2744;

const int XKB_KEY_figdash = 2747;

const int XKB_KEY_leftanglebracket = 2748;

const int XKB_KEY_decimalpoint = 2749;

const int XKB_KEY_rightanglebracket = 2750;

const int XKB_KEY_marker = 2751;

const int XKB_KEY_oneeighth = 2755;

const int XKB_KEY_threeeighths = 2756;

const int XKB_KEY_fiveeighths = 2757;

const int XKB_KEY_seveneighths = 2758;

const int XKB_KEY_trademark = 2761;

const int XKB_KEY_signaturemark = 2762;

const int XKB_KEY_trademarkincircle = 2763;

const int XKB_KEY_leftopentriangle = 2764;

const int XKB_KEY_rightopentriangle = 2765;

const int XKB_KEY_emopencircle = 2766;

const int XKB_KEY_emopenrectangle = 2767;

const int XKB_KEY_leftsinglequotemark = 2768;

const int XKB_KEY_rightsinglequotemark = 2769;

const int XKB_KEY_leftdoublequotemark = 2770;

const int XKB_KEY_rightdoublequotemark = 2771;

const int XKB_KEY_prescription = 2772;

const int XKB_KEY_permille = 2773;

const int XKB_KEY_minutes = 2774;

const int XKB_KEY_seconds = 2775;

const int XKB_KEY_latincross = 2777;

const int XKB_KEY_hexagram = 2778;

const int XKB_KEY_filledrectbullet = 2779;

const int XKB_KEY_filledlefttribullet = 2780;

const int XKB_KEY_filledrighttribullet = 2781;

const int XKB_KEY_emfilledcircle = 2782;

const int XKB_KEY_emfilledrect = 2783;

const int XKB_KEY_enopencircbullet = 2784;

const int XKB_KEY_enopensquarebullet = 2785;

const int XKB_KEY_openrectbullet = 2786;

const int XKB_KEY_opentribulletup = 2787;

const int XKB_KEY_opentribulletdown = 2788;

const int XKB_KEY_openstar = 2789;

const int XKB_KEY_enfilledcircbullet = 2790;

const int XKB_KEY_enfilledsqbullet = 2791;

const int XKB_KEY_filledtribulletup = 2792;

const int XKB_KEY_filledtribulletdown = 2793;

const int XKB_KEY_leftpointer = 2794;

const int XKB_KEY_rightpointer = 2795;

const int XKB_KEY_club = 2796;

const int XKB_KEY_diamond = 2797;

const int XKB_KEY_heart = 2798;

const int XKB_KEY_maltesecross = 2800;

const int XKB_KEY_dagger = 2801;

const int XKB_KEY_doubledagger = 2802;

const int XKB_KEY_checkmark = 2803;

const int XKB_KEY_ballotcross = 2804;

const int XKB_KEY_musicalsharp = 2805;

const int XKB_KEY_musicalflat = 2806;

const int XKB_KEY_malesymbol = 2807;

const int XKB_KEY_femalesymbol = 2808;

const int XKB_KEY_telephone = 2809;

const int XKB_KEY_telephonerecorder = 2810;

const int XKB_KEY_phonographcopyright = 2811;

const int XKB_KEY_caret = 2812;

const int XKB_KEY_singlelowquotemark = 2813;

const int XKB_KEY_doublelowquotemark = 2814;

const int XKB_KEY_cursor = 2815;

const int XKB_KEY_leftcaret = 2979;

const int XKB_KEY_rightcaret = 2982;

const int XKB_KEY_downcaret = 2984;

const int XKB_KEY_upcaret = 2985;

const int XKB_KEY_overbar = 3008;

const int XKB_KEY_downtack = 3010;

const int XKB_KEY_upshoe = 3011;

const int XKB_KEY_downstile = 3012;

const int XKB_KEY_underbar = 3014;

const int XKB_KEY_jot = 3018;

const int XKB_KEY_quad = 3020;

const int XKB_KEY_uptack = 3022;

const int XKB_KEY_circle = 3023;

const int XKB_KEY_upstile = 3027;

const int XKB_KEY_downshoe = 3030;

const int XKB_KEY_rightshoe = 3032;

const int XKB_KEY_leftshoe = 3034;

const int XKB_KEY_lefttack = 3036;

const int XKB_KEY_righttack = 3068;

const int XKB_KEY_hebrew_doublelowline = 3295;

const int XKB_KEY_hebrew_aleph = 3296;

const int XKB_KEY_hebrew_bet = 3297;

const int XKB_KEY_hebrew_beth = 3297;

const int XKB_KEY_hebrew_gimel = 3298;

const int XKB_KEY_hebrew_gimmel = 3298;

const int XKB_KEY_hebrew_dalet = 3299;

const int XKB_KEY_hebrew_daleth = 3299;

const int XKB_KEY_hebrew_he = 3300;

const int XKB_KEY_hebrew_waw = 3301;

const int XKB_KEY_hebrew_zain = 3302;

const int XKB_KEY_hebrew_zayin = 3302;

const int XKB_KEY_hebrew_chet = 3303;

const int XKB_KEY_hebrew_het = 3303;

const int XKB_KEY_hebrew_tet = 3304;

const int XKB_KEY_hebrew_teth = 3304;

const int XKB_KEY_hebrew_yod = 3305;

const int XKB_KEY_hebrew_finalkaph = 3306;

const int XKB_KEY_hebrew_kaph = 3307;

const int XKB_KEY_hebrew_lamed = 3308;

const int XKB_KEY_hebrew_finalmem = 3309;

const int XKB_KEY_hebrew_mem = 3310;

const int XKB_KEY_hebrew_finalnun = 3311;

const int XKB_KEY_hebrew_nun = 3312;

const int XKB_KEY_hebrew_samech = 3313;

const int XKB_KEY_hebrew_samekh = 3313;

const int XKB_KEY_hebrew_ayin = 3314;

const int XKB_KEY_hebrew_finalpe = 3315;

const int XKB_KEY_hebrew_pe = 3316;

const int XKB_KEY_hebrew_finalzade = 3317;

const int XKB_KEY_hebrew_finalzadi = 3317;

const int XKB_KEY_hebrew_zade = 3318;

const int XKB_KEY_hebrew_zadi = 3318;

const int XKB_KEY_hebrew_qoph = 3319;

const int XKB_KEY_hebrew_kuf = 3319;

const int XKB_KEY_hebrew_resh = 3320;

const int XKB_KEY_hebrew_shin = 3321;

const int XKB_KEY_hebrew_taw = 3322;

const int XKB_KEY_hebrew_taf = 3322;

const int XKB_KEY_Hebrew_switch = 65406;

const int XKB_KEY_Thai_kokai = 3489;

const int XKB_KEY_Thai_khokhai = 3490;

const int XKB_KEY_Thai_khokhuat = 3491;

const int XKB_KEY_Thai_khokhwai = 3492;

const int XKB_KEY_Thai_khokhon = 3493;

const int XKB_KEY_Thai_khorakhang = 3494;

const int XKB_KEY_Thai_ngongu = 3495;

const int XKB_KEY_Thai_chochan = 3496;

const int XKB_KEY_Thai_choching = 3497;

const int XKB_KEY_Thai_chochang = 3498;

const int XKB_KEY_Thai_soso = 3499;

const int XKB_KEY_Thai_chochoe = 3500;

const int XKB_KEY_Thai_yoying = 3501;

const int XKB_KEY_Thai_dochada = 3502;

const int XKB_KEY_Thai_topatak = 3503;

const int XKB_KEY_Thai_thothan = 3504;

const int XKB_KEY_Thai_thonangmontho = 3505;

const int XKB_KEY_Thai_thophuthao = 3506;

const int XKB_KEY_Thai_nonen = 3507;

const int XKB_KEY_Thai_dodek = 3508;

const int XKB_KEY_Thai_totao = 3509;

const int XKB_KEY_Thai_thothung = 3510;

const int XKB_KEY_Thai_thothahan = 3511;

const int XKB_KEY_Thai_thothong = 3512;

const int XKB_KEY_Thai_nonu = 3513;

const int XKB_KEY_Thai_bobaimai = 3514;

const int XKB_KEY_Thai_popla = 3515;

const int XKB_KEY_Thai_phophung = 3516;

const int XKB_KEY_Thai_fofa = 3517;

const int XKB_KEY_Thai_phophan = 3518;

const int XKB_KEY_Thai_fofan = 3519;

const int XKB_KEY_Thai_phosamphao = 3520;

const int XKB_KEY_Thai_moma = 3521;

const int XKB_KEY_Thai_yoyak = 3522;

const int XKB_KEY_Thai_rorua = 3523;

const int XKB_KEY_Thai_ru = 3524;

const int XKB_KEY_Thai_loling = 3525;

const int XKB_KEY_Thai_lu = 3526;

const int XKB_KEY_Thai_wowaen = 3527;

const int XKB_KEY_Thai_sosala = 3528;

const int XKB_KEY_Thai_sorusi = 3529;

const int XKB_KEY_Thai_sosua = 3530;

const int XKB_KEY_Thai_hohip = 3531;

const int XKB_KEY_Thai_lochula = 3532;

const int XKB_KEY_Thai_oang = 3533;

const int XKB_KEY_Thai_honokhuk = 3534;

const int XKB_KEY_Thai_paiyannoi = 3535;

const int XKB_KEY_Thai_saraa = 3536;

const int XKB_KEY_Thai_maihanakat = 3537;

const int XKB_KEY_Thai_saraaa = 3538;

const int XKB_KEY_Thai_saraam = 3539;

const int XKB_KEY_Thai_sarai = 3540;

const int XKB_KEY_Thai_saraii = 3541;

const int XKB_KEY_Thai_saraue = 3542;

const int XKB_KEY_Thai_sarauee = 3543;

const int XKB_KEY_Thai_sarau = 3544;

const int XKB_KEY_Thai_sarauu = 3545;

const int XKB_KEY_Thai_phinthu = 3546;

const int XKB_KEY_Thai_maihanakat_maitho = 3550;

const int XKB_KEY_Thai_baht = 3551;

const int XKB_KEY_Thai_sarae = 3552;

const int XKB_KEY_Thai_saraae = 3553;

const int XKB_KEY_Thai_sarao = 3554;

const int XKB_KEY_Thai_saraaimaimuan = 3555;

const int XKB_KEY_Thai_saraaimaimalai = 3556;

const int XKB_KEY_Thai_lakkhangyao = 3557;

const int XKB_KEY_Thai_maiyamok = 3558;

const int XKB_KEY_Thai_maitaikhu = 3559;

const int XKB_KEY_Thai_maiek = 3560;

const int XKB_KEY_Thai_maitho = 3561;

const int XKB_KEY_Thai_maitri = 3562;

const int XKB_KEY_Thai_maichattawa = 3563;

const int XKB_KEY_Thai_thanthakhat = 3564;

const int XKB_KEY_Thai_nikhahit = 3565;

const int XKB_KEY_Thai_leksun = 3568;

const int XKB_KEY_Thai_leknung = 3569;

const int XKB_KEY_Thai_leksong = 3570;

const int XKB_KEY_Thai_leksam = 3571;

const int XKB_KEY_Thai_leksi = 3572;

const int XKB_KEY_Thai_lekha = 3573;

const int XKB_KEY_Thai_lekhok = 3574;

const int XKB_KEY_Thai_lekchet = 3575;

const int XKB_KEY_Thai_lekpaet = 3576;

const int XKB_KEY_Thai_lekkao = 3577;

const int XKB_KEY_Hangul = 65329;

const int XKB_KEY_Hangul_Start = 65330;

const int XKB_KEY_Hangul_End = 65331;

const int XKB_KEY_Hangul_Hanja = 65332;

const int XKB_KEY_Hangul_Jamo = 65333;

const int XKB_KEY_Hangul_Romaja = 65334;

const int XKB_KEY_Hangul_Codeinput = 65335;

const int XKB_KEY_Hangul_Jeonja = 65336;

const int XKB_KEY_Hangul_Banja = 65337;

const int XKB_KEY_Hangul_PreHanja = 65338;

const int XKB_KEY_Hangul_PostHanja = 65339;

const int XKB_KEY_Hangul_SingleCandidate = 65340;

const int XKB_KEY_Hangul_MultipleCandidate = 65341;

const int XKB_KEY_Hangul_PreviousCandidate = 65342;

const int XKB_KEY_Hangul_Special = 65343;

const int XKB_KEY_Hangul_switch = 65406;

const int XKB_KEY_Hangul_Kiyeog = 3745;

const int XKB_KEY_Hangul_SsangKiyeog = 3746;

const int XKB_KEY_Hangul_KiyeogSios = 3747;

const int XKB_KEY_Hangul_Nieun = 3748;

const int XKB_KEY_Hangul_NieunJieuj = 3749;

const int XKB_KEY_Hangul_NieunHieuh = 3750;

const int XKB_KEY_Hangul_Dikeud = 3751;

const int XKB_KEY_Hangul_SsangDikeud = 3752;

const int XKB_KEY_Hangul_Rieul = 3753;

const int XKB_KEY_Hangul_RieulKiyeog = 3754;

const int XKB_KEY_Hangul_RieulMieum = 3755;

const int XKB_KEY_Hangul_RieulPieub = 3756;

const int XKB_KEY_Hangul_RieulSios = 3757;

const int XKB_KEY_Hangul_RieulTieut = 3758;

const int XKB_KEY_Hangul_RieulPhieuf = 3759;

const int XKB_KEY_Hangul_RieulHieuh = 3760;

const int XKB_KEY_Hangul_Mieum = 3761;

const int XKB_KEY_Hangul_Pieub = 3762;

const int XKB_KEY_Hangul_SsangPieub = 3763;

const int XKB_KEY_Hangul_PieubSios = 3764;

const int XKB_KEY_Hangul_Sios = 3765;

const int XKB_KEY_Hangul_SsangSios = 3766;

const int XKB_KEY_Hangul_Ieung = 3767;

const int XKB_KEY_Hangul_Jieuj = 3768;

const int XKB_KEY_Hangul_SsangJieuj = 3769;

const int XKB_KEY_Hangul_Cieuc = 3770;

const int XKB_KEY_Hangul_Khieuq = 3771;

const int XKB_KEY_Hangul_Tieut = 3772;

const int XKB_KEY_Hangul_Phieuf = 3773;

const int XKB_KEY_Hangul_Hieuh = 3774;

const int XKB_KEY_Hangul_A = 3775;

const int XKB_KEY_Hangul_AE = 3776;

const int XKB_KEY_Hangul_YA = 3777;

const int XKB_KEY_Hangul_YAE = 3778;

const int XKB_KEY_Hangul_EO = 3779;

const int XKB_KEY_Hangul_E = 3780;

const int XKB_KEY_Hangul_YEO = 3781;

const int XKB_KEY_Hangul_YE = 3782;

const int XKB_KEY_Hangul_O = 3783;

const int XKB_KEY_Hangul_WA = 3784;

const int XKB_KEY_Hangul_WAE = 3785;

const int XKB_KEY_Hangul_OE = 3786;

const int XKB_KEY_Hangul_YO = 3787;

const int XKB_KEY_Hangul_U = 3788;

const int XKB_KEY_Hangul_WEO = 3789;

const int XKB_KEY_Hangul_WE = 3790;

const int XKB_KEY_Hangul_WI = 3791;

const int XKB_KEY_Hangul_YU = 3792;

const int XKB_KEY_Hangul_EU = 3793;

const int XKB_KEY_Hangul_YI = 3794;

const int XKB_KEY_Hangul_I = 3795;

const int XKB_KEY_Hangul_J_Kiyeog = 3796;

const int XKB_KEY_Hangul_J_SsangKiyeog = 3797;

const int XKB_KEY_Hangul_J_KiyeogSios = 3798;

const int XKB_KEY_Hangul_J_Nieun = 3799;

const int XKB_KEY_Hangul_J_NieunJieuj = 3800;

const int XKB_KEY_Hangul_J_NieunHieuh = 3801;

const int XKB_KEY_Hangul_J_Dikeud = 3802;

const int XKB_KEY_Hangul_J_Rieul = 3803;

const int XKB_KEY_Hangul_J_RieulKiyeog = 3804;

const int XKB_KEY_Hangul_J_RieulMieum = 3805;

const int XKB_KEY_Hangul_J_RieulPieub = 3806;

const int XKB_KEY_Hangul_J_RieulSios = 3807;

const int XKB_KEY_Hangul_J_RieulTieut = 3808;

const int XKB_KEY_Hangul_J_RieulPhieuf = 3809;

const int XKB_KEY_Hangul_J_RieulHieuh = 3810;

const int XKB_KEY_Hangul_J_Mieum = 3811;

const int XKB_KEY_Hangul_J_Pieub = 3812;

const int XKB_KEY_Hangul_J_PieubSios = 3813;

const int XKB_KEY_Hangul_J_Sios = 3814;

const int XKB_KEY_Hangul_J_SsangSios = 3815;

const int XKB_KEY_Hangul_J_Ieung = 3816;

const int XKB_KEY_Hangul_J_Jieuj = 3817;

const int XKB_KEY_Hangul_J_Cieuc = 3818;

const int XKB_KEY_Hangul_J_Khieuq = 3819;

const int XKB_KEY_Hangul_J_Tieut = 3820;

const int XKB_KEY_Hangul_J_Phieuf = 3821;

const int XKB_KEY_Hangul_J_Hieuh = 3822;

const int XKB_KEY_Hangul_RieulYeorinHieuh = 3823;

const int XKB_KEY_Hangul_SunkyeongeumMieum = 3824;

const int XKB_KEY_Hangul_SunkyeongeumPieub = 3825;

const int XKB_KEY_Hangul_PanSios = 3826;

const int XKB_KEY_Hangul_KkogjiDalrinIeung = 3827;

const int XKB_KEY_Hangul_SunkyeongeumPhieuf = 3828;

const int XKB_KEY_Hangul_YeorinHieuh = 3829;

const int XKB_KEY_Hangul_AraeA = 3830;

const int XKB_KEY_Hangul_AraeAE = 3831;

const int XKB_KEY_Hangul_J_PanSios = 3832;

const int XKB_KEY_Hangul_J_KkogjiDalrinIeung = 3833;

const int XKB_KEY_Hangul_J_YeorinHieuh = 3834;

const int XKB_KEY_Korean_Won = 3839;

const int XKB_KEY_Armenian_ligature_ew = 16778631;

const int XKB_KEY_Armenian_full_stop = 16778633;

const int XKB_KEY_Armenian_verjaket = 16778633;

const int XKB_KEY_Armenian_separation_mark = 16778589;

const int XKB_KEY_Armenian_but = 16778589;

const int XKB_KEY_Armenian_hyphen = 16778634;

const int XKB_KEY_Armenian_yentamna = 16778634;

const int XKB_KEY_Armenian_exclam = 16778588;

const int XKB_KEY_Armenian_amanak = 16778588;

const int XKB_KEY_Armenian_accent = 16778587;

const int XKB_KEY_Armenian_shesht = 16778587;

const int XKB_KEY_Armenian_question = 16778590;

const int XKB_KEY_Armenian_paruyk = 16778590;

const int XKB_KEY_Armenian_AYB = 16778545;

const int XKB_KEY_Armenian_ayb = 16778593;

const int XKB_KEY_Armenian_BEN = 16778546;

const int XKB_KEY_Armenian_ben = 16778594;

const int XKB_KEY_Armenian_GIM = 16778547;

const int XKB_KEY_Armenian_gim = 16778595;

const int XKB_KEY_Armenian_DA = 16778548;

const int XKB_KEY_Armenian_da = 16778596;

const int XKB_KEY_Armenian_YECH = 16778549;

const int XKB_KEY_Armenian_yech = 16778597;

const int XKB_KEY_Armenian_ZA = 16778550;

const int XKB_KEY_Armenian_za = 16778598;

const int XKB_KEY_Armenian_E = 16778551;

const int XKB_KEY_Armenian_e = 16778599;

const int XKB_KEY_Armenian_AT = 16778552;

const int XKB_KEY_Armenian_at = 16778600;

const int XKB_KEY_Armenian_TO = 16778553;

const int XKB_KEY_Armenian_to = 16778601;

const int XKB_KEY_Armenian_ZHE = 16778554;

const int XKB_KEY_Armenian_zhe = 16778602;

const int XKB_KEY_Armenian_INI = 16778555;

const int XKB_KEY_Armenian_ini = 16778603;

const int XKB_KEY_Armenian_LYUN = 16778556;

const int XKB_KEY_Armenian_lyun = 16778604;

const int XKB_KEY_Armenian_KHE = 16778557;

const int XKB_KEY_Armenian_khe = 16778605;

const int XKB_KEY_Armenian_TSA = 16778558;

const int XKB_KEY_Armenian_tsa = 16778606;

const int XKB_KEY_Armenian_KEN = 16778559;

const int XKB_KEY_Armenian_ken = 16778607;

const int XKB_KEY_Armenian_HO = 16778560;

const int XKB_KEY_Armenian_ho = 16778608;

const int XKB_KEY_Armenian_DZA = 16778561;

const int XKB_KEY_Armenian_dza = 16778609;

const int XKB_KEY_Armenian_GHAT = 16778562;

const int XKB_KEY_Armenian_ghat = 16778610;

const int XKB_KEY_Armenian_TCHE = 16778563;

const int XKB_KEY_Armenian_tche = 16778611;

const int XKB_KEY_Armenian_MEN = 16778564;

const int XKB_KEY_Armenian_men = 16778612;

const int XKB_KEY_Armenian_HI = 16778565;

const int XKB_KEY_Armenian_hi = 16778613;

const int XKB_KEY_Armenian_NU = 16778566;

const int XKB_KEY_Armenian_nu = 16778614;

const int XKB_KEY_Armenian_SHA = 16778567;

const int XKB_KEY_Armenian_sha = 16778615;

const int XKB_KEY_Armenian_VO = 16778568;

const int XKB_KEY_Armenian_vo = 16778616;

const int XKB_KEY_Armenian_CHA = 16778569;

const int XKB_KEY_Armenian_cha = 16778617;

const int XKB_KEY_Armenian_PE = 16778570;

const int XKB_KEY_Armenian_pe = 16778618;

const int XKB_KEY_Armenian_JE = 16778571;

const int XKB_KEY_Armenian_je = 16778619;

const int XKB_KEY_Armenian_RA = 16778572;

const int XKB_KEY_Armenian_ra = 16778620;

const int XKB_KEY_Armenian_SE = 16778573;

const int XKB_KEY_Armenian_se = 16778621;

const int XKB_KEY_Armenian_VEV = 16778574;

const int XKB_KEY_Armenian_vev = 16778622;

const int XKB_KEY_Armenian_TYUN = 16778575;

const int XKB_KEY_Armenian_tyun = 16778623;

const int XKB_KEY_Armenian_RE = 16778576;

const int XKB_KEY_Armenian_re = 16778624;

const int XKB_KEY_Armenian_TSO = 16778577;

const int XKB_KEY_Armenian_tso = 16778625;

const int XKB_KEY_Armenian_VYUN = 16778578;

const int XKB_KEY_Armenian_vyun = 16778626;

const int XKB_KEY_Armenian_PYUR = 16778579;

const int XKB_KEY_Armenian_pyur = 16778627;

const int XKB_KEY_Armenian_KE = 16778580;

const int XKB_KEY_Armenian_ke = 16778628;

const int XKB_KEY_Armenian_O = 16778581;

const int XKB_KEY_Armenian_o = 16778629;

const int XKB_KEY_Armenian_FE = 16778582;

const int XKB_KEY_Armenian_fe = 16778630;

const int XKB_KEY_Armenian_apostrophe = 16778586;

const int XKB_KEY_Georgian_an = 16781520;

const int XKB_KEY_Georgian_ban = 16781521;

const int XKB_KEY_Georgian_gan = 16781522;

const int XKB_KEY_Georgian_don = 16781523;

const int XKB_KEY_Georgian_en = 16781524;

const int XKB_KEY_Georgian_vin = 16781525;

const int XKB_KEY_Georgian_zen = 16781526;

const int XKB_KEY_Georgian_tan = 16781527;

const int XKB_KEY_Georgian_in = 16781528;

const int XKB_KEY_Georgian_kan = 16781529;

const int XKB_KEY_Georgian_las = 16781530;

const int XKB_KEY_Georgian_man = 16781531;

const int XKB_KEY_Georgian_nar = 16781532;

const int XKB_KEY_Georgian_on = 16781533;

const int XKB_KEY_Georgian_par = 16781534;

const int XKB_KEY_Georgian_zhar = 16781535;

const int XKB_KEY_Georgian_rae = 16781536;

const int XKB_KEY_Georgian_san = 16781537;

const int XKB_KEY_Georgian_tar = 16781538;

const int XKB_KEY_Georgian_un = 16781539;

const int XKB_KEY_Georgian_phar = 16781540;

const int XKB_KEY_Georgian_khar = 16781541;

const int XKB_KEY_Georgian_ghan = 16781542;

const int XKB_KEY_Georgian_qar = 16781543;

const int XKB_KEY_Georgian_shin = 16781544;

const int XKB_KEY_Georgian_chin = 16781545;

const int XKB_KEY_Georgian_can = 16781546;

const int XKB_KEY_Georgian_jil = 16781547;

const int XKB_KEY_Georgian_cil = 16781548;

const int XKB_KEY_Georgian_char = 16781549;

const int XKB_KEY_Georgian_xan = 16781550;

const int XKB_KEY_Georgian_jhan = 16781551;

const int XKB_KEY_Georgian_hae = 16781552;

const int XKB_KEY_Georgian_he = 16781553;

const int XKB_KEY_Georgian_hie = 16781554;

const int XKB_KEY_Georgian_we = 16781555;

const int XKB_KEY_Georgian_har = 16781556;

const int XKB_KEY_Georgian_hoe = 16781557;

const int XKB_KEY_Georgian_fi = 16781558;

const int XKB_KEY_Xabovedot = 16785034;

const int XKB_KEY_Ibreve = 16777516;

const int XKB_KEY_Zstroke = 16777653;

const int XKB_KEY_Gcaron = 16777702;

const int XKB_KEY_Ocaron = 16777681;

const int XKB_KEY_Obarred = 16777631;

const int XKB_KEY_xabovedot = 16785035;

const int XKB_KEY_ibreve = 16777517;

const int XKB_KEY_zstroke = 16777654;

const int XKB_KEY_gcaron = 16777703;

const int XKB_KEY_ocaron = 16777682;

const int XKB_KEY_obarred = 16777845;

const int XKB_KEY_SCHWA = 16777615;

const int XKB_KEY_schwa = 16777817;

const int XKB_KEY_EZH = 16777655;

const int XKB_KEY_ezh = 16777874;

const int XKB_KEY_Lbelowdot = 16784950;

const int XKB_KEY_lbelowdot = 16784951;

const int XKB_KEY_Abelowdot = 16785056;

const int XKB_KEY_abelowdot = 16785057;

const int XKB_KEY_Ahook = 16785058;

const int XKB_KEY_ahook = 16785059;

const int XKB_KEY_Acircumflexacute = 16785060;

const int XKB_KEY_acircumflexacute = 16785061;

const int XKB_KEY_Acircumflexgrave = 16785062;

const int XKB_KEY_acircumflexgrave = 16785063;

const int XKB_KEY_Acircumflexhook = 16785064;

const int XKB_KEY_acircumflexhook = 16785065;

const int XKB_KEY_Acircumflextilde = 16785066;

const int XKB_KEY_acircumflextilde = 16785067;

const int XKB_KEY_Acircumflexbelowdot = 16785068;

const int XKB_KEY_acircumflexbelowdot = 16785069;

const int XKB_KEY_Abreveacute = 16785070;

const int XKB_KEY_abreveacute = 16785071;

const int XKB_KEY_Abrevegrave = 16785072;

const int XKB_KEY_abrevegrave = 16785073;

const int XKB_KEY_Abrevehook = 16785074;

const int XKB_KEY_abrevehook = 16785075;

const int XKB_KEY_Abrevetilde = 16785076;

const int XKB_KEY_abrevetilde = 16785077;

const int XKB_KEY_Abrevebelowdot = 16785078;

const int XKB_KEY_abrevebelowdot = 16785079;

const int XKB_KEY_Ebelowdot = 16785080;

const int XKB_KEY_ebelowdot = 16785081;

const int XKB_KEY_Ehook = 16785082;

const int XKB_KEY_ehook = 16785083;

const int XKB_KEY_Etilde = 16785084;

const int XKB_KEY_etilde = 16785085;

const int XKB_KEY_Ecircumflexacute = 16785086;

const int XKB_KEY_ecircumflexacute = 16785087;

const int XKB_KEY_Ecircumflexgrave = 16785088;

const int XKB_KEY_ecircumflexgrave = 16785089;

const int XKB_KEY_Ecircumflexhook = 16785090;

const int XKB_KEY_ecircumflexhook = 16785091;

const int XKB_KEY_Ecircumflextilde = 16785092;

const int XKB_KEY_ecircumflextilde = 16785093;

const int XKB_KEY_Ecircumflexbelowdot = 16785094;

const int XKB_KEY_ecircumflexbelowdot = 16785095;

const int XKB_KEY_Ihook = 16785096;

const int XKB_KEY_ihook = 16785097;

const int XKB_KEY_Ibelowdot = 16785098;

const int XKB_KEY_ibelowdot = 16785099;

const int XKB_KEY_Obelowdot = 16785100;

const int XKB_KEY_obelowdot = 16785101;

const int XKB_KEY_Ohook = 16785102;

const int XKB_KEY_ohook = 16785103;

const int XKB_KEY_Ocircumflexacute = 16785104;

const int XKB_KEY_ocircumflexacute = 16785105;

const int XKB_KEY_Ocircumflexgrave = 16785106;

const int XKB_KEY_ocircumflexgrave = 16785107;

const int XKB_KEY_Ocircumflexhook = 16785108;

const int XKB_KEY_ocircumflexhook = 16785109;

const int XKB_KEY_Ocircumflextilde = 16785110;

const int XKB_KEY_ocircumflextilde = 16785111;

const int XKB_KEY_Ocircumflexbelowdot = 16785112;

const int XKB_KEY_ocircumflexbelowdot = 16785113;

const int XKB_KEY_Ohornacute = 16785114;

const int XKB_KEY_ohornacute = 16785115;

const int XKB_KEY_Ohorngrave = 16785116;

const int XKB_KEY_ohorngrave = 16785117;

const int XKB_KEY_Ohornhook = 16785118;

const int XKB_KEY_ohornhook = 16785119;

const int XKB_KEY_Ohorntilde = 16785120;

const int XKB_KEY_ohorntilde = 16785121;

const int XKB_KEY_Ohornbelowdot = 16785122;

const int XKB_KEY_ohornbelowdot = 16785123;

const int XKB_KEY_Ubelowdot = 16785124;

const int XKB_KEY_ubelowdot = 16785125;

const int XKB_KEY_Uhook = 16785126;

const int XKB_KEY_uhook = 16785127;

const int XKB_KEY_Uhornacute = 16785128;

const int XKB_KEY_uhornacute = 16785129;

const int XKB_KEY_Uhorngrave = 16785130;

const int XKB_KEY_uhorngrave = 16785131;

const int XKB_KEY_Uhornhook = 16785132;

const int XKB_KEY_uhornhook = 16785133;

const int XKB_KEY_Uhorntilde = 16785134;

const int XKB_KEY_uhorntilde = 16785135;

const int XKB_KEY_Uhornbelowdot = 16785136;

const int XKB_KEY_uhornbelowdot = 16785137;

const int XKB_KEY_Ybelowdot = 16785140;

const int XKB_KEY_ybelowdot = 16785141;

const int XKB_KEY_Yhook = 16785142;

const int XKB_KEY_yhook = 16785143;

const int XKB_KEY_Ytilde = 16785144;

const int XKB_KEY_ytilde = 16785145;

const int XKB_KEY_Ohorn = 16777632;

const int XKB_KEY_ohorn = 16777633;

const int XKB_KEY_Uhorn = 16777647;

const int XKB_KEY_uhorn = 16777648;

const int XKB_KEY_combining_tilde = 16777987;

const int XKB_KEY_combining_grave = 16777984;

const int XKB_KEY_combining_acute = 16777985;

const int XKB_KEY_combining_hook = 16777993;

const int XKB_KEY_combining_belowdot = 16778019;

const int XKB_KEY_EcuSign = 16785568;

const int XKB_KEY_ColonSign = 16785569;

const int XKB_KEY_CruzeiroSign = 16785570;

const int XKB_KEY_FFrancSign = 16785571;

const int XKB_KEY_LiraSign = 16785572;

const int XKB_KEY_MillSign = 16785573;

const int XKB_KEY_NairaSign = 16785574;

const int XKB_KEY_PesetaSign = 16785575;

const int XKB_KEY_RupeeSign = 16785576;

const int XKB_KEY_WonSign = 16785577;

const int XKB_KEY_NewSheqelSign = 16785578;

const int XKB_KEY_DongSign = 16785579;

const int XKB_KEY_EuroSign = 8364;

const int XKB_KEY_zerosuperior = 16785520;

const int XKB_KEY_foursuperior = 16785524;

const int XKB_KEY_fivesuperior = 16785525;

const int XKB_KEY_sixsuperior = 16785526;

const int XKB_KEY_sevensuperior = 16785527;

const int XKB_KEY_eightsuperior = 16785528;

const int XKB_KEY_ninesuperior = 16785529;

const int XKB_KEY_zerosubscript = 16785536;

const int XKB_KEY_onesubscript = 16785537;

const int XKB_KEY_twosubscript = 16785538;

const int XKB_KEY_threesubscript = 16785539;

const int XKB_KEY_foursubscript = 16785540;

const int XKB_KEY_fivesubscript = 16785541;

const int XKB_KEY_sixsubscript = 16785542;

const int XKB_KEY_sevensubscript = 16785543;

const int XKB_KEY_eightsubscript = 16785544;

const int XKB_KEY_ninesubscript = 16785545;

const int XKB_KEY_partdifferential = 16785922;

const int XKB_KEY_emptyset = 16785925;

const int XKB_KEY_elementof = 16785928;

const int XKB_KEY_notelementof = 16785929;

const int XKB_KEY_containsas = 16785931;

const int XKB_KEY_squareroot = 16785946;

const int XKB_KEY_cuberoot = 16785947;

const int XKB_KEY_fourthroot = 16785948;

const int XKB_KEY_dintegral = 16785964;

const int XKB_KEY_tintegral = 16785965;

const int XKB_KEY_because = 16785973;

const int XKB_KEY_approxeq = 16785992;

const int XKB_KEY_notapproxeq = 16785991;

const int XKB_KEY_notidentical = 16786018;

const int XKB_KEY_stricteq = 16786019;

const int XKB_KEY_braille_dot_1 = 65521;

const int XKB_KEY_braille_dot_2 = 65522;

const int XKB_KEY_braille_dot_3 = 65523;

const int XKB_KEY_braille_dot_4 = 65524;

const int XKB_KEY_braille_dot_5 = 65525;

const int XKB_KEY_braille_dot_6 = 65526;

const int XKB_KEY_braille_dot_7 = 65527;

const int XKB_KEY_braille_dot_8 = 65528;

const int XKB_KEY_braille_dot_9 = 65529;

const int XKB_KEY_braille_dot_10 = 65530;

const int XKB_KEY_braille_blank = 16787456;

const int XKB_KEY_braille_dots_1 = 16787457;

const int XKB_KEY_braille_dots_2 = 16787458;

const int XKB_KEY_braille_dots_12 = 16787459;

const int XKB_KEY_braille_dots_3 = 16787460;

const int XKB_KEY_braille_dots_13 = 16787461;

const int XKB_KEY_braille_dots_23 = 16787462;

const int XKB_KEY_braille_dots_123 = 16787463;

const int XKB_KEY_braille_dots_4 = 16787464;

const int XKB_KEY_braille_dots_14 = 16787465;

const int XKB_KEY_braille_dots_24 = 16787466;

const int XKB_KEY_braille_dots_124 = 16787467;

const int XKB_KEY_braille_dots_34 = 16787468;

const int XKB_KEY_braille_dots_134 = 16787469;

const int XKB_KEY_braille_dots_234 = 16787470;

const int XKB_KEY_braille_dots_1234 = 16787471;

const int XKB_KEY_braille_dots_5 = 16787472;

const int XKB_KEY_braille_dots_15 = 16787473;

const int XKB_KEY_braille_dots_25 = 16787474;

const int XKB_KEY_braille_dots_125 = 16787475;

const int XKB_KEY_braille_dots_35 = 16787476;

const int XKB_KEY_braille_dots_135 = 16787477;

const int XKB_KEY_braille_dots_235 = 16787478;

const int XKB_KEY_braille_dots_1235 = 16787479;

const int XKB_KEY_braille_dots_45 = 16787480;

const int XKB_KEY_braille_dots_145 = 16787481;

const int XKB_KEY_braille_dots_245 = 16787482;

const int XKB_KEY_braille_dots_1245 = 16787483;

const int XKB_KEY_braille_dots_345 = 16787484;

const int XKB_KEY_braille_dots_1345 = 16787485;

const int XKB_KEY_braille_dots_2345 = 16787486;

const int XKB_KEY_braille_dots_12345 = 16787487;

const int XKB_KEY_braille_dots_6 = 16787488;

const int XKB_KEY_braille_dots_16 = 16787489;

const int XKB_KEY_braille_dots_26 = 16787490;

const int XKB_KEY_braille_dots_126 = 16787491;

const int XKB_KEY_braille_dots_36 = 16787492;

const int XKB_KEY_braille_dots_136 = 16787493;

const int XKB_KEY_braille_dots_236 = 16787494;

const int XKB_KEY_braille_dots_1236 = 16787495;

const int XKB_KEY_braille_dots_46 = 16787496;

const int XKB_KEY_braille_dots_146 = 16787497;

const int XKB_KEY_braille_dots_246 = 16787498;

const int XKB_KEY_braille_dots_1246 = 16787499;

const int XKB_KEY_braille_dots_346 = 16787500;

const int XKB_KEY_braille_dots_1346 = 16787501;

const int XKB_KEY_braille_dots_2346 = 16787502;

const int XKB_KEY_braille_dots_12346 = 16787503;

const int XKB_KEY_braille_dots_56 = 16787504;

const int XKB_KEY_braille_dots_156 = 16787505;

const int XKB_KEY_braille_dots_256 = 16787506;

const int XKB_KEY_braille_dots_1256 = 16787507;

const int XKB_KEY_braille_dots_356 = 16787508;

const int XKB_KEY_braille_dots_1356 = 16787509;

const int XKB_KEY_braille_dots_2356 = 16787510;

const int XKB_KEY_braille_dots_12356 = 16787511;

const int XKB_KEY_braille_dots_456 = 16787512;

const int XKB_KEY_braille_dots_1456 = 16787513;

const int XKB_KEY_braille_dots_2456 = 16787514;

const int XKB_KEY_braille_dots_12456 = 16787515;

const int XKB_KEY_braille_dots_3456 = 16787516;

const int XKB_KEY_braille_dots_13456 = 16787517;

const int XKB_KEY_braille_dots_23456 = 16787518;

const int XKB_KEY_braille_dots_123456 = 16787519;

const int XKB_KEY_braille_dots_7 = 16787520;

const int XKB_KEY_braille_dots_17 = 16787521;

const int XKB_KEY_braille_dots_27 = 16787522;

const int XKB_KEY_braille_dots_127 = 16787523;

const int XKB_KEY_braille_dots_37 = 16787524;

const int XKB_KEY_braille_dots_137 = 16787525;

const int XKB_KEY_braille_dots_237 = 16787526;

const int XKB_KEY_braille_dots_1237 = 16787527;

const int XKB_KEY_braille_dots_47 = 16787528;

const int XKB_KEY_braille_dots_147 = 16787529;

const int XKB_KEY_braille_dots_247 = 16787530;

const int XKB_KEY_braille_dots_1247 = 16787531;

const int XKB_KEY_braille_dots_347 = 16787532;

const int XKB_KEY_braille_dots_1347 = 16787533;

const int XKB_KEY_braille_dots_2347 = 16787534;

const int XKB_KEY_braille_dots_12347 = 16787535;

const int XKB_KEY_braille_dots_57 = 16787536;

const int XKB_KEY_braille_dots_157 = 16787537;

const int XKB_KEY_braille_dots_257 = 16787538;

const int XKB_KEY_braille_dots_1257 = 16787539;

const int XKB_KEY_braille_dots_357 = 16787540;

const int XKB_KEY_braille_dots_1357 = 16787541;

const int XKB_KEY_braille_dots_2357 = 16787542;

const int XKB_KEY_braille_dots_12357 = 16787543;

const int XKB_KEY_braille_dots_457 = 16787544;

const int XKB_KEY_braille_dots_1457 = 16787545;

const int XKB_KEY_braille_dots_2457 = 16787546;

const int XKB_KEY_braille_dots_12457 = 16787547;

const int XKB_KEY_braille_dots_3457 = 16787548;

const int XKB_KEY_braille_dots_13457 = 16787549;

const int XKB_KEY_braille_dots_23457 = 16787550;

const int XKB_KEY_braille_dots_123457 = 16787551;

const int XKB_KEY_braille_dots_67 = 16787552;

const int XKB_KEY_braille_dots_167 = 16787553;

const int XKB_KEY_braille_dots_267 = 16787554;

const int XKB_KEY_braille_dots_1267 = 16787555;

const int XKB_KEY_braille_dots_367 = 16787556;

const int XKB_KEY_braille_dots_1367 = 16787557;

const int XKB_KEY_braille_dots_2367 = 16787558;

const int XKB_KEY_braille_dots_12367 = 16787559;

const int XKB_KEY_braille_dots_467 = 16787560;

const int XKB_KEY_braille_dots_1467 = 16787561;

const int XKB_KEY_braille_dots_2467 = 16787562;

const int XKB_KEY_braille_dots_12467 = 16787563;

const int XKB_KEY_braille_dots_3467 = 16787564;

const int XKB_KEY_braille_dots_13467 = 16787565;

const int XKB_KEY_braille_dots_23467 = 16787566;

const int XKB_KEY_braille_dots_123467 = 16787567;

const int XKB_KEY_braille_dots_567 = 16787568;

const int XKB_KEY_braille_dots_1567 = 16787569;

const int XKB_KEY_braille_dots_2567 = 16787570;

const int XKB_KEY_braille_dots_12567 = 16787571;

const int XKB_KEY_braille_dots_3567 = 16787572;

const int XKB_KEY_braille_dots_13567 = 16787573;

const int XKB_KEY_braille_dots_23567 = 16787574;

const int XKB_KEY_braille_dots_123567 = 16787575;

const int XKB_KEY_braille_dots_4567 = 16787576;

const int XKB_KEY_braille_dots_14567 = 16787577;

const int XKB_KEY_braille_dots_24567 = 16787578;

const int XKB_KEY_braille_dots_124567 = 16787579;

const int XKB_KEY_braille_dots_34567 = 16787580;

const int XKB_KEY_braille_dots_134567 = 16787581;

const int XKB_KEY_braille_dots_234567 = 16787582;

const int XKB_KEY_braille_dots_1234567 = 16787583;

const int XKB_KEY_braille_dots_8 = 16787584;

const int XKB_KEY_braille_dots_18 = 16787585;

const int XKB_KEY_braille_dots_28 = 16787586;

const int XKB_KEY_braille_dots_128 = 16787587;

const int XKB_KEY_braille_dots_38 = 16787588;

const int XKB_KEY_braille_dots_138 = 16787589;

const int XKB_KEY_braille_dots_238 = 16787590;

const int XKB_KEY_braille_dots_1238 = 16787591;

const int XKB_KEY_braille_dots_48 = 16787592;

const int XKB_KEY_braille_dots_148 = 16787593;

const int XKB_KEY_braille_dots_248 = 16787594;

const int XKB_KEY_braille_dots_1248 = 16787595;

const int XKB_KEY_braille_dots_348 = 16787596;

const int XKB_KEY_braille_dots_1348 = 16787597;

const int XKB_KEY_braille_dots_2348 = 16787598;

const int XKB_KEY_braille_dots_12348 = 16787599;

const int XKB_KEY_braille_dots_58 = 16787600;

const int XKB_KEY_braille_dots_158 = 16787601;

const int XKB_KEY_braille_dots_258 = 16787602;

const int XKB_KEY_braille_dots_1258 = 16787603;

const int XKB_KEY_braille_dots_358 = 16787604;

const int XKB_KEY_braille_dots_1358 = 16787605;

const int XKB_KEY_braille_dots_2358 = 16787606;

const int XKB_KEY_braille_dots_12358 = 16787607;

const int XKB_KEY_braille_dots_458 = 16787608;

const int XKB_KEY_braille_dots_1458 = 16787609;

const int XKB_KEY_braille_dots_2458 = 16787610;

const int XKB_KEY_braille_dots_12458 = 16787611;

const int XKB_KEY_braille_dots_3458 = 16787612;

const int XKB_KEY_braille_dots_13458 = 16787613;

const int XKB_KEY_braille_dots_23458 = 16787614;

const int XKB_KEY_braille_dots_123458 = 16787615;

const int XKB_KEY_braille_dots_68 = 16787616;

const int XKB_KEY_braille_dots_168 = 16787617;

const int XKB_KEY_braille_dots_268 = 16787618;

const int XKB_KEY_braille_dots_1268 = 16787619;

const int XKB_KEY_braille_dots_368 = 16787620;

const int XKB_KEY_braille_dots_1368 = 16787621;

const int XKB_KEY_braille_dots_2368 = 16787622;

const int XKB_KEY_braille_dots_12368 = 16787623;

const int XKB_KEY_braille_dots_468 = 16787624;

const int XKB_KEY_braille_dots_1468 = 16787625;

const int XKB_KEY_braille_dots_2468 = 16787626;

const int XKB_KEY_braille_dots_12468 = 16787627;

const int XKB_KEY_braille_dots_3468 = 16787628;

const int XKB_KEY_braille_dots_13468 = 16787629;

const int XKB_KEY_braille_dots_23468 = 16787630;

const int XKB_KEY_braille_dots_123468 = 16787631;

const int XKB_KEY_braille_dots_568 = 16787632;

const int XKB_KEY_braille_dots_1568 = 16787633;

const int XKB_KEY_braille_dots_2568 = 16787634;

const int XKB_KEY_braille_dots_12568 = 16787635;

const int XKB_KEY_braille_dots_3568 = 16787636;

const int XKB_KEY_braille_dots_13568 = 16787637;

const int XKB_KEY_braille_dots_23568 = 16787638;

const int XKB_KEY_braille_dots_123568 = 16787639;

const int XKB_KEY_braille_dots_4568 = 16787640;

const int XKB_KEY_braille_dots_14568 = 16787641;

const int XKB_KEY_braille_dots_24568 = 16787642;

const int XKB_KEY_braille_dots_124568 = 16787643;

const int XKB_KEY_braille_dots_34568 = 16787644;

const int XKB_KEY_braille_dots_134568 = 16787645;

const int XKB_KEY_braille_dots_234568 = 16787646;

const int XKB_KEY_braille_dots_1234568 = 16787647;

const int XKB_KEY_braille_dots_78 = 16787648;

const int XKB_KEY_braille_dots_178 = 16787649;

const int XKB_KEY_braille_dots_278 = 16787650;

const int XKB_KEY_braille_dots_1278 = 16787651;

const int XKB_KEY_braille_dots_378 = 16787652;

const int XKB_KEY_braille_dots_1378 = 16787653;

const int XKB_KEY_braille_dots_2378 = 16787654;

const int XKB_KEY_braille_dots_12378 = 16787655;

const int XKB_KEY_braille_dots_478 = 16787656;

const int XKB_KEY_braille_dots_1478 = 16787657;

const int XKB_KEY_braille_dots_2478 = 16787658;

const int XKB_KEY_braille_dots_12478 = 16787659;

const int XKB_KEY_braille_dots_3478 = 16787660;

const int XKB_KEY_braille_dots_13478 = 16787661;

const int XKB_KEY_braille_dots_23478 = 16787662;

const int XKB_KEY_braille_dots_123478 = 16787663;

const int XKB_KEY_braille_dots_578 = 16787664;

const int XKB_KEY_braille_dots_1578 = 16787665;

const int XKB_KEY_braille_dots_2578 = 16787666;

const int XKB_KEY_braille_dots_12578 = 16787667;

const int XKB_KEY_braille_dots_3578 = 16787668;

const int XKB_KEY_braille_dots_13578 = 16787669;

const int XKB_KEY_braille_dots_23578 = 16787670;

const int XKB_KEY_braille_dots_123578 = 16787671;

const int XKB_KEY_braille_dots_4578 = 16787672;

const int XKB_KEY_braille_dots_14578 = 16787673;

const int XKB_KEY_braille_dots_24578 = 16787674;

const int XKB_KEY_braille_dots_124578 = 16787675;

const int XKB_KEY_braille_dots_34578 = 16787676;

const int XKB_KEY_braille_dots_134578 = 16787677;

const int XKB_KEY_braille_dots_234578 = 16787678;

const int XKB_KEY_braille_dots_1234578 = 16787679;

const int XKB_KEY_braille_dots_678 = 16787680;

const int XKB_KEY_braille_dots_1678 = 16787681;

const int XKB_KEY_braille_dots_2678 = 16787682;

const int XKB_KEY_braille_dots_12678 = 16787683;

const int XKB_KEY_braille_dots_3678 = 16787684;

const int XKB_KEY_braille_dots_13678 = 16787685;

const int XKB_KEY_braille_dots_23678 = 16787686;

const int XKB_KEY_braille_dots_123678 = 16787687;

const int XKB_KEY_braille_dots_4678 = 16787688;

const int XKB_KEY_braille_dots_14678 = 16787689;

const int XKB_KEY_braille_dots_24678 = 16787690;

const int XKB_KEY_braille_dots_124678 = 16787691;

const int XKB_KEY_braille_dots_34678 = 16787692;

const int XKB_KEY_braille_dots_134678 = 16787693;

const int XKB_KEY_braille_dots_234678 = 16787694;

const int XKB_KEY_braille_dots_1234678 = 16787695;

const int XKB_KEY_braille_dots_5678 = 16787696;

const int XKB_KEY_braille_dots_15678 = 16787697;

const int XKB_KEY_braille_dots_25678 = 16787698;

const int XKB_KEY_braille_dots_125678 = 16787699;

const int XKB_KEY_braille_dots_35678 = 16787700;

const int XKB_KEY_braille_dots_135678 = 16787701;

const int XKB_KEY_braille_dots_235678 = 16787702;

const int XKB_KEY_braille_dots_1235678 = 16787703;

const int XKB_KEY_braille_dots_45678 = 16787704;

const int XKB_KEY_braille_dots_145678 = 16787705;

const int XKB_KEY_braille_dots_245678 = 16787706;

const int XKB_KEY_braille_dots_1245678 = 16787707;

const int XKB_KEY_braille_dots_345678 = 16787708;

const int XKB_KEY_braille_dots_1345678 = 16787709;

const int XKB_KEY_braille_dots_2345678 = 16787710;

const int XKB_KEY_braille_dots_12345678 = 16787711;

const int XKB_KEY_Sinh_ng = 16780674;

const int XKB_KEY_Sinh_h2 = 16780675;

const int XKB_KEY_Sinh_a = 16780677;

const int XKB_KEY_Sinh_aa = 16780678;

const int XKB_KEY_Sinh_ae = 16780679;

const int XKB_KEY_Sinh_aee = 16780680;

const int XKB_KEY_Sinh_i = 16780681;

const int XKB_KEY_Sinh_ii = 16780682;

const int XKB_KEY_Sinh_u = 16780683;

const int XKB_KEY_Sinh_uu = 16780684;

const int XKB_KEY_Sinh_ri = 16780685;

const int XKB_KEY_Sinh_rii = 16780686;

const int XKB_KEY_Sinh_lu = 16780687;

const int XKB_KEY_Sinh_luu = 16780688;

const int XKB_KEY_Sinh_e = 16780689;

const int XKB_KEY_Sinh_ee = 16780690;

const int XKB_KEY_Sinh_ai = 16780691;

const int XKB_KEY_Sinh_o = 16780692;

const int XKB_KEY_Sinh_oo = 16780693;

const int XKB_KEY_Sinh_au = 16780694;

const int XKB_KEY_Sinh_ka = 16780698;

const int XKB_KEY_Sinh_kha = 16780699;

const int XKB_KEY_Sinh_ga = 16780700;

const int XKB_KEY_Sinh_gha = 16780701;

const int XKB_KEY_Sinh_ng2 = 16780702;

const int XKB_KEY_Sinh_nga = 16780703;

const int XKB_KEY_Sinh_ca = 16780704;

const int XKB_KEY_Sinh_cha = 16780705;

const int XKB_KEY_Sinh_ja = 16780706;

const int XKB_KEY_Sinh_jha = 16780707;

const int XKB_KEY_Sinh_nya = 16780708;

const int XKB_KEY_Sinh_jnya = 16780709;

const int XKB_KEY_Sinh_nja = 16780710;

const int XKB_KEY_Sinh_tta = 16780711;

const int XKB_KEY_Sinh_ttha = 16780712;

const int XKB_KEY_Sinh_dda = 16780713;

const int XKB_KEY_Sinh_ddha = 16780714;

const int XKB_KEY_Sinh_nna = 16780715;

const int XKB_KEY_Sinh_ndda = 16780716;

const int XKB_KEY_Sinh_tha = 16780717;

const int XKB_KEY_Sinh_thha = 16780718;

const int XKB_KEY_Sinh_dha = 16780719;

const int XKB_KEY_Sinh_dhha = 16780720;

const int XKB_KEY_Sinh_na = 16780721;

const int XKB_KEY_Sinh_ndha = 16780723;

const int XKB_KEY_Sinh_pa = 16780724;

const int XKB_KEY_Sinh_pha = 16780725;

const int XKB_KEY_Sinh_ba = 16780726;

const int XKB_KEY_Sinh_bha = 16780727;

const int XKB_KEY_Sinh_ma = 16780728;

const int XKB_KEY_Sinh_mba = 16780729;

const int XKB_KEY_Sinh_ya = 16780730;

const int XKB_KEY_Sinh_ra = 16780731;

const int XKB_KEY_Sinh_la = 16780733;

const int XKB_KEY_Sinh_va = 16780736;

const int XKB_KEY_Sinh_sha = 16780737;

const int XKB_KEY_Sinh_ssha = 16780738;

const int XKB_KEY_Sinh_sa = 16780739;

const int XKB_KEY_Sinh_ha = 16780740;

const int XKB_KEY_Sinh_lla = 16780741;

const int XKB_KEY_Sinh_fa = 16780742;

const int XKB_KEY_Sinh_al = 16780746;

const int XKB_KEY_Sinh_aa2 = 16780751;

const int XKB_KEY_Sinh_ae2 = 16780752;

const int XKB_KEY_Sinh_aee2 = 16780753;

const int XKB_KEY_Sinh_i2 = 16780754;

const int XKB_KEY_Sinh_ii2 = 16780755;

const int XKB_KEY_Sinh_u2 = 16780756;

const int XKB_KEY_Sinh_uu2 = 16780758;

const int XKB_KEY_Sinh_ru2 = 16780760;

const int XKB_KEY_Sinh_e2 = 16780761;

const int XKB_KEY_Sinh_ee2 = 16780762;

const int XKB_KEY_Sinh_ai2 = 16780763;

const int XKB_KEY_Sinh_o2 = 16780764;

const int XKB_KEY_Sinh_oo2 = 16780765;

const int XKB_KEY_Sinh_au2 = 16780766;

const int XKB_KEY_Sinh_lu2 = 16780767;

const int XKB_KEY_Sinh_ruu2 = 16780786;

const int XKB_KEY_Sinh_luu2 = 16780787;

const int XKB_KEY_Sinh_kunddaliya = 16780788;

const int XKB_KEY_XF86ModeLock = 269025025;

const int XKB_KEY_XF86MonBrightnessUp = 269025026;

const int XKB_KEY_XF86MonBrightnessDown = 269025027;

const int XKB_KEY_XF86KbdLightOnOff = 269025028;

const int XKB_KEY_XF86KbdBrightnessUp = 269025029;

const int XKB_KEY_XF86KbdBrightnessDown = 269025030;

const int XKB_KEY_XF86MonBrightnessCycle = 269025031;

const int XKB_KEY_XF86Standby = 269025040;

const int XKB_KEY_XF86AudioLowerVolume = 269025041;

const int XKB_KEY_XF86AudioMute = 269025042;

const int XKB_KEY_XF86AudioRaiseVolume = 269025043;

const int XKB_KEY_XF86AudioPlay = 269025044;

const int XKB_KEY_XF86AudioStop = 269025045;

const int XKB_KEY_XF86AudioPrev = 269025046;

const int XKB_KEY_XF86AudioNext = 269025047;

const int XKB_KEY_XF86HomePage = 269025048;

const int XKB_KEY_XF86Mail = 269025049;

const int XKB_KEY_XF86Start = 269025050;

const int XKB_KEY_XF86Search = 269025051;

const int XKB_KEY_XF86AudioRecord = 269025052;

const int XKB_KEY_XF86Calculator = 269025053;

const int XKB_KEY_XF86Memo = 269025054;

const int XKB_KEY_XF86ToDoList = 269025055;

const int XKB_KEY_XF86Calendar = 269025056;

const int XKB_KEY_XF86PowerDown = 269025057;

const int XKB_KEY_XF86ContrastAdjust = 269025058;

const int XKB_KEY_XF86RockerUp = 269025059;

const int XKB_KEY_XF86RockerDown = 269025060;

const int XKB_KEY_XF86RockerEnter = 269025061;

const int XKB_KEY_XF86Back = 269025062;

const int XKB_KEY_XF86Forward = 269025063;

const int XKB_KEY_XF86Stop = 269025064;

const int XKB_KEY_XF86Refresh = 269025065;

const int XKB_KEY_XF86PowerOff = 269025066;

const int XKB_KEY_XF86WakeUp = 269025067;

const int XKB_KEY_XF86Eject = 269025068;

const int XKB_KEY_XF86ScreenSaver = 269025069;

const int XKB_KEY_XF86WWW = 269025070;

const int XKB_KEY_XF86Sleep = 269025071;

const int XKB_KEY_XF86Favorites = 269025072;

const int XKB_KEY_XF86AudioPause = 269025073;

const int XKB_KEY_XF86AudioMedia = 269025074;

const int XKB_KEY_XF86MyComputer = 269025075;

const int XKB_KEY_XF86VendorHome = 269025076;

const int XKB_KEY_XF86LightBulb = 269025077;

const int XKB_KEY_XF86Shop = 269025078;

const int XKB_KEY_XF86History = 269025079;

const int XKB_KEY_XF86OpenURL = 269025080;

const int XKB_KEY_XF86AddFavorite = 269025081;

const int XKB_KEY_XF86HotLinks = 269025082;

const int XKB_KEY_XF86BrightnessAdjust = 269025083;

const int XKB_KEY_XF86Finance = 269025084;

const int XKB_KEY_XF86Community = 269025085;

const int XKB_KEY_XF86AudioRewind = 269025086;

const int XKB_KEY_XF86BackForward = 269025087;

const int XKB_KEY_XF86Launch0 = 269025088;

const int XKB_KEY_XF86Launch1 = 269025089;

const int XKB_KEY_XF86Launch2 = 269025090;

const int XKB_KEY_XF86Launch3 = 269025091;

const int XKB_KEY_XF86Launch4 = 269025092;

const int XKB_KEY_XF86Launch5 = 269025093;

const int XKB_KEY_XF86Launch6 = 269025094;

const int XKB_KEY_XF86Launch7 = 269025095;

const int XKB_KEY_XF86Launch8 = 269025096;

const int XKB_KEY_XF86Launch9 = 269025097;

const int XKB_KEY_XF86LaunchA = 269025098;

const int XKB_KEY_XF86LaunchB = 269025099;

const int XKB_KEY_XF86LaunchC = 269025100;

const int XKB_KEY_XF86LaunchD = 269025101;

const int XKB_KEY_XF86LaunchE = 269025102;

const int XKB_KEY_XF86LaunchF = 269025103;

const int XKB_KEY_XF86ApplicationLeft = 269025104;

const int XKB_KEY_XF86ApplicationRight = 269025105;

const int XKB_KEY_XF86Book = 269025106;

const int XKB_KEY_XF86CD = 269025107;

const int XKB_KEY_XF86Calculater = 269025108;

const int XKB_KEY_XF86Clear = 269025109;

const int XKB_KEY_XF86Close = 269025110;

const int XKB_KEY_XF86Copy = 269025111;

const int XKB_KEY_XF86Cut = 269025112;

const int XKB_KEY_XF86Display = 269025113;

const int XKB_KEY_XF86DOS = 269025114;

const int XKB_KEY_XF86Documents = 269025115;

const int XKB_KEY_XF86Excel = 269025116;

const int XKB_KEY_XF86Explorer = 269025117;

const int XKB_KEY_XF86Game = 269025118;

const int XKB_KEY_XF86Go = 269025119;

const int XKB_KEY_XF86iTouch = 269025120;

const int XKB_KEY_XF86LogOff = 269025121;

const int XKB_KEY_XF86Market = 269025122;

const int XKB_KEY_XF86Meeting = 269025123;

const int XKB_KEY_XF86MenuKB = 269025125;

const int XKB_KEY_XF86MenuPB = 269025126;

const int XKB_KEY_XF86MySites = 269025127;

const int XKB_KEY_XF86New = 269025128;

const int XKB_KEY_XF86News = 269025129;

const int XKB_KEY_XF86OfficeHome = 269025130;

const int XKB_KEY_XF86Open = 269025131;

const int XKB_KEY_XF86Option = 269025132;

const int XKB_KEY_XF86Paste = 269025133;

const int XKB_KEY_XF86Phone = 269025134;

const int XKB_KEY_XF86Q = 269025136;

const int XKB_KEY_XF86Reply = 269025138;

const int XKB_KEY_XF86Reload = 269025139;

const int XKB_KEY_XF86RotateWindows = 269025140;

const int XKB_KEY_XF86RotationPB = 269025141;

const int XKB_KEY_XF86RotationKB = 269025142;

const int XKB_KEY_XF86Save = 269025143;

const int XKB_KEY_XF86ScrollUp = 269025144;

const int XKB_KEY_XF86ScrollDown = 269025145;

const int XKB_KEY_XF86ScrollClick = 269025146;

const int XKB_KEY_XF86Send = 269025147;

const int XKB_KEY_XF86Spell = 269025148;

const int XKB_KEY_XF86SplitScreen = 269025149;

const int XKB_KEY_XF86Support = 269025150;

const int XKB_KEY_XF86TaskPane = 269025151;

const int XKB_KEY_XF86Terminal = 269025152;

const int XKB_KEY_XF86Tools = 269025153;

const int XKB_KEY_XF86Travel = 269025154;

const int XKB_KEY_XF86UserPB = 269025156;

const int XKB_KEY_XF86User1KB = 269025157;

const int XKB_KEY_XF86User2KB = 269025158;

const int XKB_KEY_XF86Video = 269025159;

const int XKB_KEY_XF86WheelButton = 269025160;

const int XKB_KEY_XF86Word = 269025161;

const int XKB_KEY_XF86Xfer = 269025162;

const int XKB_KEY_XF86ZoomIn = 269025163;

const int XKB_KEY_XF86ZoomOut = 269025164;

const int XKB_KEY_XF86Away = 269025165;

const int XKB_KEY_XF86Messenger = 269025166;

const int XKB_KEY_XF86WebCam = 269025167;

const int XKB_KEY_XF86MailForward = 269025168;

const int XKB_KEY_XF86Pictures = 269025169;

const int XKB_KEY_XF86Music = 269025170;

const int XKB_KEY_XF86Battery = 269025171;

const int XKB_KEY_XF86Bluetooth = 269025172;

const int XKB_KEY_XF86WLAN = 269025173;

const int XKB_KEY_XF86UWB = 269025174;

const int XKB_KEY_XF86AudioForward = 269025175;

const int XKB_KEY_XF86AudioRepeat = 269025176;

const int XKB_KEY_XF86AudioRandomPlay = 269025177;

const int XKB_KEY_XF86Subtitle = 269025178;

const int XKB_KEY_XF86AudioCycleTrack = 269025179;

const int XKB_KEY_XF86CycleAngle = 269025180;

const int XKB_KEY_XF86FrameBack = 269025181;

const int XKB_KEY_XF86FrameForward = 269025182;

const int XKB_KEY_XF86Time = 269025183;

const int XKB_KEY_XF86Select = 269025184;

const int XKB_KEY_XF86View = 269025185;

const int XKB_KEY_XF86TopMenu = 269025186;

const int XKB_KEY_XF86Red = 269025187;

const int XKB_KEY_XF86Green = 269025188;

const int XKB_KEY_XF86Yellow = 269025189;

const int XKB_KEY_XF86Blue = 269025190;

const int XKB_KEY_XF86Suspend = 269025191;

const int XKB_KEY_XF86Hibernate = 269025192;

const int XKB_KEY_XF86TouchpadToggle = 269025193;

const int XKB_KEY_XF86TouchpadOn = 269025200;

const int XKB_KEY_XF86TouchpadOff = 269025201;

const int XKB_KEY_XF86AudioMicMute = 269025202;

const int XKB_KEY_XF86Keyboard = 269025203;

const int XKB_KEY_XF86WWAN = 269025204;

const int XKB_KEY_XF86RFKill = 269025205;

const int XKB_KEY_XF86AudioPreset = 269025206;

const int XKB_KEY_XF86RotationLockToggle = 269025207;

const int XKB_KEY_XF86FullScreen = 269025208;

const int XKB_KEY_XF86Switch_VT_1 = 269024769;

const int XKB_KEY_XF86Switch_VT_2 = 269024770;

const int XKB_KEY_XF86Switch_VT_3 = 269024771;

const int XKB_KEY_XF86Switch_VT_4 = 269024772;

const int XKB_KEY_XF86Switch_VT_5 = 269024773;

const int XKB_KEY_XF86Switch_VT_6 = 269024774;

const int XKB_KEY_XF86Switch_VT_7 = 269024775;

const int XKB_KEY_XF86Switch_VT_8 = 269024776;

const int XKB_KEY_XF86Switch_VT_9 = 269024777;

const int XKB_KEY_XF86Switch_VT_10 = 269024778;

const int XKB_KEY_XF86Switch_VT_11 = 269024779;

const int XKB_KEY_XF86Switch_VT_12 = 269024780;

const int XKB_KEY_XF86Ungrab = 269024800;

const int XKB_KEY_XF86ClearGrab = 269024801;

const int XKB_KEY_XF86Next_VMode = 269024802;

const int XKB_KEY_XF86Prev_VMode = 269024803;

const int XKB_KEY_XF86LogWindowTree = 269024804;

const int XKB_KEY_XF86LogGrabInfo = 269024805;

const int XKB_KEY_XF86BrightnessAuto = 268964084;

const int XKB_KEY_XF86DisplayOff = 268964085;

const int XKB_KEY_XF86Info = 268964198;

const int XKB_KEY_XF86AspectRatio = 268964215;

const int XKB_KEY_XF86DVD = 268964229;

const int XKB_KEY_XF86Audio = 268964232;

const int XKB_KEY_XF86ChannelUp = 268964242;

const int XKB_KEY_XF86ChannelDown = 268964243;

const int XKB_KEY_XF86Break = 268964251;

const int XKB_KEY_XF86VideoPhone = 268964256;

const int XKB_KEY_XF86ZoomReset = 268964260;

const int XKB_KEY_XF86Editor = 268964262;

const int XKB_KEY_XF86GraphicsEditor = 268964264;

const int XKB_KEY_XF86Presentation = 268964265;

const int XKB_KEY_XF86Database = 268964266;

const int XKB_KEY_XF86Voicemail = 268964268;

const int XKB_KEY_XF86Addressbook = 268964269;

const int XKB_KEY_XF86DisplayToggle = 268964271;

const int XKB_KEY_XF86SpellCheck = 268964272;

const int XKB_KEY_XF86ContextMenu = 268964278;

const int XKB_KEY_XF86MediaRepeat = 268964279;

const int XKB_KEY_XF8610ChannelsUp = 268964280;

const int XKB_KEY_XF8610ChannelsDown = 268964281;

const int XKB_KEY_XF86Images = 268964282;

const int XKB_KEY_XF86NotificationCenter = 268964284;

const int XKB_KEY_XF86PickupPhone = 268964285;

const int XKB_KEY_XF86HangupPhone = 268964286;

const int XKB_KEY_XF86Fn = 268964304;

const int XKB_KEY_XF86Fn_Esc = 268964305;

const int XKB_KEY_XF86FnRightShift = 268964325;

const int XKB_KEY_XF86Numeric0 = 268964352;

const int XKB_KEY_XF86Numeric1 = 268964353;

const int XKB_KEY_XF86Numeric2 = 268964354;

const int XKB_KEY_XF86Numeric3 = 268964355;

const int XKB_KEY_XF86Numeric4 = 268964356;

const int XKB_KEY_XF86Numeric5 = 268964357;

const int XKB_KEY_XF86Numeric6 = 268964358;

const int XKB_KEY_XF86Numeric7 = 268964359;

const int XKB_KEY_XF86Numeric8 = 268964360;

const int XKB_KEY_XF86Numeric9 = 268964361;

const int XKB_KEY_XF86NumericStar = 268964362;

const int XKB_KEY_XF86NumericPound = 268964363;

const int XKB_KEY_XF86NumericA = 268964364;

const int XKB_KEY_XF86NumericB = 268964365;

const int XKB_KEY_XF86NumericC = 268964366;

const int XKB_KEY_XF86NumericD = 268964367;

const int XKB_KEY_XF86CameraFocus = 268964368;

const int XKB_KEY_XF86WPSButton = 268964369;

const int XKB_KEY_XF86CameraZoomIn = 268964373;

const int XKB_KEY_XF86CameraZoomOut = 268964374;

const int XKB_KEY_XF86CameraUp = 268964375;

const int XKB_KEY_XF86CameraDown = 268964376;

const int XKB_KEY_XF86CameraLeft = 268964377;

const int XKB_KEY_XF86CameraRight = 268964378;

const int XKB_KEY_XF86AttendantOn = 268964379;

const int XKB_KEY_XF86AttendantOff = 268964380;

const int XKB_KEY_XF86AttendantToggle = 268964381;

const int XKB_KEY_XF86LightsToggle = 268964382;

const int XKB_KEY_XF86ALSToggle = 268964400;

const int XKB_KEY_XF86Buttonconfig = 268964416;

const int XKB_KEY_XF86Taskmanager = 268964417;

const int XKB_KEY_XF86Journal = 268964418;

const int XKB_KEY_XF86ControlPanel = 268964419;

const int XKB_KEY_XF86AppSelect = 268964420;

const int XKB_KEY_XF86Screensaver = 268964421;

const int XKB_KEY_XF86VoiceCommand = 268964422;

const int XKB_KEY_XF86Assistant = 268964423;

const int XKB_KEY_XF86BrightnessMin = 268964432;

const int XKB_KEY_XF86BrightnessMax = 268964433;

const int XKB_KEY_XF86KbdInputAssistPrev = 268964448;

const int XKB_KEY_XF86KbdInputAssistNext = 268964449;

const int XKB_KEY_XF86KbdInputAssistPrevgroup = 268964450;

const int XKB_KEY_XF86KbdInputAssistNextgroup = 268964451;

const int XKB_KEY_XF86KbdInputAssistAccept = 268964452;

const int XKB_KEY_XF86KbdInputAssistCancel = 268964453;

const int XKB_KEY_XF86RightUp = 268964454;

const int XKB_KEY_XF86RightDown = 268964455;

const int XKB_KEY_XF86LeftUp = 268964456;

const int XKB_KEY_XF86LeftDown = 268964457;

const int XKB_KEY_XF86RootMenu = 268964458;

const int XKB_KEY_XF86MediaTopMenu = 268964459;

const int XKB_KEY_XF86Numeric11 = 268964460;

const int XKB_KEY_XF86Numeric12 = 268964461;

const int XKB_KEY_XF86AudioDesc = 268964462;

const int XKB_KEY_XF863DMode = 268964463;

const int XKB_KEY_XF86NextFavorite = 268964464;

const int XKB_KEY_XF86StopRecord = 268964465;

const int XKB_KEY_XF86PauseRecord = 268964466;

const int XKB_KEY_XF86VOD = 268964467;

const int XKB_KEY_XF86Unmute = 268964468;

const int XKB_KEY_XF86FastReverse = 268964469;

const int XKB_KEY_XF86SlowReverse = 268964470;

const int XKB_KEY_XF86Data = 268964471;

const int XKB_KEY_XF86OnScreenKeyboard = 268964472;

const int XKB_KEY_XF86PrivacyScreenToggle = 268964473;

const int XKB_KEY_XF86SelectiveScreenshot = 268964474;

const int XKB_KEY_XF86Macro1 = 268964496;

const int XKB_KEY_XF86Macro2 = 268964497;

const int XKB_KEY_XF86Macro3 = 268964498;

const int XKB_KEY_XF86Macro4 = 268964499;

const int XKB_KEY_XF86Macro5 = 268964500;

const int XKB_KEY_XF86Macro6 = 268964501;

const int XKB_KEY_XF86Macro7 = 268964502;

const int XKB_KEY_XF86Macro8 = 268964503;

const int XKB_KEY_XF86Macro9 = 268964504;

const int XKB_KEY_XF86Macro10 = 268964505;

const int XKB_KEY_XF86Macro11 = 268964506;

const int XKB_KEY_XF86Macro12 = 268964507;

const int XKB_KEY_XF86Macro13 = 268964508;

const int XKB_KEY_XF86Macro14 = 268964509;

const int XKB_KEY_XF86Macro15 = 268964510;

const int XKB_KEY_XF86Macro16 = 268964511;

const int XKB_KEY_XF86Macro17 = 268964512;

const int XKB_KEY_XF86Macro18 = 268964513;

const int XKB_KEY_XF86Macro19 = 268964514;

const int XKB_KEY_XF86Macro20 = 268964515;

const int XKB_KEY_XF86Macro21 = 268964516;

const int XKB_KEY_XF86Macro22 = 268964517;

const int XKB_KEY_XF86Macro23 = 268964518;

const int XKB_KEY_XF86Macro24 = 268964519;

const int XKB_KEY_XF86Macro25 = 268964520;

const int XKB_KEY_XF86Macro26 = 268964521;

const int XKB_KEY_XF86Macro27 = 268964522;

const int XKB_KEY_XF86Macro28 = 268964523;

const int XKB_KEY_XF86Macro29 = 268964524;

const int XKB_KEY_XF86Macro30 = 268964525;

const int XKB_KEY_XF86MacroRecordStart = 268964528;

const int XKB_KEY_XF86MacroRecordStop = 268964529;

const int XKB_KEY_XF86MacroPresetCycle = 268964530;

const int XKB_KEY_XF86MacroPreset1 = 268964531;

const int XKB_KEY_XF86MacroPreset2 = 268964532;

const int XKB_KEY_XF86MacroPreset3 = 268964533;

const int XKB_KEY_XF86KbdLcdMenu1 = 268964536;

const int XKB_KEY_XF86KbdLcdMenu2 = 268964537;

const int XKB_KEY_XF86KbdLcdMenu3 = 268964538;

const int XKB_KEY_XF86KbdLcdMenu4 = 268964539;

const int XKB_KEY_XF86KbdLcdMenu5 = 268964540;

const int XKB_KEY_SunFA_Grave = 268828416;

const int XKB_KEY_SunFA_Circum = 268828417;

const int XKB_KEY_SunFA_Tilde = 268828418;

const int XKB_KEY_SunFA_Acute = 268828419;

const int XKB_KEY_SunFA_Diaeresis = 268828420;

const int XKB_KEY_SunFA_Cedilla = 268828421;

const int XKB_KEY_SunF36 = 268828432;

const int XKB_KEY_SunF37 = 268828433;

const int XKB_KEY_SunSys_Req = 268828512;

const int XKB_KEY_SunPrint_Screen = 65377;

const int XKB_KEY_SunCompose = 65312;

const int XKB_KEY_SunAltGraph = 65406;

const int XKB_KEY_SunPageUp = 65365;

const int XKB_KEY_SunPageDown = 65366;

const int XKB_KEY_SunUndo = 65381;

const int XKB_KEY_SunAgain = 65382;

const int XKB_KEY_SunFind = 65384;

const int XKB_KEY_SunStop = 65385;

const int XKB_KEY_SunProps = 268828528;

const int XKB_KEY_SunFront = 268828529;

const int XKB_KEY_SunCopy = 268828530;

const int XKB_KEY_SunOpen = 268828531;

const int XKB_KEY_SunPaste = 268828532;

const int XKB_KEY_SunCut = 268828533;

const int XKB_KEY_SunPowerSwitch = 268828534;

const int XKB_KEY_SunAudioLowerVolume = 268828535;

const int XKB_KEY_SunAudioMute = 268828536;

const int XKB_KEY_SunAudioRaiseVolume = 268828537;

const int XKB_KEY_SunVideoDegauss = 268828538;

const int XKB_KEY_SunVideoLowerBrightness = 268828539;

const int XKB_KEY_SunVideoRaiseBrightness = 268828540;

const int XKB_KEY_SunPowerSwitchShift = 268828541;

const int XKB_KEY_Dring_accent = 268500656;

const int XKB_KEY_Dcircumflex_accent = 268500574;

const int XKB_KEY_Dcedilla_accent = 268500524;

const int XKB_KEY_Dacute_accent = 268500519;

const int XKB_KEY_Dgrave_accent = 268500576;

const int XKB_KEY_Dtilde = 268500606;

const int XKB_KEY_Ddiaeresis = 268500514;

const int XKB_KEY_DRemove = 268500736;

const int XKB_KEY_hpClearLine = 268500847;

const int XKB_KEY_hpInsertLine = 268500848;

const int XKB_KEY_hpDeleteLine = 268500849;

const int XKB_KEY_hpInsertChar = 268500850;

const int XKB_KEY_hpDeleteChar = 268500851;

const int XKB_KEY_hpBackTab = 268500852;

const int XKB_KEY_hpKP_BackTab = 268500853;

const int XKB_KEY_hpModelock1 = 268500808;

const int XKB_KEY_hpModelock2 = 268500809;

const int XKB_KEY_hpReset = 268500844;

const int XKB_KEY_hpSystem = 268500845;

const int XKB_KEY_hpUser = 268500846;

const int XKB_KEY_hpmute_acute = 268435624;

const int XKB_KEY_hpmute_grave = 268435625;

const int XKB_KEY_hpmute_asciicircum = 268435626;

const int XKB_KEY_hpmute_diaeresis = 268435627;

const int XKB_KEY_hpmute_asciitilde = 268435628;

const int XKB_KEY_hplira = 268435631;

const int XKB_KEY_hpguilder = 268435646;

const int XKB_KEY_hpYdiaeresis = 268435694;

const int XKB_KEY_hpIO = 268435694;

const int XKB_KEY_hplongminus = 268435702;

const int XKB_KEY_hpblock = 268435708;

const int XKB_KEY_osfCopy = 268762882;

const int XKB_KEY_osfCut = 268762883;

const int XKB_KEY_osfPaste = 268762884;

const int XKB_KEY_osfBackTab = 268762887;

const int XKB_KEY_osfBackSpace = 268762888;

const int XKB_KEY_osfClear = 268762891;

const int XKB_KEY_osfEscape = 268762907;

const int XKB_KEY_osfAddMode = 268762929;

const int XKB_KEY_osfPrimaryPaste = 268762930;

const int XKB_KEY_osfQuickPaste = 268762931;

const int XKB_KEY_osfPageLeft = 268762944;

const int XKB_KEY_osfPageUp = 268762945;

const int XKB_KEY_osfPageDown = 268762946;

const int XKB_KEY_osfPageRight = 268762947;

const int XKB_KEY_osfActivate = 268762948;

const int XKB_KEY_osfMenuBar = 268762949;

const int XKB_KEY_osfLeft = 268762961;

const int XKB_KEY_osfUp = 268762962;

const int XKB_KEY_osfRight = 268762963;

const int XKB_KEY_osfDown = 268762964;

const int XKB_KEY_osfEndLine = 268762967;

const int XKB_KEY_osfBeginLine = 268762968;

const int XKB_KEY_osfEndData = 268762969;

const int XKB_KEY_osfBeginData = 268762970;

const int XKB_KEY_osfPrevMenu = 268762971;

const int XKB_KEY_osfNextMenu = 268762972;

const int XKB_KEY_osfPrevField = 268762973;

const int XKB_KEY_osfNextField = 268762974;

const int XKB_KEY_osfSelect = 268762976;

const int XKB_KEY_osfInsert = 268762979;

const int XKB_KEY_osfUndo = 268762981;

const int XKB_KEY_osfMenu = 268762983;

const int XKB_KEY_osfCancel = 268762985;

const int XKB_KEY_osfHelp = 268762986;

const int XKB_KEY_osfSelectAll = 268762993;

const int XKB_KEY_osfDeselectAll = 268762994;

const int XKB_KEY_osfReselect = 268762995;

const int XKB_KEY_osfExtend = 268762996;

const int XKB_KEY_osfRestore = 268763000;

const int XKB_KEY_osfDelete = 268763135;

const int XKB_KEY_Reset = 268500844;

const int XKB_KEY_System = 268500845;

const int XKB_KEY_User = 268500846;

const int XKB_KEY_ClearLine = 268500847;

const int XKB_KEY_InsertLine = 268500848;

const int XKB_KEY_DeleteLine = 268500849;

const int XKB_KEY_InsertChar = 268500850;

const int XKB_KEY_DeleteChar = 268500851;

const int XKB_KEY_BackTab = 268500852;

const int XKB_KEY_KP_BackTab = 268500853;

const int XKB_KEY_Ext16bit_L = 268500854;

const int XKB_KEY_Ext16bit_R = 268500855;

const int XKB_KEY_mute_acute = 268435624;

const int XKB_KEY_mute_grave = 268435625;

const int XKB_KEY_mute_asciicircum = 268435626;

const int XKB_KEY_mute_diaeresis = 268435627;

const int XKB_KEY_mute_asciitilde = 268435628;

const int XKB_KEY_lira = 268435631;

const int XKB_KEY_guilder = 268435646;

const int XKB_KEY_IO = 268435694;

const int XKB_KEY_longminus = 268435702;

const int XKB_KEY_block = 268435708;

const int XKB_KEYCODE_INVALID = 4294967295;

const int XKB_LAYOUT_INVALID = 4294967295;

const int XKB_LEVEL_INVALID = 4294967295;

const int XKB_MOD_INVALID = 4294967295;

const int XKB_LED_INVALID = 4294967295;

const int XKB_KEYCODE_MAX = 4294967294;

const int XKB_KEYMAP_USE_ORIGINAL_FORMAT = 4294967295;

const int XKB_GROUP_INVALID = 4294967295;

const int XKB_STATE_DEPRESSED = 17;

const int XKB_STATE_LATCHED = 34;

const int XKB_STATE_LOCKED = 68;

const int XKB_STATE_EFFECTIVE = 255;

const int XKB_MAP_COMPILE_PLACEHOLDER = 0;

const int XKB_MAP_COMPILE_NO_FLAGS = 0;

const int WLR_LED_COUNT = 3;

const int WLR_MODIFIER_COUNT = 8;

const int WLR_KEYBOARD_KEYS_CAP = 32;

const int PIXMAN_VERSION_MAJOR = 0;

const int PIXMAN_VERSION_MINOR = 40;

const int PIXMAN_VERSION_MICRO = 0;

const String PIXMAN_VERSION_STRING = '0.40.0';

const int PIXMAN_VERSION = 4000;

const int pixman_fixed_e = 1;

const int pixman_fixed_1 = 65536;

const int pixman_fixed_1_minus_e = 65535;

const int pixman_fixed_minus_1 = -65536;

const int pixman_max_fixed_48_16 = 2147483647;

const int pixman_min_fixed_48_16 = -2147483648;

const int PIXMAN_MAX_INDEXED = 256;

const int PIXMAN_TYPE_OTHER = 0;

const int PIXMAN_TYPE_A = 1;

const int PIXMAN_TYPE_ARGB = 2;

const int PIXMAN_TYPE_ABGR = 3;

const int PIXMAN_TYPE_COLOR = 4;

const int PIXMAN_TYPE_GRAY = 5;

const int PIXMAN_TYPE_YUY2 = 6;

const int PIXMAN_TYPE_YV12 = 7;

const int PIXMAN_TYPE_BGRA = 8;

const int PIXMAN_TYPE_RGBA = 9;

const int PIXMAN_TYPE_ARGB_SRGB = 10;

const int PIXMAN_TYPE_RGBA_FLOAT = 11;

const int _TIME_H = 1;

const int _BITS_TIME_H = 1;

const int CLOCKS_PER_SEC = 1000000;

const int CLOCK_REALTIME = 0;

const int CLOCK_MONOTONIC = 1;

const int CLOCK_PROCESS_CPUTIME_ID = 2;

const int CLOCK_THREAD_CPUTIME_ID = 3;

const int CLOCK_MONOTONIC_RAW = 4;

const int CLOCK_REALTIME_COARSE = 5;

const int CLOCK_MONOTONIC_COARSE = 6;

const int CLOCK_BOOTTIME = 7;

const int CLOCK_REALTIME_ALARM = 8;

const int CLOCK_BOOTTIME_ALARM = 9;

const int CLOCK_TAI = 11;

const int TIMER_ABSTIME = 1;

const int __struct_tm_defined = 1;

const int __itimerspec_defined = 1;

const int _BITS_TYPES_LOCALE_T_H = 1;

const int _BITS_TYPES___LOCALE_T_H = 1;

const int TIME_UTC = 1;

const int WLR_OUTPUT_DAMAGE_PREVIOUS_LEN = 2;

const int WLR_SERIAL_RINGSET_SIZE = 128;

const int WLR_POINTER_BUTTONS_CAP = 16;

const int XDG_WM_BASE_PING = 0;

const int XDG_WM_BASE_PING_SINCE_VERSION = 1;

const int XDG_WM_BASE_DESTROY_SINCE_VERSION = 1;

const int XDG_WM_BASE_CREATE_POSITIONER_SINCE_VERSION = 1;

const int XDG_WM_BASE_GET_XDG_SURFACE_SINCE_VERSION = 1;

const int XDG_WM_BASE_PONG_SINCE_VERSION = 1;

const int XDG_POSITIONER_DESTROY_SINCE_VERSION = 1;

const int XDG_POSITIONER_SET_SIZE_SINCE_VERSION = 1;

const int XDG_POSITIONER_SET_ANCHOR_RECT_SINCE_VERSION = 1;

const int XDG_POSITIONER_SET_ANCHOR_SINCE_VERSION = 1;

const int XDG_POSITIONER_SET_GRAVITY_SINCE_VERSION = 1;

const int XDG_POSITIONER_SET_CONSTRAINT_ADJUSTMENT_SINCE_VERSION = 1;

const int XDG_POSITIONER_SET_OFFSET_SINCE_VERSION = 1;

const int XDG_POSITIONER_SET_REACTIVE_SINCE_VERSION = 3;

const int XDG_POSITIONER_SET_PARENT_SIZE_SINCE_VERSION = 3;

const int XDG_POSITIONER_SET_PARENT_CONFIGURE_SINCE_VERSION = 3;

const int XDG_SURFACE_CONFIGURE = 0;

const int XDG_SURFACE_CONFIGURE_SINCE_VERSION = 1;

const int XDG_SURFACE_DESTROY_SINCE_VERSION = 1;

const int XDG_SURFACE_GET_TOPLEVEL_SINCE_VERSION = 1;

const int XDG_SURFACE_GET_POPUP_SINCE_VERSION = 1;

const int XDG_SURFACE_SET_WINDOW_GEOMETRY_SINCE_VERSION = 1;

const int XDG_SURFACE_ACK_CONFIGURE_SINCE_VERSION = 1;

const int XDG_TOPLEVEL_STATE_TILED_LEFT_SINCE_VERSION = 2;

const int XDG_TOPLEVEL_STATE_TILED_RIGHT_SINCE_VERSION = 2;

const int XDG_TOPLEVEL_STATE_TILED_TOP_SINCE_VERSION = 2;

const int XDG_TOPLEVEL_STATE_TILED_BOTTOM_SINCE_VERSION = 2;

const int XDG_TOPLEVEL_CONFIGURE = 0;

const int XDG_TOPLEVEL_CLOSE = 1;

const int XDG_TOPLEVEL_CONFIGURE_BOUNDS = 2;

const int XDG_TOPLEVEL_WM_CAPABILITIES = 3;

const int XDG_TOPLEVEL_CONFIGURE_SINCE_VERSION = 1;

const int XDG_TOPLEVEL_CLOSE_SINCE_VERSION = 1;

const int XDG_TOPLEVEL_CONFIGURE_BOUNDS_SINCE_VERSION = 4;

const int XDG_TOPLEVEL_WM_CAPABILITIES_SINCE_VERSION = 5;

const int XDG_TOPLEVEL_DESTROY_SINCE_VERSION = 1;

const int XDG_TOPLEVEL_SET_PARENT_SINCE_VERSION = 1;

const int XDG_TOPLEVEL_SET_TITLE_SINCE_VERSION = 1;

const int XDG_TOPLEVEL_SET_APP_ID_SINCE_VERSION = 1;

const int XDG_TOPLEVEL_SHOW_WINDOW_MENU_SINCE_VERSION = 1;

const int XDG_TOPLEVEL_MOVE_SINCE_VERSION = 1;

const int XDG_TOPLEVEL_RESIZE_SINCE_VERSION = 1;

const int XDG_TOPLEVEL_SET_MAX_SIZE_SINCE_VERSION = 1;

const int XDG_TOPLEVEL_SET_MIN_SIZE_SINCE_VERSION = 1;

const int XDG_TOPLEVEL_SET_MAXIMIZED_SINCE_VERSION = 1;

const int XDG_TOPLEVEL_UNSET_MAXIMIZED_SINCE_VERSION = 1;

const int XDG_TOPLEVEL_SET_FULLSCREEN_SINCE_VERSION = 1;

const int XDG_TOPLEVEL_UNSET_FULLSCREEN_SINCE_VERSION = 1;

const int XDG_TOPLEVEL_SET_MINIMIZED_SINCE_VERSION = 1;

const int XDG_POPUP_CONFIGURE = 0;

const int XDG_POPUP_POPUP_DONE = 1;

const int XDG_POPUP_REPOSITIONED = 2;

const int XDG_POPUP_CONFIGURE_SINCE_VERSION = 1;

const int XDG_POPUP_POPUP_DONE_SINCE_VERSION = 1;

const int XDG_POPUP_REPOSITIONED_SINCE_VERSION = 3;

const int XDG_POPUP_DESTROY_SINCE_VERSION = 1;

const int XDG_POPUP_GRAB_SINCE_VERSION = 1;

const int XDG_POPUP_REPOSITION_SINCE_VERSION = 3;

const int _MALLOC_H = 1;

const int M_MXFAST = 1;

const int M_NLBLKS = 2;

const int M_GRAIN = 3;

const int M_KEEP = 4;

const int M_TRIM_THRESHOLD = -1;

const int M_TOP_PAD = -2;

const int M_MMAP_THRESHOLD = -3;

const int M_MMAP_MAX = -4;

const int M_CHECK_ACTION = -5;

const int M_PERTURB = -6;

const int M_ARENA_TEST = -7;

const int M_ARENA_MAX = -8;
