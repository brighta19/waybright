// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings from Waybright
class WaybrightLibrary {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  WaybrightLibrary(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  WaybrightLibrary.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  ffi.Pointer<struct_wlr_session> wlr_session_create(
    ffi.Pointer<struct_wl_display> disp,
  ) {
    return _wlr_session_create(
      disp,
    );
  }

  late final _wlr_session_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<struct_wlr_session> Function(
              ffi.Pointer<struct_wl_display>)>>('wlr_session_create');
  late final _wlr_session_create = _wlr_session_createPtr.asFunction<
      ffi.Pointer<struct_wlr_session> Function(
          ffi.Pointer<struct_wl_display>)>();

  void wlr_session_destroy(
    ffi.Pointer<struct_wlr_session> session,
  ) {
    return _wlr_session_destroy(
      session,
    );
  }

  late final _wlr_session_destroyPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<struct_wlr_session>)>>(
      'wlr_session_destroy');
  late final _wlr_session_destroy = _wlr_session_destroyPtr
      .asFunction<void Function(ffi.Pointer<struct_wlr_session>)>();

  ffi.Pointer<struct_wlr_device> wlr_session_open_file(
    ffi.Pointer<struct_wlr_session> session,
    ffi.Pointer<ffi.Char> path,
  ) {
    return _wlr_session_open_file(
      session,
      path,
    );
  }

  late final _wlr_session_open_filePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<struct_wlr_device> Function(
              ffi.Pointer<struct_wlr_session>,
              ffi.Pointer<ffi.Char>)>>('wlr_session_open_file');
  late final _wlr_session_open_file = _wlr_session_open_filePtr.asFunction<
      ffi.Pointer<struct_wlr_device> Function(
          ffi.Pointer<struct_wlr_session>, ffi.Pointer<ffi.Char>)>();

  void wlr_session_close_file(
    ffi.Pointer<struct_wlr_session> session,
    ffi.Pointer<struct_wlr_device> device,
  ) {
    return _wlr_session_close_file(
      session,
      device,
    );
  }

  late final _wlr_session_close_filePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wlr_session>,
              ffi.Pointer<struct_wlr_device>)>>('wlr_session_close_file');
  late final _wlr_session_close_file = _wlr_session_close_filePtr.asFunction<
      void Function(
          ffi.Pointer<struct_wlr_session>, ffi.Pointer<struct_wlr_device>)>();

  bool wlr_session_change_vt(
    ffi.Pointer<struct_wlr_session> session,
    int vt,
  ) {
    return _wlr_session_change_vt(
      session,
      vt,
    );
  }

  late final _wlr_session_change_vtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<struct_wlr_session>,
              ffi.UnsignedInt)>>('wlr_session_change_vt');
  late final _wlr_session_change_vt = _wlr_session_change_vtPtr
      .asFunction<bool Function(ffi.Pointer<struct_wlr_session>, int)>();

  int wlr_session_find_gpus(
    ffi.Pointer<struct_wlr_session> session,
    int ret_len,
    ffi.Pointer<ffi.Pointer<struct_wlr_device>> ret,
  ) {
    return _wlr_session_find_gpus(
      session,
      ret_len,
      ret,
    );
  }

  late final _wlr_session_find_gpusPtr = _lookup<
          ffi.NativeFunction<
              ffi.Long Function(ffi.Pointer<struct_wlr_session>, ffi.Size,
                  ffi.Pointer<ffi.Pointer<struct_wlr_device>>)>>(
      'wlr_session_find_gpus');
  late final _wlr_session_find_gpus = _wlr_session_find_gpusPtr.asFunction<
      int Function(ffi.Pointer<struct_wlr_session>, int,
          ffi.Pointer<ffi.Pointer<struct_wlr_device>>)>();

  ffi.Pointer<struct_wlr_backend> wlr_backend_autocreate(
    ffi.Pointer<struct_wl_display> display,
  ) {
    return _wlr_backend_autocreate(
      display,
    );
  }

  late final _wlr_backend_autocreatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<struct_wlr_backend> Function(
              ffi.Pointer<struct_wl_display>)>>('wlr_backend_autocreate');
  late final _wlr_backend_autocreate = _wlr_backend_autocreatePtr.asFunction<
      ffi.Pointer<struct_wlr_backend> Function(
          ffi.Pointer<struct_wl_display>)>();

  bool wlr_backend_start(
    ffi.Pointer<struct_wlr_backend> backend,
  ) {
    return _wlr_backend_start(
      backend,
    );
  }

  late final _wlr_backend_startPtr = _lookup<
          ffi
          .NativeFunction<ffi.Bool Function(ffi.Pointer<struct_wlr_backend>)>>(
      'wlr_backend_start');
  late final _wlr_backend_start = _wlr_backend_startPtr
      .asFunction<bool Function(ffi.Pointer<struct_wlr_backend>)>();

  void wlr_backend_destroy(
    ffi.Pointer<struct_wlr_backend> backend,
  ) {
    return _wlr_backend_destroy(
      backend,
    );
  }

  late final _wlr_backend_destroyPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<struct_wlr_backend>)>>(
      'wlr_backend_destroy');
  late final _wlr_backend_destroy = _wlr_backend_destroyPtr
      .asFunction<void Function(ffi.Pointer<struct_wlr_backend>)>();

  ffi.Pointer<struct_wlr_session> wlr_backend_get_session(
    ffi.Pointer<struct_wlr_backend> backend,
  ) {
    return _wlr_backend_get_session(
      backend,
    );
  }

  late final _wlr_backend_get_sessionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<struct_wlr_session> Function(
              ffi.Pointer<struct_wlr_backend>)>>('wlr_backend_get_session');
  late final _wlr_backend_get_session = _wlr_backend_get_sessionPtr.asFunction<
      ffi.Pointer<struct_wlr_session> Function(
          ffi.Pointer<struct_wlr_backend>)>();

  int wlr_backend_get_presentation_clock(
    ffi.Pointer<struct_wlr_backend> backend,
  ) {
    return _wlr_backend_get_presentation_clock(
      backend,
    );
  }

  late final _wlr_backend_get_presentation_clockPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(ffi.Pointer<struct_wlr_backend>)>>(
      'wlr_backend_get_presentation_clock');
  late final _wlr_backend_get_presentation_clock =
      _wlr_backend_get_presentation_clockPtr
          .asFunction<int Function(ffi.Pointer<struct_wlr_backend>)>();

  int wlr_backend_get_drm_fd(
    ffi.Pointer<struct_wlr_backend> backend,
  ) {
    return _wlr_backend_get_drm_fd(
      backend,
    );
  }

  late final _wlr_backend_get_drm_fdPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(ffi.Pointer<struct_wlr_backend>)>>(
      'wlr_backend_get_drm_fd');
  late final _wlr_backend_get_drm_fd = _wlr_backend_get_drm_fdPtr
      .asFunction<int Function(ffi.Pointer<struct_wlr_backend>)>();

  void wlr_allocator_init(
    ffi.Pointer<struct_wlr_allocator> alloc,
    ffi.Pointer<struct_wlr_allocator_interface> impl,
    int buffer_caps,
  ) {
    return _wlr_allocator_init(
      alloc,
      impl,
      buffer_caps,
    );
  }

  late final _wlr_allocator_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wlr_allocator>,
              ffi.Pointer<struct_wlr_allocator_interface>,
              ffi.Uint32)>>('wlr_allocator_init');
  late final _wlr_allocator_init = _wlr_allocator_initPtr.asFunction<
      void Function(ffi.Pointer<struct_wlr_allocator>,
          ffi.Pointer<struct_wlr_allocator_interface>, int)>();

  ffi.Pointer<struct_wlr_allocator> wlr_allocator_autocreate(
    ffi.Pointer<struct_wlr_backend> backend,
    ffi.Pointer<struct_wlr_renderer> renderer,
  ) {
    return _wlr_allocator_autocreate(
      backend,
      renderer,
    );
  }

  late final _wlr_allocator_autocreatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<struct_wlr_allocator> Function(
              ffi.Pointer<struct_wlr_backend>,
              ffi.Pointer<struct_wlr_renderer>)>>('wlr_allocator_autocreate');
  late final _wlr_allocator_autocreate =
      _wlr_allocator_autocreatePtr.asFunction<
          ffi.Pointer<struct_wlr_allocator> Function(
              ffi.Pointer<struct_wlr_backend>,
              ffi.Pointer<struct_wlr_renderer>)>();

  void wlr_allocator_destroy(
    ffi.Pointer<struct_wlr_allocator> alloc,
  ) {
    return _wlr_allocator_destroy(
      alloc,
    );
  }

  late final _wlr_allocator_destroyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wlr_allocator>)>>('wlr_allocator_destroy');
  late final _wlr_allocator_destroy = _wlr_allocator_destroyPtr
      .asFunction<void Function(ffi.Pointer<struct_wlr_allocator>)>();

  ffi.Pointer<struct_wlr_buffer> wlr_allocator_create_buffer(
    ffi.Pointer<struct_wlr_allocator> alloc,
    int width,
    int height,
    ffi.Pointer<struct_wlr_drm_format> format,
  ) {
    return _wlr_allocator_create_buffer(
      alloc,
      width,
      height,
      format,
    );
  }

  late final _wlr_allocator_create_bufferPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<struct_wlr_buffer> Function(
                  ffi.Pointer<struct_wlr_allocator>,
                  ffi.Int,
                  ffi.Int,
                  ffi.Pointer<struct_wlr_drm_format>)>>(
      'wlr_allocator_create_buffer');
  late final _wlr_allocator_create_buffer =
      _wlr_allocator_create_bufferPtr.asFunction<
          ffi.Pointer<struct_wlr_buffer> Function(
              ffi.Pointer<struct_wlr_allocator>,
              int,
              int,
              ffi.Pointer<struct_wlr_drm_format>)>();

  void wlr_dmabuf_attributes_finish(
    ffi.Pointer<struct_wlr_dmabuf_attributes> attribs,
  ) {
    return _wlr_dmabuf_attributes_finish(
      attribs,
    );
  }

  late final _wlr_dmabuf_attributes_finishPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<struct_wlr_dmabuf_attributes>)>>(
      'wlr_dmabuf_attributes_finish');
  late final _wlr_dmabuf_attributes_finish = _wlr_dmabuf_attributes_finishPtr
      .asFunction<void Function(ffi.Pointer<struct_wlr_dmabuf_attributes>)>();

  bool wlr_dmabuf_attributes_copy(
    ffi.Pointer<struct_wlr_dmabuf_attributes> dst,
    ffi.Pointer<struct_wlr_dmabuf_attributes> src,
  ) {
    return _wlr_dmabuf_attributes_copy(
      dst,
      src,
    );
  }

  late final _wlr_dmabuf_attributes_copyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Bool Function(ffi.Pointer<struct_wlr_dmabuf_attributes>,
                  ffi.Pointer<struct_wlr_dmabuf_attributes>)>>(
      'wlr_dmabuf_attributes_copy');
  late final _wlr_dmabuf_attributes_copy =
      _wlr_dmabuf_attributes_copyPtr.asFunction<
          bool Function(ffi.Pointer<struct_wlr_dmabuf_attributes>,
              ffi.Pointer<struct_wlr_dmabuf_attributes>)>();

  ffi.Pointer<struct_wlr_texture> wlr_texture_from_pixels(
    ffi.Pointer<struct_wlr_renderer> renderer,
    int fmt,
    int stride,
    int width,
    int height,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _wlr_texture_from_pixels(
      renderer,
      fmt,
      stride,
      width,
      height,
      data,
    );
  }

  late final _wlr_texture_from_pixelsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<struct_wlr_texture> Function(
              ffi.Pointer<struct_wlr_renderer>,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Pointer<ffi.Void>)>>('wlr_texture_from_pixels');
  late final _wlr_texture_from_pixels = _wlr_texture_from_pixelsPtr.asFunction<
      ffi.Pointer<struct_wlr_texture> Function(ffi.Pointer<struct_wlr_renderer>,
          int, int, int, int, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<struct_wlr_texture> wlr_texture_from_dmabuf(
    ffi.Pointer<struct_wlr_renderer> renderer,
    ffi.Pointer<struct_wlr_dmabuf_attributes> attribs,
  ) {
    return _wlr_texture_from_dmabuf(
      renderer,
      attribs,
    );
  }

  late final _wlr_texture_from_dmabufPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<struct_wlr_texture> Function(
                  ffi.Pointer<struct_wlr_renderer>,
                  ffi.Pointer<struct_wlr_dmabuf_attributes>)>>(
      'wlr_texture_from_dmabuf');
  late final _wlr_texture_from_dmabuf = _wlr_texture_from_dmabufPtr.asFunction<
      ffi.Pointer<struct_wlr_texture> Function(ffi.Pointer<struct_wlr_renderer>,
          ffi.Pointer<struct_wlr_dmabuf_attributes>)>();

  bool wlr_texture_update_from_buffer(
    ffi.Pointer<struct_wlr_texture> texture,
    ffi.Pointer<struct_wlr_buffer> buffer,
    ffi.Pointer<struct_pixman_region32> damage,
  ) {
    return _wlr_texture_update_from_buffer(
      texture,
      buffer,
      damage,
    );
  }

  late final _wlr_texture_update_from_bufferPtr = _lookup<
          ffi.NativeFunction<
              ffi.Bool Function(
                  ffi.Pointer<struct_wlr_texture>,
                  ffi.Pointer<struct_wlr_buffer>,
                  ffi.Pointer<struct_pixman_region32>)>>(
      'wlr_texture_update_from_buffer');
  late final _wlr_texture_update_from_buffer =
      _wlr_texture_update_from_bufferPtr.asFunction<
          bool Function(
              ffi.Pointer<struct_wlr_texture>,
              ffi.Pointer<struct_wlr_buffer>,
              ffi.Pointer<struct_pixman_region32>)>();

  void wlr_texture_destroy(
    ffi.Pointer<struct_wlr_texture> texture,
  ) {
    return _wlr_texture_destroy(
      texture,
    );
  }

  late final _wlr_texture_destroyPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<struct_wlr_texture>)>>(
      'wlr_texture_destroy');
  late final _wlr_texture_destroy = _wlr_texture_destroyPtr
      .asFunction<void Function(ffi.Pointer<struct_wlr_texture>)>();

  ffi.Pointer<struct_wlr_texture> wlr_texture_from_buffer(
    ffi.Pointer<struct_wlr_renderer> renderer,
    ffi.Pointer<struct_wlr_buffer> buffer,
  ) {
    return _wlr_texture_from_buffer(
      renderer,
      buffer,
    );
  }

  late final _wlr_texture_from_bufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<struct_wlr_texture> Function(
              ffi.Pointer<struct_wlr_renderer>,
              ffi.Pointer<struct_wlr_buffer>)>>('wlr_texture_from_buffer');
  late final _wlr_texture_from_buffer = _wlr_texture_from_bufferPtr.asFunction<
      ffi.Pointer<struct_wlr_texture> Function(
          ffi.Pointer<struct_wlr_renderer>, ffi.Pointer<struct_wlr_buffer>)>();

  ffi.Pointer<struct_wlr_renderer> wlr_renderer_autocreate(
    ffi.Pointer<struct_wlr_backend> backend,
  ) {
    return _wlr_renderer_autocreate(
      backend,
    );
  }

  late final _wlr_renderer_autocreatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<struct_wlr_renderer> Function(
              ffi.Pointer<struct_wlr_backend>)>>('wlr_renderer_autocreate');
  late final _wlr_renderer_autocreate = _wlr_renderer_autocreatePtr.asFunction<
      ffi.Pointer<struct_wlr_renderer> Function(
          ffi.Pointer<struct_wlr_backend>)>();

  void wlr_renderer_begin(
    ffi.Pointer<struct_wlr_renderer> r,
    int width,
    int height,
  ) {
    return _wlr_renderer_begin(
      r,
      width,
      height,
    );
  }

  late final _wlr_renderer_beginPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wlr_renderer>, ffi.Uint32,
              ffi.Uint32)>>('wlr_renderer_begin');
  late final _wlr_renderer_begin = _wlr_renderer_beginPtr
      .asFunction<void Function(ffi.Pointer<struct_wlr_renderer>, int, int)>();

  bool wlr_renderer_begin_with_buffer(
    ffi.Pointer<struct_wlr_renderer> r,
    ffi.Pointer<struct_wlr_buffer> buffer,
  ) {
    return _wlr_renderer_begin_with_buffer(
      r,
      buffer,
    );
  }

  late final _wlr_renderer_begin_with_bufferPtr = _lookup<
          ffi.NativeFunction<
              ffi.Bool Function(ffi.Pointer<struct_wlr_renderer>,
                  ffi.Pointer<struct_wlr_buffer>)>>(
      'wlr_renderer_begin_with_buffer');
  late final _wlr_renderer_begin_with_buffer =
      _wlr_renderer_begin_with_bufferPtr.asFunction<
          bool Function(ffi.Pointer<struct_wlr_renderer>,
              ffi.Pointer<struct_wlr_buffer>)>();

  void wlr_renderer_end(
    ffi.Pointer<struct_wlr_renderer> r,
  ) {
    return _wlr_renderer_end(
      r,
    );
  }

  late final _wlr_renderer_endPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<struct_wlr_renderer>)>>(
      'wlr_renderer_end');
  late final _wlr_renderer_end = _wlr_renderer_endPtr
      .asFunction<void Function(ffi.Pointer<struct_wlr_renderer>)>();

  void wlr_renderer_clear(
    ffi.Pointer<struct_wlr_renderer> r,
    ffi.Pointer<ffi.Float> color,
  ) {
    return _wlr_renderer_clear(
      r,
      color,
    );
  }

  late final _wlr_renderer_clearPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wlr_renderer>,
              ffi.Pointer<ffi.Float>)>>('wlr_renderer_clear');
  late final _wlr_renderer_clear = _wlr_renderer_clearPtr.asFunction<
      void Function(
          ffi.Pointer<struct_wlr_renderer>, ffi.Pointer<ffi.Float>)>();

  void wlr_renderer_scissor(
    ffi.Pointer<struct_wlr_renderer> r,
    ffi.Pointer<struct_wlr_box> box,
  ) {
    return _wlr_renderer_scissor(
      r,
      box,
    );
  }

  late final _wlr_renderer_scissorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wlr_renderer>,
              ffi.Pointer<struct_wlr_box>)>>('wlr_renderer_scissor');
  late final _wlr_renderer_scissor = _wlr_renderer_scissorPtr.asFunction<
      void Function(
          ffi.Pointer<struct_wlr_renderer>, ffi.Pointer<struct_wlr_box>)>();

  bool wlr_render_texture(
    ffi.Pointer<struct_wlr_renderer> r,
    ffi.Pointer<struct_wlr_texture> texture,
    ffi.Pointer<ffi.Float> projection,
    int x,
    int y,
    double alpha,
  ) {
    return _wlr_render_texture(
      r,
      texture,
      projection,
      x,
      y,
      alpha,
    );
  }

  late final _wlr_render_texturePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<struct_wlr_renderer>,
              ffi.Pointer<struct_wlr_texture>,
              ffi.Pointer<ffi.Float>,
              ffi.Int,
              ffi.Int,
              ffi.Float)>>('wlr_render_texture');
  late final _wlr_render_texture = _wlr_render_texturePtr.asFunction<
      bool Function(
          ffi.Pointer<struct_wlr_renderer>,
          ffi.Pointer<struct_wlr_texture>,
          ffi.Pointer<ffi.Float>,
          int,
          int,
          double)>();

  bool wlr_render_texture_with_matrix(
    ffi.Pointer<struct_wlr_renderer> r,
    ffi.Pointer<struct_wlr_texture> texture,
    ffi.Pointer<ffi.Float> matrix,
    double alpha,
  ) {
    return _wlr_render_texture_with_matrix(
      r,
      texture,
      matrix,
      alpha,
    );
  }

  late final _wlr_render_texture_with_matrixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<struct_wlr_renderer>,
              ffi.Pointer<struct_wlr_texture>,
              ffi.Pointer<ffi.Float>,
              ffi.Float)>>('wlr_render_texture_with_matrix');
  late final _wlr_render_texture_with_matrix =
      _wlr_render_texture_with_matrixPtr.asFunction<
          bool Function(
              ffi.Pointer<struct_wlr_renderer>,
              ffi.Pointer<struct_wlr_texture>,
              ffi.Pointer<ffi.Float>,
              double)>();

  bool wlr_render_subtexture_with_matrix(
    ffi.Pointer<struct_wlr_renderer> r,
    ffi.Pointer<struct_wlr_texture> texture,
    ffi.Pointer<struct_wlr_fbox> box,
    ffi.Pointer<ffi.Float> matrix,
    double alpha,
  ) {
    return _wlr_render_subtexture_with_matrix(
      r,
      texture,
      box,
      matrix,
      alpha,
    );
  }

  late final _wlr_render_subtexture_with_matrixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<struct_wlr_renderer>,
              ffi.Pointer<struct_wlr_texture>,
              ffi.Pointer<struct_wlr_fbox>,
              ffi.Pointer<ffi.Float>,
              ffi.Float)>>('wlr_render_subtexture_with_matrix');
  late final _wlr_render_subtexture_with_matrix =
      _wlr_render_subtexture_with_matrixPtr.asFunction<
          bool Function(
              ffi.Pointer<struct_wlr_renderer>,
              ffi.Pointer<struct_wlr_texture>,
              ffi.Pointer<struct_wlr_fbox>,
              ffi.Pointer<ffi.Float>,
              double)>();

  void wlr_render_rect(
    ffi.Pointer<struct_wlr_renderer> r,
    ffi.Pointer<struct_wlr_box> box,
    ffi.Pointer<ffi.Float> color,
    ffi.Pointer<ffi.Float> projection,
  ) {
    return _wlr_render_rect(
      r,
      box,
      color,
      projection,
    );
  }

  late final _wlr_render_rectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wlr_renderer>,
              ffi.Pointer<struct_wlr_box>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>)>>('wlr_render_rect');
  late final _wlr_render_rect = _wlr_render_rectPtr.asFunction<
      void Function(
          ffi.Pointer<struct_wlr_renderer>,
          ffi.Pointer<struct_wlr_box>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>)>();

  void wlr_render_quad_with_matrix(
    ffi.Pointer<struct_wlr_renderer> r,
    ffi.Pointer<ffi.Float> color,
    ffi.Pointer<ffi.Float> matrix,
  ) {
    return _wlr_render_quad_with_matrix(
      r,
      color,
      matrix,
    );
  }

  late final _wlr_render_quad_with_matrixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wlr_renderer>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>)>>('wlr_render_quad_with_matrix');
  late final _wlr_render_quad_with_matrix =
      _wlr_render_quad_with_matrixPtr.asFunction<
          void Function(ffi.Pointer<struct_wlr_renderer>,
              ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Float>)>();

  ffi.Pointer<ffi.Uint32> wlr_renderer_get_shm_texture_formats(
    ffi.Pointer<struct_wlr_renderer> r,
    ffi.Pointer<ffi.Size> len,
  ) {
    return _wlr_renderer_get_shm_texture_formats(
      r,
      len,
    );
  }

  late final _wlr_renderer_get_shm_texture_formatsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Uint32> Function(ffi.Pointer<struct_wlr_renderer>,
              ffi.Pointer<ffi.Size>)>>('wlr_renderer_get_shm_texture_formats');
  late final _wlr_renderer_get_shm_texture_formats =
      _wlr_renderer_get_shm_texture_formatsPtr.asFunction<
          ffi.Pointer<ffi.Uint32> Function(
              ffi.Pointer<struct_wlr_renderer>, ffi.Pointer<ffi.Size>)>();

  ffi.Pointer<struct_wlr_drm_format_set>
      wlr_renderer_get_dmabuf_texture_formats(
    ffi.Pointer<struct_wlr_renderer> renderer,
  ) {
    return _wlr_renderer_get_dmabuf_texture_formats(
      renderer,
    );
  }

  late final _wlr_renderer_get_dmabuf_texture_formatsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<struct_wlr_drm_format_set> Function(
                  ffi.Pointer<struct_wlr_renderer>)>>(
      'wlr_renderer_get_dmabuf_texture_formats');
  late final _wlr_renderer_get_dmabuf_texture_formats =
      _wlr_renderer_get_dmabuf_texture_formatsPtr.asFunction<
          ffi.Pointer<struct_wlr_drm_format_set> Function(
              ffi.Pointer<struct_wlr_renderer>)>();

  bool wlr_renderer_read_pixels(
    ffi.Pointer<struct_wlr_renderer> r,
    int fmt,
    int stride,
    int width,
    int height,
    int src_x,
    int src_y,
    int dst_x,
    int dst_y,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _wlr_renderer_read_pixels(
      r,
      fmt,
      stride,
      width,
      height,
      src_x,
      src_y,
      dst_x,
      dst_y,
      data,
    );
  }

  late final _wlr_renderer_read_pixelsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<struct_wlr_renderer>,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Pointer<ffi.Void>)>>('wlr_renderer_read_pixels');
  late final _wlr_renderer_read_pixels =
      _wlr_renderer_read_pixelsPtr.asFunction<
          bool Function(ffi.Pointer<struct_wlr_renderer>, int, int, int, int,
              int, int, int, int, ffi.Pointer<ffi.Void>)>();

  bool wlr_renderer_init_wl_display(
    ffi.Pointer<struct_wlr_renderer> r,
    ffi.Pointer<struct_wl_display> wl_display,
  ) {
    return _wlr_renderer_init_wl_display(
      r,
      wl_display,
    );
  }

  late final _wlr_renderer_init_wl_displayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<struct_wlr_renderer>,
              ffi.Pointer<struct_wl_display>)>>('wlr_renderer_init_wl_display');
  late final _wlr_renderer_init_wl_display =
      _wlr_renderer_init_wl_displayPtr.asFunction<
          bool Function(ffi.Pointer<struct_wlr_renderer>,
              ffi.Pointer<struct_wl_display>)>();

  bool wlr_renderer_init_wl_shm(
    ffi.Pointer<struct_wlr_renderer> r,
    ffi.Pointer<struct_wl_display> wl_display,
  ) {
    return _wlr_renderer_init_wl_shm(
      r,
      wl_display,
    );
  }

  late final _wlr_renderer_init_wl_shmPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<struct_wlr_renderer>,
              ffi.Pointer<struct_wl_display>)>>('wlr_renderer_init_wl_shm');
  late final _wlr_renderer_init_wl_shm =
      _wlr_renderer_init_wl_shmPtr.asFunction<
          bool Function(ffi.Pointer<struct_wlr_renderer>,
              ffi.Pointer<struct_wl_display>)>();

  int wlr_renderer_get_drm_fd(
    ffi.Pointer<struct_wlr_renderer> r,
  ) {
    return _wlr_renderer_get_drm_fd(
      r,
    );
  }

  late final _wlr_renderer_get_drm_fdPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(ffi.Pointer<struct_wlr_renderer>)>>(
      'wlr_renderer_get_drm_fd');
  late final _wlr_renderer_get_drm_fd = _wlr_renderer_get_drm_fdPtr
      .asFunction<int Function(ffi.Pointer<struct_wlr_renderer>)>();

  void wlr_renderer_destroy(
    ffi.Pointer<struct_wlr_renderer> renderer,
  ) {
    return _wlr_renderer_destroy(
      renderer,
    );
  }

  late final _wlr_renderer_destroyPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<struct_wlr_renderer>)>>(
      'wlr_renderer_destroy');
  late final _wlr_renderer_destroy = _wlr_renderer_destroyPtr
      .asFunction<void Function(ffi.Pointer<struct_wlr_renderer>)>();

  void wlr_addon_set_init(
    ffi.Pointer<struct_wlr_addon_set> set1,
  ) {
    return _wlr_addon_set_init(
      set1,
    );
  }

  late final _wlr_addon_set_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wlr_addon_set>)>>('wlr_addon_set_init');
  late final _wlr_addon_set_init = _wlr_addon_set_initPtr
      .asFunction<void Function(ffi.Pointer<struct_wlr_addon_set>)>();

  void wlr_addon_set_finish(
    ffi.Pointer<struct_wlr_addon_set> set1,
  ) {
    return _wlr_addon_set_finish(
      set1,
    );
  }

  late final _wlr_addon_set_finishPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wlr_addon_set>)>>('wlr_addon_set_finish');
  late final _wlr_addon_set_finish = _wlr_addon_set_finishPtr
      .asFunction<void Function(ffi.Pointer<struct_wlr_addon_set>)>();

  void wlr_addon_init(
    ffi.Pointer<struct_wlr_addon> addon,
    ffi.Pointer<struct_wlr_addon_set> set1,
    ffi.Pointer<ffi.Void> owner,
    ffi.Pointer<struct_wlr_addon_interface> impl,
  ) {
    return _wlr_addon_init(
      addon,
      set1,
      owner,
      impl,
    );
  }

  late final _wlr_addon_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wlr_addon>,
              ffi.Pointer<struct_wlr_addon_set>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<struct_wlr_addon_interface>)>>('wlr_addon_init');
  late final _wlr_addon_init = _wlr_addon_initPtr.asFunction<
      void Function(
          ffi.Pointer<struct_wlr_addon>,
          ffi.Pointer<struct_wlr_addon_set>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<struct_wlr_addon_interface>)>();

  void wlr_addon_finish(
    ffi.Pointer<struct_wlr_addon> addon,
  ) {
    return _wlr_addon_finish(
      addon,
    );
  }

  late final _wlr_addon_finishPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<struct_wlr_addon>)>>(
      'wlr_addon_finish');
  late final _wlr_addon_finish = _wlr_addon_finishPtr
      .asFunction<void Function(ffi.Pointer<struct_wlr_addon>)>();

  ffi.Pointer<struct_wlr_addon> wlr_addon_find(
    ffi.Pointer<struct_wlr_addon_set> set1,
    ffi.Pointer<ffi.Void> owner,
    ffi.Pointer<struct_wlr_addon_interface> impl,
  ) {
    return _wlr_addon_find(
      set1,
      owner,
      impl,
    );
  }

  late final _wlr_addon_findPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<struct_wlr_addon> Function(
              ffi.Pointer<struct_wlr_addon_set>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<struct_wlr_addon_interface>)>>('wlr_addon_find');
  late final _wlr_addon_find = _wlr_addon_findPtr.asFunction<
      ffi.Pointer<struct_wlr_addon> Function(ffi.Pointer<struct_wlr_addon_set>,
          ffi.Pointer<ffi.Void>, ffi.Pointer<struct_wlr_addon_interface>)>();

  void wlr_buffer_drop(
    ffi.Pointer<struct_wlr_buffer> buffer,
  ) {
    return _wlr_buffer_drop(
      buffer,
    );
  }

  late final _wlr_buffer_dropPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<struct_wlr_buffer>)>>(
      'wlr_buffer_drop');
  late final _wlr_buffer_drop = _wlr_buffer_dropPtr
      .asFunction<void Function(ffi.Pointer<struct_wlr_buffer>)>();

  ffi.Pointer<struct_wlr_buffer> wlr_buffer_lock(
    ffi.Pointer<struct_wlr_buffer> buffer,
  ) {
    return _wlr_buffer_lock(
      buffer,
    );
  }

  late final _wlr_buffer_lockPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<struct_wlr_buffer> Function(
              ffi.Pointer<struct_wlr_buffer>)>>('wlr_buffer_lock');
  late final _wlr_buffer_lock = _wlr_buffer_lockPtr.asFunction<
      ffi.Pointer<struct_wlr_buffer> Function(
          ffi.Pointer<struct_wlr_buffer>)>();

  void wlr_buffer_unlock(
    ffi.Pointer<struct_wlr_buffer> buffer,
  ) {
    return _wlr_buffer_unlock(
      buffer,
    );
  }

  late final _wlr_buffer_unlockPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<struct_wlr_buffer>)>>(
      'wlr_buffer_unlock');
  late final _wlr_buffer_unlock = _wlr_buffer_unlockPtr
      .asFunction<void Function(ffi.Pointer<struct_wlr_buffer>)>();

  bool wlr_buffer_get_dmabuf(
    ffi.Pointer<struct_wlr_buffer> buffer,
    ffi.Pointer<struct_wlr_dmabuf_attributes> attribs,
  ) {
    return _wlr_buffer_get_dmabuf(
      buffer,
      attribs,
    );
  }

  late final _wlr_buffer_get_dmabufPtr = _lookup<
          ffi.NativeFunction<
              ffi.Bool Function(ffi.Pointer<struct_wlr_buffer>,
                  ffi.Pointer<struct_wlr_dmabuf_attributes>)>>(
      'wlr_buffer_get_dmabuf');
  late final _wlr_buffer_get_dmabuf = _wlr_buffer_get_dmabufPtr.asFunction<
      bool Function(ffi.Pointer<struct_wlr_buffer>,
          ffi.Pointer<struct_wlr_dmabuf_attributes>)>();

  bool wlr_buffer_get_shm(
    ffi.Pointer<struct_wlr_buffer> buffer,
    ffi.Pointer<struct_wlr_shm_attributes> attribs,
  ) {
    return _wlr_buffer_get_shm(
      buffer,
      attribs,
    );
  }

  late final _wlr_buffer_get_shmPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<struct_wlr_buffer>,
              ffi.Pointer<struct_wlr_shm_attributes>)>>('wlr_buffer_get_shm');
  late final _wlr_buffer_get_shm = _wlr_buffer_get_shmPtr.asFunction<
      bool Function(ffi.Pointer<struct_wlr_buffer>,
          ffi.Pointer<struct_wlr_shm_attributes>)>();

  ffi.Pointer<struct_wlr_buffer> wlr_buffer_from_resource(
    ffi.Pointer<struct_wl_resource> resource,
  ) {
    return _wlr_buffer_from_resource(
      resource,
    );
  }

  late final _wlr_buffer_from_resourcePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<struct_wlr_buffer> Function(
              ffi.Pointer<struct_wl_resource>)>>('wlr_buffer_from_resource');
  late final _wlr_buffer_from_resource =
      _wlr_buffer_from_resourcePtr.asFunction<
          ffi.Pointer<struct_wlr_buffer> Function(
              ffi.Pointer<struct_wl_resource>)>();

  bool wlr_buffer_begin_data_ptr_access(
    ffi.Pointer<struct_wlr_buffer> buffer,
    int flags,
    ffi.Pointer<ffi.Pointer<ffi.Void>> data,
    ffi.Pointer<ffi.Uint32> format,
    ffi.Pointer<ffi.Size> stride,
  ) {
    return _wlr_buffer_begin_data_ptr_access(
      buffer,
      flags,
      data,
      format,
      stride,
    );
  }

  late final _wlr_buffer_begin_data_ptr_accessPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<struct_wlr_buffer>,
              ffi.Uint32,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<ffi.Uint32>,
              ffi.Pointer<ffi.Size>)>>('wlr_buffer_begin_data_ptr_access');
  late final _wlr_buffer_begin_data_ptr_access =
      _wlr_buffer_begin_data_ptr_accessPtr.asFunction<
          bool Function(
              ffi.Pointer<struct_wlr_buffer>,
              int,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<ffi.Uint32>,
              ffi.Pointer<ffi.Size>)>();

  void wlr_buffer_end_data_ptr_access(
    ffi.Pointer<struct_wlr_buffer> buffer,
  ) {
    return _wlr_buffer_end_data_ptr_access(
      buffer,
    );
  }

  late final _wlr_buffer_end_data_ptr_accessPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<struct_wlr_buffer>)>>(
      'wlr_buffer_end_data_ptr_access');
  late final _wlr_buffer_end_data_ptr_access =
      _wlr_buffer_end_data_ptr_accessPtr
          .asFunction<void Function(ffi.Pointer<struct_wlr_buffer>)>();

  ffi.Pointer<struct_wlr_client_buffer> wlr_client_buffer_create(
    ffi.Pointer<struct_wlr_buffer> buffer,
    ffi.Pointer<struct_wlr_renderer> renderer,
  ) {
    return _wlr_client_buffer_create(
      buffer,
      renderer,
    );
  }

  late final _wlr_client_buffer_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<struct_wlr_client_buffer> Function(
              ffi.Pointer<struct_wlr_buffer>,
              ffi.Pointer<struct_wlr_renderer>)>>('wlr_client_buffer_create');
  late final _wlr_client_buffer_create =
      _wlr_client_buffer_createPtr.asFunction<
          ffi.Pointer<struct_wlr_client_buffer> Function(
              ffi.Pointer<struct_wlr_buffer>,
              ffi.Pointer<struct_wlr_renderer>)>();

  ffi.Pointer<struct_wlr_client_buffer> wlr_client_buffer_get(
    ffi.Pointer<struct_wlr_buffer> buffer,
  ) {
    return _wlr_client_buffer_get(
      buffer,
    );
  }

  late final _wlr_client_buffer_getPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<struct_wlr_client_buffer> Function(
              ffi.Pointer<struct_wlr_buffer>)>>('wlr_client_buffer_get');
  late final _wlr_client_buffer_get = _wlr_client_buffer_getPtr.asFunction<
      ffi.Pointer<struct_wlr_client_buffer> Function(
          ffi.Pointer<struct_wlr_buffer>)>();

  bool wlr_resource_is_buffer(
    ffi.Pointer<struct_wl_resource> resource,
  ) {
    return _wlr_resource_is_buffer(
      resource,
    );
  }

  late final _wlr_resource_is_bufferPtr = _lookup<
          ffi
          .NativeFunction<ffi.Bool Function(ffi.Pointer<struct_wl_resource>)>>(
      'wlr_resource_is_buffer');
  late final _wlr_resource_is_buffer = _wlr_resource_is_bufferPtr
      .asFunction<bool Function(ffi.Pointer<struct_wl_resource>)>();

  bool wlr_client_buffer_apply_damage(
    ffi.Pointer<struct_wlr_client_buffer> client_buffer,
    ffi.Pointer<struct_wlr_buffer> next,
    ffi.Pointer<struct_pixman_region32> damage,
  ) {
    return _wlr_client_buffer_apply_damage(
      client_buffer,
      next,
      damage,
    );
  }

  late final _wlr_client_buffer_apply_damagePtr = _lookup<
          ffi.NativeFunction<
              ffi.Bool Function(
                  ffi.Pointer<struct_wlr_client_buffer>,
                  ffi.Pointer<struct_wlr_buffer>,
                  ffi.Pointer<struct_pixman_region32>)>>(
      'wlr_client_buffer_apply_damage');
  late final _wlr_client_buffer_apply_damage =
      _wlr_client_buffer_apply_damagePtr.asFunction<
          bool Function(
              ffi.Pointer<struct_wlr_client_buffer>,
              ffi.Pointer<struct_wlr_buffer>,
              ffi.Pointer<struct_pixman_region32>)>();

  void wlr_output_enable(
    ffi.Pointer<struct_wlr_output> output,
    bool enable,
  ) {
    return _wlr_output_enable(
      output,
      enable,
    );
  }

  late final _wlr_output_enablePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wlr_output>, ffi.Bool)>>('wlr_output_enable');
  late final _wlr_output_enable = _wlr_output_enablePtr
      .asFunction<void Function(ffi.Pointer<struct_wlr_output>, bool)>();

  void wlr_output_create_global(
    ffi.Pointer<struct_wlr_output> output,
  ) {
    return _wlr_output_create_global(
      output,
    );
  }

  late final _wlr_output_create_globalPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<struct_wlr_output>)>>(
      'wlr_output_create_global');
  late final _wlr_output_create_global = _wlr_output_create_globalPtr
      .asFunction<void Function(ffi.Pointer<struct_wlr_output>)>();

  void wlr_output_destroy_global(
    ffi.Pointer<struct_wlr_output> output,
  ) {
    return _wlr_output_destroy_global(
      output,
    );
  }

  late final _wlr_output_destroy_globalPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<struct_wlr_output>)>>(
      'wlr_output_destroy_global');
  late final _wlr_output_destroy_global = _wlr_output_destroy_globalPtr
      .asFunction<void Function(ffi.Pointer<struct_wlr_output>)>();

  bool wlr_output_init_render(
    ffi.Pointer<struct_wlr_output> output,
    ffi.Pointer<struct_wlr_allocator> allocator,
    ffi.Pointer<struct_wlr_renderer> renderer,
  ) {
    return _wlr_output_init_render(
      output,
      allocator,
      renderer,
    );
  }

  late final _wlr_output_init_renderPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<struct_wlr_output>,
              ffi.Pointer<struct_wlr_allocator>,
              ffi.Pointer<struct_wlr_renderer>)>>('wlr_output_init_render');
  late final _wlr_output_init_render = _wlr_output_init_renderPtr.asFunction<
      bool Function(
          ffi.Pointer<struct_wlr_output>,
          ffi.Pointer<struct_wlr_allocator>,
          ffi.Pointer<struct_wlr_renderer>)>();

  ffi.Pointer<struct_wlr_output_mode> wlr_output_preferred_mode(
    ffi.Pointer<struct_wlr_output> output,
  ) {
    return _wlr_output_preferred_mode(
      output,
    );
  }

  late final _wlr_output_preferred_modePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<struct_wlr_output_mode> Function(
              ffi.Pointer<struct_wlr_output>)>>('wlr_output_preferred_mode');
  late final _wlr_output_preferred_mode =
      _wlr_output_preferred_modePtr.asFunction<
          ffi.Pointer<struct_wlr_output_mode> Function(
              ffi.Pointer<struct_wlr_output>)>();

  void wlr_output_set_mode(
    ffi.Pointer<struct_wlr_output> output,
    ffi.Pointer<struct_wlr_output_mode> mode,
  ) {
    return _wlr_output_set_mode(
      output,
      mode,
    );
  }

  late final _wlr_output_set_modePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wlr_output>,
              ffi.Pointer<struct_wlr_output_mode>)>>('wlr_output_set_mode');
  late final _wlr_output_set_mode = _wlr_output_set_modePtr.asFunction<
      void Function(ffi.Pointer<struct_wlr_output>,
          ffi.Pointer<struct_wlr_output_mode>)>();

  void wlr_output_set_custom_mode(
    ffi.Pointer<struct_wlr_output> output,
    int width,
    int height,
    int refresh,
  ) {
    return _wlr_output_set_custom_mode(
      output,
      width,
      height,
      refresh,
    );
  }

  late final _wlr_output_set_custom_modePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wlr_output>, ffi.Int32,
              ffi.Int32, ffi.Int32)>>('wlr_output_set_custom_mode');
  late final _wlr_output_set_custom_mode =
      _wlr_output_set_custom_modePtr.asFunction<
          void Function(ffi.Pointer<struct_wlr_output>, int, int, int)>();

  void wlr_output_set_transform(
    ffi.Pointer<struct_wlr_output> output,
    int transform,
  ) {
    return _wlr_output_set_transform(
      output,
      transform,
    );
  }

  late final _wlr_output_set_transformPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wlr_output>,
              ffi.Int32)>>('wlr_output_set_transform');
  late final _wlr_output_set_transform = _wlr_output_set_transformPtr
      .asFunction<void Function(ffi.Pointer<struct_wlr_output>, int)>();

  void wlr_output_enable_adaptive_sync(
    ffi.Pointer<struct_wlr_output> output,
    bool enabled,
  ) {
    return _wlr_output_enable_adaptive_sync(
      output,
      enabled,
    );
  }

  late final _wlr_output_enable_adaptive_syncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wlr_output>,
              ffi.Bool)>>('wlr_output_enable_adaptive_sync');
  late final _wlr_output_enable_adaptive_sync =
      _wlr_output_enable_adaptive_syncPtr
          .asFunction<void Function(ffi.Pointer<struct_wlr_output>, bool)>();

  void wlr_output_set_render_format(
    ffi.Pointer<struct_wlr_output> output,
    int format,
  ) {
    return _wlr_output_set_render_format(
      output,
      format,
    );
  }

  late final _wlr_output_set_render_formatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wlr_output>,
              ffi.Uint32)>>('wlr_output_set_render_format');
  late final _wlr_output_set_render_format = _wlr_output_set_render_formatPtr
      .asFunction<void Function(ffi.Pointer<struct_wlr_output>, int)>();

  void wlr_output_set_scale(
    ffi.Pointer<struct_wlr_output> output,
    double scale,
  ) {
    return _wlr_output_set_scale(
      output,
      scale,
    );
  }

  late final _wlr_output_set_scalePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wlr_output>,
              ffi.Float)>>('wlr_output_set_scale');
  late final _wlr_output_set_scale = _wlr_output_set_scalePtr
      .asFunction<void Function(ffi.Pointer<struct_wlr_output>, double)>();

  void wlr_output_set_subpixel(
    ffi.Pointer<struct_wlr_output> output,
    int subpixel,
  ) {
    return _wlr_output_set_subpixel(
      output,
      subpixel,
    );
  }

  late final _wlr_output_set_subpixelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wlr_output>,
              ffi.Int32)>>('wlr_output_set_subpixel');
  late final _wlr_output_set_subpixel = _wlr_output_set_subpixelPtr
      .asFunction<void Function(ffi.Pointer<struct_wlr_output>, int)>();

  void wlr_output_set_name(
    ffi.Pointer<struct_wlr_output> output,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _wlr_output_set_name(
      output,
      name,
    );
  }

  late final _wlr_output_set_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wlr_output>,
              ffi.Pointer<ffi.Char>)>>('wlr_output_set_name');
  late final _wlr_output_set_name = _wlr_output_set_namePtr.asFunction<
      void Function(ffi.Pointer<struct_wlr_output>, ffi.Pointer<ffi.Char>)>();

  void wlr_output_set_description(
    ffi.Pointer<struct_wlr_output> output,
    ffi.Pointer<ffi.Char> desc,
  ) {
    return _wlr_output_set_description(
      output,
      desc,
    );
  }

  late final _wlr_output_set_descriptionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wlr_output>,
              ffi.Pointer<ffi.Char>)>>('wlr_output_set_description');
  late final _wlr_output_set_description =
      _wlr_output_set_descriptionPtr.asFunction<
          void Function(
              ffi.Pointer<struct_wlr_output>, ffi.Pointer<ffi.Char>)>();

  void wlr_output_schedule_done(
    ffi.Pointer<struct_wlr_output> output,
  ) {
    return _wlr_output_schedule_done(
      output,
    );
  }

  late final _wlr_output_schedule_donePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<struct_wlr_output>)>>(
      'wlr_output_schedule_done');
  late final _wlr_output_schedule_done = _wlr_output_schedule_donePtr
      .asFunction<void Function(ffi.Pointer<struct_wlr_output>)>();

  void wlr_output_destroy(
    ffi.Pointer<struct_wlr_output> output,
  ) {
    return _wlr_output_destroy(
      output,
    );
  }

  late final _wlr_output_destroyPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<struct_wlr_output>)>>(
      'wlr_output_destroy');
  late final _wlr_output_destroy = _wlr_output_destroyPtr
      .asFunction<void Function(ffi.Pointer<struct_wlr_output>)>();

  void wlr_output_transformed_resolution(
    ffi.Pointer<struct_wlr_output> output,
    ffi.Pointer<ffi.Int> width,
    ffi.Pointer<ffi.Int> height,
  ) {
    return _wlr_output_transformed_resolution(
      output,
      width,
      height,
    );
  }

  late final _wlr_output_transformed_resolutionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wlr_output>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('wlr_output_transformed_resolution');
  late final _wlr_output_transformed_resolution =
      _wlr_output_transformed_resolutionPtr.asFunction<
          void Function(ffi.Pointer<struct_wlr_output>, ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>();

  void wlr_output_effective_resolution(
    ffi.Pointer<struct_wlr_output> output,
    ffi.Pointer<ffi.Int> width,
    ffi.Pointer<ffi.Int> height,
  ) {
    return _wlr_output_effective_resolution(
      output,
      width,
      height,
    );
  }

  late final _wlr_output_effective_resolutionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wlr_output>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('wlr_output_effective_resolution');
  late final _wlr_output_effective_resolution =
      _wlr_output_effective_resolutionPtr.asFunction<
          void Function(ffi.Pointer<struct_wlr_output>, ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>();

  bool wlr_output_attach_render(
    ffi.Pointer<struct_wlr_output> output,
    ffi.Pointer<ffi.Int> buffer_age,
  ) {
    return _wlr_output_attach_render(
      output,
      buffer_age,
    );
  }

  late final _wlr_output_attach_renderPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<struct_wlr_output>,
              ffi.Pointer<ffi.Int>)>>('wlr_output_attach_render');
  late final _wlr_output_attach_render =
      _wlr_output_attach_renderPtr.asFunction<
          bool Function(
              ffi.Pointer<struct_wlr_output>, ffi.Pointer<ffi.Int>)>();

  void wlr_output_attach_buffer(
    ffi.Pointer<struct_wlr_output> output,
    ffi.Pointer<struct_wlr_buffer> buffer,
  ) {
    return _wlr_output_attach_buffer(
      output,
      buffer,
    );
  }

  late final _wlr_output_attach_bufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wlr_output>,
              ffi.Pointer<struct_wlr_buffer>)>>('wlr_output_attach_buffer');
  late final _wlr_output_attach_buffer =
      _wlr_output_attach_bufferPtr.asFunction<
          void Function(ffi.Pointer<struct_wlr_output>,
              ffi.Pointer<struct_wlr_buffer>)>();

  int wlr_output_preferred_read_format(
    ffi.Pointer<struct_wlr_output> output,
  ) {
    return _wlr_output_preferred_read_format(
      output,
    );
  }

  late final _wlr_output_preferred_read_formatPtr = _lookup<
          ffi
          .NativeFunction<ffi.Uint32 Function(ffi.Pointer<struct_wlr_output>)>>(
      'wlr_output_preferred_read_format');
  late final _wlr_output_preferred_read_format =
      _wlr_output_preferred_read_formatPtr
          .asFunction<int Function(ffi.Pointer<struct_wlr_output>)>();

  void wlr_output_set_damage(
    ffi.Pointer<struct_wlr_output> output,
    ffi.Pointer<struct_pixman_region32> damage,
  ) {
    return _wlr_output_set_damage(
      output,
      damage,
    );
  }

  late final _wlr_output_set_damagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wlr_output>,
              ffi.Pointer<struct_pixman_region32>)>>('wlr_output_set_damage');
  late final _wlr_output_set_damage = _wlr_output_set_damagePtr.asFunction<
      void Function(ffi.Pointer<struct_wlr_output>,
          ffi.Pointer<struct_pixman_region32>)>();

  bool wlr_output_test(
    ffi.Pointer<struct_wlr_output> output,
  ) {
    return _wlr_output_test(
      output,
    );
  }

  late final _wlr_output_testPtr = _lookup<
          ffi
          .NativeFunction<ffi.Bool Function(ffi.Pointer<struct_wlr_output>)>>(
      'wlr_output_test');
  late final _wlr_output_test = _wlr_output_testPtr
      .asFunction<bool Function(ffi.Pointer<struct_wlr_output>)>();

  bool wlr_output_commit(
    ffi.Pointer<struct_wlr_output> output,
  ) {
    return _wlr_output_commit(
      output,
    );
  }

  late final _wlr_output_commitPtr = _lookup<
          ffi
          .NativeFunction<ffi.Bool Function(ffi.Pointer<struct_wlr_output>)>>(
      'wlr_output_commit');
  late final _wlr_output_commit = _wlr_output_commitPtr
      .asFunction<bool Function(ffi.Pointer<struct_wlr_output>)>();

  void wlr_output_rollback(
    ffi.Pointer<struct_wlr_output> output,
  ) {
    return _wlr_output_rollback(
      output,
    );
  }

  late final _wlr_output_rollbackPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<struct_wlr_output>)>>(
      'wlr_output_rollback');
  late final _wlr_output_rollback = _wlr_output_rollbackPtr
      .asFunction<void Function(ffi.Pointer<struct_wlr_output>)>();

  bool wlr_output_test_state(
    ffi.Pointer<struct_wlr_output> output,
    ffi.Pointer<struct_wlr_output_state> state,
  ) {
    return _wlr_output_test_state(
      output,
      state,
    );
  }

  late final _wlr_output_test_statePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<struct_wlr_output>,
              ffi.Pointer<struct_wlr_output_state>)>>('wlr_output_test_state');
  late final _wlr_output_test_state = _wlr_output_test_statePtr.asFunction<
      bool Function(ffi.Pointer<struct_wlr_output>,
          ffi.Pointer<struct_wlr_output_state>)>();

  bool wlr_output_commit_state(
    ffi.Pointer<struct_wlr_output> output,
    ffi.Pointer<struct_wlr_output_state> state,
  ) {
    return _wlr_output_commit_state(
      output,
      state,
    );
  }

  late final _wlr_output_commit_statePtr = _lookup<
          ffi.NativeFunction<
              ffi.Bool Function(ffi.Pointer<struct_wlr_output>,
                  ffi.Pointer<struct_wlr_output_state>)>>(
      'wlr_output_commit_state');
  late final _wlr_output_commit_state = _wlr_output_commit_statePtr.asFunction<
      bool Function(ffi.Pointer<struct_wlr_output>,
          ffi.Pointer<struct_wlr_output_state>)>();

  void wlr_output_schedule_frame(
    ffi.Pointer<struct_wlr_output> output,
  ) {
    return _wlr_output_schedule_frame(
      output,
    );
  }

  late final _wlr_output_schedule_framePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<struct_wlr_output>)>>(
      'wlr_output_schedule_frame');
  late final _wlr_output_schedule_frame = _wlr_output_schedule_framePtr
      .asFunction<void Function(ffi.Pointer<struct_wlr_output>)>();

  int wlr_output_get_gamma_size(
    ffi.Pointer<struct_wlr_output> output,
  ) {
    return _wlr_output_get_gamma_size(
      output,
    );
  }

  late final _wlr_output_get_gamma_sizePtr = _lookup<
          ffi
          .NativeFunction<ffi.Size Function(ffi.Pointer<struct_wlr_output>)>>(
      'wlr_output_get_gamma_size');
  late final _wlr_output_get_gamma_size = _wlr_output_get_gamma_sizePtr
      .asFunction<int Function(ffi.Pointer<struct_wlr_output>)>();

  void wlr_output_set_gamma(
    ffi.Pointer<struct_wlr_output> output,
    int size,
    ffi.Pointer<ffi.Uint16> r,
    ffi.Pointer<ffi.Uint16> g,
    ffi.Pointer<ffi.Uint16> b,
  ) {
    return _wlr_output_set_gamma(
      output,
      size,
      r,
      g,
      b,
    );
  }

  late final _wlr_output_set_gammaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wlr_output>,
              ffi.Size,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>)>>('wlr_output_set_gamma');
  late final _wlr_output_set_gamma = _wlr_output_set_gammaPtr.asFunction<
      void Function(
          ffi.Pointer<struct_wlr_output>,
          int,
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>)>();

  ffi.Pointer<struct_wlr_output> wlr_output_from_resource(
    ffi.Pointer<struct_wl_resource> resource,
  ) {
    return _wlr_output_from_resource(
      resource,
    );
  }

  late final _wlr_output_from_resourcePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<struct_wlr_output> Function(
              ffi.Pointer<struct_wl_resource>)>>('wlr_output_from_resource');
  late final _wlr_output_from_resource =
      _wlr_output_from_resourcePtr.asFunction<
          ffi.Pointer<struct_wlr_output> Function(
              ffi.Pointer<struct_wl_resource>)>();

  void wlr_output_lock_attach_render(
    ffi.Pointer<struct_wlr_output> output,
    bool lock,
  ) {
    return _wlr_output_lock_attach_render(
      output,
      lock,
    );
  }

  late final _wlr_output_lock_attach_renderPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wlr_output>,
              ffi.Bool)>>('wlr_output_lock_attach_render');
  late final _wlr_output_lock_attach_render = _wlr_output_lock_attach_renderPtr
      .asFunction<void Function(ffi.Pointer<struct_wlr_output>, bool)>();

  void wlr_output_lock_software_cursors(
    ffi.Pointer<struct_wlr_output> output,
    bool lock,
  ) {
    return _wlr_output_lock_software_cursors(
      output,
      lock,
    );
  }

  late final _wlr_output_lock_software_cursorsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wlr_output>,
              ffi.Bool)>>('wlr_output_lock_software_cursors');
  late final _wlr_output_lock_software_cursors =
      _wlr_output_lock_software_cursorsPtr
          .asFunction<void Function(ffi.Pointer<struct_wlr_output>, bool)>();

  void wlr_output_render_software_cursors(
    ffi.Pointer<struct_wlr_output> output,
    ffi.Pointer<struct_pixman_region32> damage,
  ) {
    return _wlr_output_render_software_cursors(
      output,
      damage,
    );
  }

  late final _wlr_output_render_software_cursorsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<struct_wlr_output>,
                  ffi.Pointer<struct_pixman_region32>)>>(
      'wlr_output_render_software_cursors');
  late final _wlr_output_render_software_cursors =
      _wlr_output_render_software_cursorsPtr.asFunction<
          void Function(ffi.Pointer<struct_wlr_output>,
              ffi.Pointer<struct_pixman_region32>)>();

  ffi.Pointer<struct_wlr_drm_format_set> wlr_output_get_primary_formats(
    ffi.Pointer<struct_wlr_output> output,
    int buffer_caps,
  ) {
    return _wlr_output_get_primary_formats(
      output,
      buffer_caps,
    );
  }

  late final _wlr_output_get_primary_formatsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<struct_wlr_drm_format_set> Function(
              ffi.Pointer<struct_wlr_output>,
              ffi.Uint32)>>('wlr_output_get_primary_formats');
  late final _wlr_output_get_primary_formats =
      _wlr_output_get_primary_formatsPtr.asFunction<
          ffi.Pointer<struct_wlr_drm_format_set> Function(
              ffi.Pointer<struct_wlr_output>, int)>();

  ffi.Pointer<struct_wlr_output_cursor> wlr_output_cursor_create(
    ffi.Pointer<struct_wlr_output> output,
  ) {
    return _wlr_output_cursor_create(
      output,
    );
  }

  late final _wlr_output_cursor_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<struct_wlr_output_cursor> Function(
              ffi.Pointer<struct_wlr_output>)>>('wlr_output_cursor_create');
  late final _wlr_output_cursor_create =
      _wlr_output_cursor_createPtr.asFunction<
          ffi.Pointer<struct_wlr_output_cursor> Function(
              ffi.Pointer<struct_wlr_output>)>();

  bool wlr_output_cursor_set_image(
    ffi.Pointer<struct_wlr_output_cursor> cursor,
    ffi.Pointer<ffi.Uint8> pixels,
    int stride,
    int width,
    int height,
    int hotspot_x,
    int hotspot_y,
  ) {
    return _wlr_output_cursor_set_image(
      cursor,
      pixels,
      stride,
      width,
      height,
      hotspot_x,
      hotspot_y,
    );
  }

  late final _wlr_output_cursor_set_imagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<struct_wlr_output_cursor>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int32,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Int32,
              ffi.Int32)>>('wlr_output_cursor_set_image');
  late final _wlr_output_cursor_set_image =
      _wlr_output_cursor_set_imagePtr.asFunction<
          bool Function(ffi.Pointer<struct_wlr_output_cursor>,
              ffi.Pointer<ffi.Uint8>, int, int, int, int, int)>();

  void wlr_output_cursor_set_surface(
    ffi.Pointer<struct_wlr_output_cursor> cursor,
    ffi.Pointer<struct_wlr_surface> surface,
    int hotspot_x,
    int hotspot_y,
  ) {
    return _wlr_output_cursor_set_surface(
      cursor,
      surface,
      hotspot_x,
      hotspot_y,
    );
  }

  late final _wlr_output_cursor_set_surfacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wlr_output_cursor>,
              ffi.Pointer<struct_wlr_surface>,
              ffi.Int32,
              ffi.Int32)>>('wlr_output_cursor_set_surface');
  late final _wlr_output_cursor_set_surface =
      _wlr_output_cursor_set_surfacePtr.asFunction<
          void Function(ffi.Pointer<struct_wlr_output_cursor>,
              ffi.Pointer<struct_wlr_surface>, int, int)>();

  bool wlr_output_cursor_set_buffer(
    ffi.Pointer<struct_wlr_output_cursor> cursor,
    ffi.Pointer<struct_wlr_buffer> buffer,
    int hotspot_x,
    int hotspot_y,
  ) {
    return _wlr_output_cursor_set_buffer(
      cursor,
      buffer,
      hotspot_x,
      hotspot_y,
    );
  }

  late final _wlr_output_cursor_set_bufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<struct_wlr_output_cursor>,
              ffi.Pointer<struct_wlr_buffer>,
              ffi.Int32,
              ffi.Int32)>>('wlr_output_cursor_set_buffer');
  late final _wlr_output_cursor_set_buffer =
      _wlr_output_cursor_set_bufferPtr.asFunction<
          bool Function(ffi.Pointer<struct_wlr_output_cursor>,
              ffi.Pointer<struct_wlr_buffer>, int, int)>();

  bool wlr_output_cursor_move(
    ffi.Pointer<struct_wlr_output_cursor> cursor,
    double x,
    double y,
  ) {
    return _wlr_output_cursor_move(
      cursor,
      x,
      y,
    );
  }

  late final _wlr_output_cursor_movePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<struct_wlr_output_cursor>, ffi.Double,
              ffi.Double)>>('wlr_output_cursor_move');
  late final _wlr_output_cursor_move = _wlr_output_cursor_movePtr.asFunction<
      bool Function(ffi.Pointer<struct_wlr_output_cursor>, double, double)>();

  void wlr_output_cursor_destroy(
    ffi.Pointer<struct_wlr_output_cursor> cursor,
  ) {
    return _wlr_output_cursor_destroy(
      cursor,
    );
  }

  late final _wlr_output_cursor_destroyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<struct_wlr_output_cursor>)>>(
      'wlr_output_cursor_destroy');
  late final _wlr_output_cursor_destroy = _wlr_output_cursor_destroyPtr
      .asFunction<void Function(ffi.Pointer<struct_wlr_output_cursor>)>();

  void wlr_output_state_set_enabled(
    ffi.Pointer<struct_wlr_output_state> state,
    bool enabled,
  ) {
    return _wlr_output_state_set_enabled(
      state,
      enabled,
    );
  }

  late final _wlr_output_state_set_enabledPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wlr_output_state>,
              ffi.Bool)>>('wlr_output_state_set_enabled');
  late final _wlr_output_state_set_enabled = _wlr_output_state_set_enabledPtr
      .asFunction<void Function(ffi.Pointer<struct_wlr_output_state>, bool)>();

  void wlr_output_state_set_mode(
    ffi.Pointer<struct_wlr_output_state> state,
    ffi.Pointer<struct_wlr_output_mode> mode,
  ) {
    return _wlr_output_state_set_mode(
      state,
      mode,
    );
  }

  late final _wlr_output_state_set_modePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<struct_wlr_output_state>,
                  ffi.Pointer<struct_wlr_output_mode>)>>(
      'wlr_output_state_set_mode');
  late final _wlr_output_state_set_mode =
      _wlr_output_state_set_modePtr.asFunction<
          void Function(ffi.Pointer<struct_wlr_output_state>,
              ffi.Pointer<struct_wlr_output_mode>)>();

  void wlr_output_state_set_custom_mode(
    ffi.Pointer<struct_wlr_output_state> state,
    int width,
    int height,
    int refresh,
  ) {
    return _wlr_output_state_set_custom_mode(
      state,
      width,
      height,
      refresh,
    );
  }

  late final _wlr_output_state_set_custom_modePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wlr_output_state>, ffi.Int32,
              ffi.Int32, ffi.Int32)>>('wlr_output_state_set_custom_mode');
  late final _wlr_output_state_set_custom_mode =
      _wlr_output_state_set_custom_modePtr.asFunction<
          void Function(ffi.Pointer<struct_wlr_output_state>, int, int, int)>();

  void wlr_output_state_set_scale(
    ffi.Pointer<struct_wlr_output_state> state,
    double scale,
  ) {
    return _wlr_output_state_set_scale(
      state,
      scale,
    );
  }

  late final _wlr_output_state_set_scalePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wlr_output_state>,
              ffi.Float)>>('wlr_output_state_set_scale');
  late final _wlr_output_state_set_scale =
      _wlr_output_state_set_scalePtr.asFunction<
          void Function(ffi.Pointer<struct_wlr_output_state>, double)>();

  void wlr_output_state_set_transform(
    ffi.Pointer<struct_wlr_output_state> state,
    int transform,
  ) {
    return _wlr_output_state_set_transform(
      state,
      transform,
    );
  }

  late final _wlr_output_state_set_transformPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wlr_output_state>,
              ffi.Int32)>>('wlr_output_state_set_transform');
  late final _wlr_output_state_set_transform =
      _wlr_output_state_set_transformPtr.asFunction<
          void Function(ffi.Pointer<struct_wlr_output_state>, int)>();

  void wlr_output_state_set_adaptive_sync_enabled(
    ffi.Pointer<struct_wlr_output_state> state,
    bool enabled,
  ) {
    return _wlr_output_state_set_adaptive_sync_enabled(
      state,
      enabled,
    );
  }

  late final _wlr_output_state_set_adaptive_sync_enabledPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wlr_output_state>,
              ffi.Bool)>>('wlr_output_state_set_adaptive_sync_enabled');
  late final _wlr_output_state_set_adaptive_sync_enabled =
      _wlr_output_state_set_adaptive_sync_enabledPtr.asFunction<
          void Function(ffi.Pointer<struct_wlr_output_state>, bool)>();

  void wlr_output_state_set_render_format(
    ffi.Pointer<struct_wlr_output_state> state,
    int format,
  ) {
    return _wlr_output_state_set_render_format(
      state,
      format,
    );
  }

  late final _wlr_output_state_set_render_formatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wlr_output_state>,
              ffi.Uint32)>>('wlr_output_state_set_render_format');
  late final _wlr_output_state_set_render_format =
      _wlr_output_state_set_render_formatPtr.asFunction<
          void Function(ffi.Pointer<struct_wlr_output_state>, int)>();

  void wlr_output_state_set_subpixel(
    ffi.Pointer<struct_wlr_output_state> state,
    int subpixel,
  ) {
    return _wlr_output_state_set_subpixel(
      state,
      subpixel,
    );
  }

  late final _wlr_output_state_set_subpixelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wlr_output_state>,
              ffi.Int32)>>('wlr_output_state_set_subpixel');
  late final _wlr_output_state_set_subpixel = _wlr_output_state_set_subpixelPtr
      .asFunction<void Function(ffi.Pointer<struct_wlr_output_state>, int)>();

  int wlr_output_transform_invert(
    int tr,
  ) {
    return _wlr_output_transform_invert(
      tr,
    );
  }

  late final _wlr_output_transform_invertPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>(
          'wlr_output_transform_invert');
  late final _wlr_output_transform_invert =
      _wlr_output_transform_invertPtr.asFunction<int Function(int)>();

  int wlr_output_transform_compose(
    int tr_a,
    int tr_b,
  ) {
    return _wlr_output_transform_compose(
      tr_a,
      tr_b,
    );
  }

  late final _wlr_output_transform_composePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Int32)>>(
          'wlr_output_transform_compose');
  late final _wlr_output_transform_compose =
      _wlr_output_transform_composePtr.asFunction<int Function(int, int)>();

  void wlr_box_closest_point(
    ffi.Pointer<struct_wlr_box> box,
    double x,
    double y,
    ffi.Pointer<ffi.Double> dest_x,
    ffi.Pointer<ffi.Double> dest_y,
  ) {
    return _wlr_box_closest_point(
      box,
      x,
      y,
      dest_x,
      dest_y,
    );
  }

  late final _wlr_box_closest_pointPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wlr_box>,
              ffi.Double,
              ffi.Double,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('wlr_box_closest_point');
  late final _wlr_box_closest_point = _wlr_box_closest_pointPtr.asFunction<
      void Function(ffi.Pointer<struct_wlr_box>, double, double,
          ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>)>();

  bool wlr_box_intersection(
    ffi.Pointer<struct_wlr_box> dest,
    ffi.Pointer<struct_wlr_box> box_a,
    ffi.Pointer<struct_wlr_box> box_b,
  ) {
    return _wlr_box_intersection(
      dest,
      box_a,
      box_b,
    );
  }

  late final _wlr_box_intersectionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<struct_wlr_box>,
              ffi.Pointer<struct_wlr_box>,
              ffi.Pointer<struct_wlr_box>)>>('wlr_box_intersection');
  late final _wlr_box_intersection = _wlr_box_intersectionPtr.asFunction<
      bool Function(ffi.Pointer<struct_wlr_box>, ffi.Pointer<struct_wlr_box>,
          ffi.Pointer<struct_wlr_box>)>();

  bool wlr_box_contains_point(
    ffi.Pointer<struct_wlr_box> box,
    double x,
    double y,
  ) {
    return _wlr_box_contains_point(
      box,
      x,
      y,
    );
  }

  late final _wlr_box_contains_pointPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<struct_wlr_box>, ffi.Double,
              ffi.Double)>>('wlr_box_contains_point');
  late final _wlr_box_contains_point = _wlr_box_contains_pointPtr
      .asFunction<bool Function(ffi.Pointer<struct_wlr_box>, double, double)>();

  bool wlr_box_empty(
    ffi.Pointer<struct_wlr_box> box,
  ) {
    return _wlr_box_empty(
      box,
    );
  }

  late final _wlr_box_emptyPtr = _lookup<
          ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<struct_wlr_box>)>>(
      'wlr_box_empty');
  late final _wlr_box_empty = _wlr_box_emptyPtr
      .asFunction<bool Function(ffi.Pointer<struct_wlr_box>)>();

  void wlr_box_transform(
    ffi.Pointer<struct_wlr_box> dest,
    ffi.Pointer<struct_wlr_box> box,
    int transform,
    int width,
    int height,
  ) {
    return _wlr_box_transform(
      dest,
      box,
      transform,
      width,
      height,
    );
  }

  late final _wlr_box_transformPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wlr_box>,
              ffi.Pointer<struct_wlr_box>,
              ffi.Int32,
              ffi.Int,
              ffi.Int)>>('wlr_box_transform');
  late final _wlr_box_transform = _wlr_box_transformPtr.asFunction<
      void Function(ffi.Pointer<struct_wlr_box>, ffi.Pointer<struct_wlr_box>,
          int, int, int)>();

  bool wlr_fbox_empty(
    ffi.Pointer<struct_wlr_fbox> box,
  ) {
    return _wlr_fbox_empty(
      box,
    );
  }

  late final _wlr_fbox_emptyPtr = _lookup<
          ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<struct_wlr_fbox>)>>(
      'wlr_fbox_empty');
  late final _wlr_fbox_empty = _wlr_fbox_emptyPtr
      .asFunction<bool Function(ffi.Pointer<struct_wlr_fbox>)>();

  void wlr_fbox_transform(
    ffi.Pointer<struct_wlr_fbox> dest,
    ffi.Pointer<struct_wlr_fbox> box,
    int transform,
    double width,
    double height,
  ) {
    return _wlr_fbox_transform(
      dest,
      box,
      transform,
      width,
      height,
    );
  }

  late final _wlr_fbox_transformPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wlr_fbox>,
              ffi.Pointer<struct_wlr_fbox>,
              ffi.Int32,
              ffi.Double,
              ffi.Double)>>('wlr_fbox_transform');
  late final _wlr_fbox_transform = _wlr_fbox_transformPtr.asFunction<
      void Function(ffi.Pointer<struct_wlr_fbox>, ffi.Pointer<struct_wlr_fbox>,
          int, double, double)>();

  bool wlr_box_equal(
    ffi.Pointer<struct_wlr_box> a,
    ffi.Pointer<struct_wlr_box> b,
  ) {
    return _wlr_box_equal(
      a,
      b,
    );
  }

  late final _wlr_box_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<struct_wlr_box>,
              ffi.Pointer<struct_wlr_box>)>>('wlr_box_equal');
  late final _wlr_box_equal = _wlr_box_equalPtr.asFunction<
      bool Function(
          ffi.Pointer<struct_wlr_box>, ffi.Pointer<struct_wlr_box>)>();

  bool wlr_fbox_equal(
    ffi.Pointer<struct_wlr_fbox> a,
    ffi.Pointer<struct_wlr_fbox> b,
  ) {
    return _wlr_fbox_equal(
      a,
      b,
    );
  }

  late final _wlr_fbox_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<struct_wlr_fbox>,
              ffi.Pointer<struct_wlr_fbox>)>>('wlr_fbox_equal');
  late final _wlr_fbox_equal = _wlr_fbox_equalPtr.asFunction<
      bool Function(
          ffi.Pointer<struct_wlr_fbox>, ffi.Pointer<struct_wlr_fbox>)>();

  bool wlr_surface_set_role(
    ffi.Pointer<struct_wlr_surface> surface,
    ffi.Pointer<struct_wlr_surface_role> role,
    ffi.Pointer<ffi.Void> role_data,
    ffi.Pointer<struct_wl_resource> error_resource,
    int error_code,
  ) {
    return _wlr_surface_set_role(
      surface,
      role,
      role_data,
      error_resource,
      error_code,
    );
  }

  late final _wlr_surface_set_rolePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<struct_wlr_surface>,
              ffi.Pointer<struct_wlr_surface_role>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<struct_wl_resource>,
              ffi.Uint32)>>('wlr_surface_set_role');
  late final _wlr_surface_set_role = _wlr_surface_set_rolePtr.asFunction<
      bool Function(
          ffi.Pointer<struct_wlr_surface>,
          ffi.Pointer<struct_wlr_surface_role>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<struct_wl_resource>,
          int)>();

  void wlr_surface_destroy_role_object(
    ffi.Pointer<struct_wlr_surface> surface,
  ) {
    return _wlr_surface_destroy_role_object(
      surface,
    );
  }

  late final _wlr_surface_destroy_role_objectPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<struct_wlr_surface>)>>(
      'wlr_surface_destroy_role_object');
  late final _wlr_surface_destroy_role_object =
      _wlr_surface_destroy_role_objectPtr
          .asFunction<void Function(ffi.Pointer<struct_wlr_surface>)>();

  bool wlr_surface_has_buffer(
    ffi.Pointer<struct_wlr_surface> surface,
  ) {
    return _wlr_surface_has_buffer(
      surface,
    );
  }

  late final _wlr_surface_has_bufferPtr = _lookup<
          ffi
          .NativeFunction<ffi.Bool Function(ffi.Pointer<struct_wlr_surface>)>>(
      'wlr_surface_has_buffer');
  late final _wlr_surface_has_buffer = _wlr_surface_has_bufferPtr
      .asFunction<bool Function(ffi.Pointer<struct_wlr_surface>)>();

  ffi.Pointer<struct_wlr_texture> wlr_surface_get_texture(
    ffi.Pointer<struct_wlr_surface> surface,
  ) {
    return _wlr_surface_get_texture(
      surface,
    );
  }

  late final _wlr_surface_get_texturePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<struct_wlr_texture> Function(
              ffi.Pointer<struct_wlr_surface>)>>('wlr_surface_get_texture');
  late final _wlr_surface_get_texture = _wlr_surface_get_texturePtr.asFunction<
      ffi.Pointer<struct_wlr_texture> Function(
          ffi.Pointer<struct_wlr_surface>)>();

  ffi.Pointer<struct_wlr_surface> wlr_surface_get_root_surface(
    ffi.Pointer<struct_wlr_surface> surface,
  ) {
    return _wlr_surface_get_root_surface(
      surface,
    );
  }

  late final _wlr_surface_get_root_surfacePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<struct_wlr_surface> Function(
                  ffi.Pointer<struct_wlr_surface>)>>(
      'wlr_surface_get_root_surface');
  late final _wlr_surface_get_root_surface =
      _wlr_surface_get_root_surfacePtr.asFunction<
          ffi.Pointer<struct_wlr_surface> Function(
              ffi.Pointer<struct_wlr_surface>)>();

  bool wlr_surface_point_accepts_input(
    ffi.Pointer<struct_wlr_surface> surface,
    double sx,
    double sy,
  ) {
    return _wlr_surface_point_accepts_input(
      surface,
      sx,
      sy,
    );
  }

  late final _wlr_surface_point_accepts_inputPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<struct_wlr_surface>, ffi.Double,
              ffi.Double)>>('wlr_surface_point_accepts_input');
  late final _wlr_surface_point_accepts_input =
      _wlr_surface_point_accepts_inputPtr.asFunction<
          bool Function(ffi.Pointer<struct_wlr_surface>, double, double)>();

  ffi.Pointer<struct_wlr_surface> wlr_surface_surface_at(
    ffi.Pointer<struct_wlr_surface> surface,
    double sx,
    double sy,
    ffi.Pointer<ffi.Double> sub_x,
    ffi.Pointer<ffi.Double> sub_y,
  ) {
    return _wlr_surface_surface_at(
      surface,
      sx,
      sy,
      sub_x,
      sub_y,
    );
  }

  late final _wlr_surface_surface_atPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<struct_wlr_surface> Function(
              ffi.Pointer<struct_wlr_surface>,
              ffi.Double,
              ffi.Double,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('wlr_surface_surface_at');
  late final _wlr_surface_surface_at = _wlr_surface_surface_atPtr.asFunction<
      ffi.Pointer<struct_wlr_surface> Function(ffi.Pointer<struct_wlr_surface>,
          double, double, ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>)>();

  void wlr_surface_send_enter(
    ffi.Pointer<struct_wlr_surface> surface,
    ffi.Pointer<struct_wlr_output> output,
  ) {
    return _wlr_surface_send_enter(
      surface,
      output,
    );
  }

  late final _wlr_surface_send_enterPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wlr_surface>,
              ffi.Pointer<struct_wlr_output>)>>('wlr_surface_send_enter');
  late final _wlr_surface_send_enter = _wlr_surface_send_enterPtr.asFunction<
      void Function(
          ffi.Pointer<struct_wlr_surface>, ffi.Pointer<struct_wlr_output>)>();

  void wlr_surface_send_leave(
    ffi.Pointer<struct_wlr_surface> surface,
    ffi.Pointer<struct_wlr_output> output,
  ) {
    return _wlr_surface_send_leave(
      surface,
      output,
    );
  }

  late final _wlr_surface_send_leavePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wlr_surface>,
              ffi.Pointer<struct_wlr_output>)>>('wlr_surface_send_leave');
  late final _wlr_surface_send_leave = _wlr_surface_send_leavePtr.asFunction<
      void Function(
          ffi.Pointer<struct_wlr_surface>, ffi.Pointer<struct_wlr_output>)>();

  void wlr_surface_send_frame_done(
    ffi.Pointer<struct_wlr_surface> surface,
    ffi.Pointer<struct_timespec> when,
  ) {
    return _wlr_surface_send_frame_done(
      surface,
      when,
    );
  }

  late final _wlr_surface_send_frame_donePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wlr_surface>,
              ffi.Pointer<struct_timespec>)>>('wlr_surface_send_frame_done');
  late final _wlr_surface_send_frame_done =
      _wlr_surface_send_frame_donePtr.asFunction<
          void Function(
              ffi.Pointer<struct_wlr_surface>, ffi.Pointer<struct_timespec>)>();

  void wlr_surface_get_extends(
    ffi.Pointer<struct_wlr_surface> surface,
    ffi.Pointer<struct_wlr_box> box,
  ) {
    return _wlr_surface_get_extends(
      surface,
      box,
    );
  }

  late final _wlr_surface_get_extendsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wlr_surface>,
              ffi.Pointer<struct_wlr_box>)>>('wlr_surface_get_extends');
  late final _wlr_surface_get_extends = _wlr_surface_get_extendsPtr.asFunction<
      void Function(
          ffi.Pointer<struct_wlr_surface>, ffi.Pointer<struct_wlr_box>)>();

  ffi.Pointer<struct_wlr_surface> wlr_surface_from_resource(
    ffi.Pointer<struct_wl_resource> resource,
  ) {
    return _wlr_surface_from_resource(
      resource,
    );
  }

  late final _wlr_surface_from_resourcePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<struct_wlr_surface> Function(
              ffi.Pointer<struct_wl_resource>)>>('wlr_surface_from_resource');
  late final _wlr_surface_from_resource =
      _wlr_surface_from_resourcePtr.asFunction<
          ffi.Pointer<struct_wlr_surface> Function(
              ffi.Pointer<struct_wl_resource>)>();

  void wlr_surface_for_each_surface(
    ffi.Pointer<struct_wlr_surface> surface,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<struct_wlr_surface>, ffi.Int,
                    ffi.Int, ffi.Pointer<ffi.Void>)>>
        iterator,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _wlr_surface_for_each_surface(
      surface,
      iterator,
      user_data,
    );
  }

  late final _wlr_surface_for_each_surfacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wlr_surface>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<struct_wlr_surface>,
                          ffi.Int, ffi.Int, ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>>('wlr_surface_for_each_surface');
  late final _wlr_surface_for_each_surface =
      _wlr_surface_for_each_surfacePtr.asFunction<
          void Function(
              ffi.Pointer<struct_wlr_surface>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<struct_wlr_surface>,
                          ffi.Int, ffi.Int, ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>();

  void wlr_surface_get_effective_damage(
    ffi.Pointer<struct_wlr_surface> surface,
    ffi.Pointer<struct_pixman_region32> damage,
  ) {
    return _wlr_surface_get_effective_damage(
      surface,
      damage,
    );
  }

  late final _wlr_surface_get_effective_damagePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<struct_wlr_surface>,
                  ffi.Pointer<struct_pixman_region32>)>>(
      'wlr_surface_get_effective_damage');
  late final _wlr_surface_get_effective_damage =
      _wlr_surface_get_effective_damagePtr.asFunction<
          void Function(ffi.Pointer<struct_wlr_surface>,
              ffi.Pointer<struct_pixman_region32>)>();

  void wlr_surface_get_buffer_source_box(
    ffi.Pointer<struct_wlr_surface> surface,
    ffi.Pointer<struct_wlr_fbox> box,
  ) {
    return _wlr_surface_get_buffer_source_box(
      surface,
      box,
    );
  }

  late final _wlr_surface_get_buffer_source_boxPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<struct_wlr_surface>,
                  ffi.Pointer<struct_wlr_fbox>)>>(
      'wlr_surface_get_buffer_source_box');
  late final _wlr_surface_get_buffer_source_box =
      _wlr_surface_get_buffer_source_boxPtr.asFunction<
          void Function(
              ffi.Pointer<struct_wlr_surface>, ffi.Pointer<struct_wlr_fbox>)>();

  int wlr_surface_lock_pending(
    ffi.Pointer<struct_wlr_surface> surface,
  ) {
    return _wlr_surface_lock_pending(
      surface,
    );
  }

  late final _wlr_surface_lock_pendingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint32 Function(
              ffi.Pointer<struct_wlr_surface>)>>('wlr_surface_lock_pending');
  late final _wlr_surface_lock_pending = _wlr_surface_lock_pendingPtr
      .asFunction<int Function(ffi.Pointer<struct_wlr_surface>)>();

  void wlr_surface_unlock_cached(
    ffi.Pointer<struct_wlr_surface> surface,
    int seq,
  ) {
    return _wlr_surface_unlock_cached(
      surface,
      seq,
    );
  }

  late final _wlr_surface_unlock_cachedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wlr_surface>,
              ffi.Uint32)>>('wlr_surface_unlock_cached');
  late final _wlr_surface_unlock_cached = _wlr_surface_unlock_cachedPtr
      .asFunction<void Function(ffi.Pointer<struct_wlr_surface>, int)>();

  ffi.Pointer<struct_wlr_compositor> wlr_compositor_create(
    ffi.Pointer<struct_wl_display> display,
    ffi.Pointer<struct_wlr_renderer> renderer,
  ) {
    return _wlr_compositor_create(
      display,
      renderer,
    );
  }

  late final _wlr_compositor_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<struct_wlr_compositor> Function(
              ffi.Pointer<struct_wl_display>,
              ffi.Pointer<struct_wlr_renderer>)>>('wlr_compositor_create');
  late final _wlr_compositor_create = _wlr_compositor_createPtr.asFunction<
      ffi.Pointer<struct_wlr_compositor> Function(
          ffi.Pointer<struct_wl_display>, ffi.Pointer<struct_wlr_renderer>)>();

  ffi.Pointer<struct_wlr_keyboard> wlr_keyboard_from_input_device(
    ffi.Pointer<struct_wlr_input_device> input_device,
  ) {
    return _wlr_keyboard_from_input_device(
      input_device,
    );
  }

  late final _wlr_keyboard_from_input_devicePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<struct_wlr_keyboard> Function(
                  ffi.Pointer<struct_wlr_input_device>)>>(
      'wlr_keyboard_from_input_device');
  late final _wlr_keyboard_from_input_device =
      _wlr_keyboard_from_input_devicePtr.asFunction<
          ffi.Pointer<struct_wlr_keyboard> Function(
              ffi.Pointer<struct_wlr_input_device>)>();

  bool wlr_keyboard_set_keymap(
    ffi.Pointer<struct_wlr_keyboard> kb,
    ffi.Pointer<struct_xkb_keymap> keymap,
  ) {
    return _wlr_keyboard_set_keymap(
      kb,
      keymap,
    );
  }

  late final _wlr_keyboard_set_keymapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<struct_wlr_keyboard>,
              ffi.Pointer<struct_xkb_keymap>)>>('wlr_keyboard_set_keymap');
  late final _wlr_keyboard_set_keymap = _wlr_keyboard_set_keymapPtr.asFunction<
      bool Function(
          ffi.Pointer<struct_wlr_keyboard>, ffi.Pointer<struct_xkb_keymap>)>();

  bool wlr_keyboard_keymaps_match(
    ffi.Pointer<struct_xkb_keymap> km1,
    ffi.Pointer<struct_xkb_keymap> km2,
  ) {
    return _wlr_keyboard_keymaps_match(
      km1,
      km2,
    );
  }

  late final _wlr_keyboard_keymaps_matchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<struct_xkb_keymap>,
              ffi.Pointer<struct_xkb_keymap>)>>('wlr_keyboard_keymaps_match');
  late final _wlr_keyboard_keymaps_match =
      _wlr_keyboard_keymaps_matchPtr.asFunction<
          bool Function(ffi.Pointer<struct_xkb_keymap>,
              ffi.Pointer<struct_xkb_keymap>)>();

  void wlr_keyboard_set_repeat_info(
    ffi.Pointer<struct_wlr_keyboard> kb,
    int rate,
    int delay,
  ) {
    return _wlr_keyboard_set_repeat_info(
      kb,
      rate,
      delay,
    );
  }

  late final _wlr_keyboard_set_repeat_infoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wlr_keyboard>, ffi.Int32,
              ffi.Int32)>>('wlr_keyboard_set_repeat_info');
  late final _wlr_keyboard_set_repeat_info = _wlr_keyboard_set_repeat_infoPtr
      .asFunction<void Function(ffi.Pointer<struct_wlr_keyboard>, int, int)>();

  void wlr_keyboard_led_update(
    ffi.Pointer<struct_wlr_keyboard> keyboard,
    int leds,
  ) {
    return _wlr_keyboard_led_update(
      keyboard,
      leds,
    );
  }

  late final _wlr_keyboard_led_updatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wlr_keyboard>,
              ffi.Uint32)>>('wlr_keyboard_led_update');
  late final _wlr_keyboard_led_update = _wlr_keyboard_led_updatePtr
      .asFunction<void Function(ffi.Pointer<struct_wlr_keyboard>, int)>();

  int wlr_keyboard_get_modifiers(
    ffi.Pointer<struct_wlr_keyboard> keyboard,
  ) {
    return _wlr_keyboard_get_modifiers(
      keyboard,
    );
  }

  late final _wlr_keyboard_get_modifiersPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint32 Function(
              ffi.Pointer<struct_wlr_keyboard>)>>('wlr_keyboard_get_modifiers');
  late final _wlr_keyboard_get_modifiers = _wlr_keyboard_get_modifiersPtr
      .asFunction<int Function(ffi.Pointer<struct_wlr_keyboard>)>();

  ffi.Pointer<struct_wlr_output_damage> wlr_output_damage_create(
    ffi.Pointer<struct_wlr_output> output,
  ) {
    return _wlr_output_damage_create(
      output,
    );
  }

  late final _wlr_output_damage_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<struct_wlr_output_damage> Function(
              ffi.Pointer<struct_wlr_output>)>>('wlr_output_damage_create');
  late final _wlr_output_damage_create =
      _wlr_output_damage_createPtr.asFunction<
          ffi.Pointer<struct_wlr_output_damage> Function(
              ffi.Pointer<struct_wlr_output>)>();

  void wlr_output_damage_destroy(
    ffi.Pointer<struct_wlr_output_damage> output_damage,
  ) {
    return _wlr_output_damage_destroy(
      output_damage,
    );
  }

  late final _wlr_output_damage_destroyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<struct_wlr_output_damage>)>>(
      'wlr_output_damage_destroy');
  late final _wlr_output_damage_destroy = _wlr_output_damage_destroyPtr
      .asFunction<void Function(ffi.Pointer<struct_wlr_output_damage>)>();

  bool wlr_output_damage_attach_render(
    ffi.Pointer<struct_wlr_output_damage> output_damage,
    ffi.Pointer<ffi.Bool> needs_frame,
    ffi.Pointer<struct_pixman_region32> buffer_damage,
  ) {
    return _wlr_output_damage_attach_render(
      output_damage,
      needs_frame,
      buffer_damage,
    );
  }

  late final _wlr_output_damage_attach_renderPtr = _lookup<
          ffi.NativeFunction<
              ffi.Bool Function(ffi.Pointer<struct_wlr_output_damage>,
                  ffi.Pointer<ffi.Bool>, ffi.Pointer<struct_pixman_region32>)>>(
      'wlr_output_damage_attach_render');
  late final _wlr_output_damage_attach_render =
      _wlr_output_damage_attach_renderPtr.asFunction<
          bool Function(ffi.Pointer<struct_wlr_output_damage>,
              ffi.Pointer<ffi.Bool>, ffi.Pointer<struct_pixman_region32>)>();

  void wlr_output_damage_add(
    ffi.Pointer<struct_wlr_output_damage> output_damage,
    ffi.Pointer<struct_pixman_region32> damage,
  ) {
    return _wlr_output_damage_add(
      output_damage,
      damage,
    );
  }

  late final _wlr_output_damage_addPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wlr_output_damage>,
              ffi.Pointer<struct_pixman_region32>)>>('wlr_output_damage_add');
  late final _wlr_output_damage_add = _wlr_output_damage_addPtr.asFunction<
      void Function(ffi.Pointer<struct_wlr_output_damage>,
          ffi.Pointer<struct_pixman_region32>)>();

  void wlr_output_damage_add_whole(
    ffi.Pointer<struct_wlr_output_damage> output_damage,
  ) {
    return _wlr_output_damage_add_whole(
      output_damage,
    );
  }

  late final _wlr_output_damage_add_wholePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<struct_wlr_output_damage>)>>(
      'wlr_output_damage_add_whole');
  late final _wlr_output_damage_add_whole = _wlr_output_damage_add_wholePtr
      .asFunction<void Function(ffi.Pointer<struct_wlr_output_damage>)>();

  void wlr_output_damage_add_box(
    ffi.Pointer<struct_wlr_output_damage> output_damage,
    ffi.Pointer<struct_wlr_box> box,
  ) {
    return _wlr_output_damage_add_box(
      output_damage,
      box,
    );
  }

  late final _wlr_output_damage_add_boxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wlr_output_damage>,
              ffi.Pointer<struct_wlr_box>)>>('wlr_output_damage_add_box');
  late final _wlr_output_damage_add_box =
      _wlr_output_damage_add_boxPtr.asFunction<
          void Function(ffi.Pointer<struct_wlr_output_damage>,
              ffi.Pointer<struct_wlr_box>)>();

  ffi.Pointer<struct_wlr_pointer> wlr_pointer_from_input_device(
    ffi.Pointer<struct_wlr_input_device> input_device,
  ) {
    return _wlr_pointer_from_input_device(
      input_device,
    );
  }

  late final _wlr_pointer_from_input_devicePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<struct_wlr_pointer> Function(
                  ffi.Pointer<struct_wlr_input_device>)>>(
      'wlr_pointer_from_input_device');
  late final _wlr_pointer_from_input_device =
      _wlr_pointer_from_input_devicePtr.asFunction<
          ffi.Pointer<struct_wlr_pointer> Function(
              ffi.Pointer<struct_wlr_input_device>)>();

  ffi.Pointer<struct_wlr_seat> wlr_seat_create(
    ffi.Pointer<struct_wl_display> display,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _wlr_seat_create(
      display,
      name,
    );
  }

  late final _wlr_seat_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<struct_wlr_seat> Function(ffi.Pointer<struct_wl_display>,
              ffi.Pointer<ffi.Char>)>>('wlr_seat_create');
  late final _wlr_seat_create = _wlr_seat_createPtr.asFunction<
      ffi.Pointer<struct_wlr_seat> Function(
          ffi.Pointer<struct_wl_display>, ffi.Pointer<ffi.Char>)>();

  void wlr_seat_destroy(
    ffi.Pointer<struct_wlr_seat> wlr_seat,
  ) {
    return _wlr_seat_destroy(
      wlr_seat,
    );
  }

  late final _wlr_seat_destroyPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<struct_wlr_seat>)>>(
      'wlr_seat_destroy');
  late final _wlr_seat_destroy = _wlr_seat_destroyPtr
      .asFunction<void Function(ffi.Pointer<struct_wlr_seat>)>();

  ffi.Pointer<struct_wlr_seat_client> wlr_seat_client_for_wl_client(
    ffi.Pointer<struct_wlr_seat> wlr_seat,
    ffi.Pointer<struct_wl_client> wl_client,
  ) {
    return _wlr_seat_client_for_wl_client(
      wlr_seat,
      wl_client,
    );
  }

  late final _wlr_seat_client_for_wl_clientPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<struct_wlr_seat_client> Function(
              ffi.Pointer<struct_wlr_seat>,
              ffi.Pointer<struct_wl_client>)>>('wlr_seat_client_for_wl_client');
  late final _wlr_seat_client_for_wl_client =
      _wlr_seat_client_for_wl_clientPtr.asFunction<
          ffi.Pointer<struct_wlr_seat_client> Function(
              ffi.Pointer<struct_wlr_seat>, ffi.Pointer<struct_wl_client>)>();

  void wlr_seat_set_capabilities(
    ffi.Pointer<struct_wlr_seat> wlr_seat,
    int capabilities,
  ) {
    return _wlr_seat_set_capabilities(
      wlr_seat,
      capabilities,
    );
  }

  late final _wlr_seat_set_capabilitiesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wlr_seat>,
              ffi.Uint32)>>('wlr_seat_set_capabilities');
  late final _wlr_seat_set_capabilities = _wlr_seat_set_capabilitiesPtr
      .asFunction<void Function(ffi.Pointer<struct_wlr_seat>, int)>();

  void wlr_seat_set_name(
    ffi.Pointer<struct_wlr_seat> wlr_seat,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _wlr_seat_set_name(
      wlr_seat,
      name,
    );
  }

  late final _wlr_seat_set_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wlr_seat>,
              ffi.Pointer<ffi.Char>)>>('wlr_seat_set_name');
  late final _wlr_seat_set_name = _wlr_seat_set_namePtr.asFunction<
      void Function(ffi.Pointer<struct_wlr_seat>, ffi.Pointer<ffi.Char>)>();

  bool wlr_seat_pointer_surface_has_focus(
    ffi.Pointer<struct_wlr_seat> wlr_seat,
    ffi.Pointer<struct_wlr_surface> surface,
  ) {
    return _wlr_seat_pointer_surface_has_focus(
      wlr_seat,
      surface,
    );
  }

  late final _wlr_seat_pointer_surface_has_focusPtr = _lookup<
          ffi.NativeFunction<
              ffi.Bool Function(ffi.Pointer<struct_wlr_seat>,
                  ffi.Pointer<struct_wlr_surface>)>>(
      'wlr_seat_pointer_surface_has_focus');
  late final _wlr_seat_pointer_surface_has_focus =
      _wlr_seat_pointer_surface_has_focusPtr.asFunction<
          bool Function(
              ffi.Pointer<struct_wlr_seat>, ffi.Pointer<struct_wlr_surface>)>();

  void wlr_seat_pointer_enter(
    ffi.Pointer<struct_wlr_seat> wlr_seat,
    ffi.Pointer<struct_wlr_surface> surface,
    double sx,
    double sy,
  ) {
    return _wlr_seat_pointer_enter(
      wlr_seat,
      surface,
      sx,
      sy,
    );
  }

  late final _wlr_seat_pointer_enterPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wlr_seat>,
              ffi.Pointer<struct_wlr_surface>,
              ffi.Double,
              ffi.Double)>>('wlr_seat_pointer_enter');
  late final _wlr_seat_pointer_enter = _wlr_seat_pointer_enterPtr.asFunction<
      void Function(ffi.Pointer<struct_wlr_seat>,
          ffi.Pointer<struct_wlr_surface>, double, double)>();

  void wlr_seat_pointer_clear_focus(
    ffi.Pointer<struct_wlr_seat> wlr_seat,
  ) {
    return _wlr_seat_pointer_clear_focus(
      wlr_seat,
    );
  }

  late final _wlr_seat_pointer_clear_focusPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<struct_wlr_seat>)>>(
      'wlr_seat_pointer_clear_focus');
  late final _wlr_seat_pointer_clear_focus = _wlr_seat_pointer_clear_focusPtr
      .asFunction<void Function(ffi.Pointer<struct_wlr_seat>)>();

  void wlr_seat_pointer_send_motion(
    ffi.Pointer<struct_wlr_seat> wlr_seat,
    int time_msec,
    double sx,
    double sy,
  ) {
    return _wlr_seat_pointer_send_motion(
      wlr_seat,
      time_msec,
      sx,
      sy,
    );
  }

  late final _wlr_seat_pointer_send_motionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wlr_seat>, ffi.Uint32,
              ffi.Double, ffi.Double)>>('wlr_seat_pointer_send_motion');
  late final _wlr_seat_pointer_send_motion =
      _wlr_seat_pointer_send_motionPtr.asFunction<
          void Function(ffi.Pointer<struct_wlr_seat>, int, double, double)>();

  int wlr_seat_pointer_send_button(
    ffi.Pointer<struct_wlr_seat> wlr_seat,
    int time_msec,
    int button,
    int state,
  ) {
    return _wlr_seat_pointer_send_button(
      wlr_seat,
      time_msec,
      button,
      state,
    );
  }

  late final _wlr_seat_pointer_send_buttonPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint32 Function(ffi.Pointer<struct_wlr_seat>, ffi.Uint32,
              ffi.Uint32, ffi.Int32)>>('wlr_seat_pointer_send_button');
  late final _wlr_seat_pointer_send_button = _wlr_seat_pointer_send_buttonPtr
      .asFunction<int Function(ffi.Pointer<struct_wlr_seat>, int, int, int)>();

  void wlr_seat_pointer_send_axis(
    ffi.Pointer<struct_wlr_seat> wlr_seat,
    int time_msec,
    int orientation,
    double value,
    int value_discrete,
    int source,
  ) {
    return _wlr_seat_pointer_send_axis(
      wlr_seat,
      time_msec,
      orientation,
      value,
      value_discrete,
      source,
    );
  }

  late final _wlr_seat_pointer_send_axisPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wlr_seat>, ffi.Uint32, ffi.Int32,
              ffi.Double, ffi.Int32, ffi.Int32)>>('wlr_seat_pointer_send_axis');
  late final _wlr_seat_pointer_send_axis =
      _wlr_seat_pointer_send_axisPtr.asFunction<
          void Function(
              ffi.Pointer<struct_wlr_seat>, int, int, double, int, int)>();

  void wlr_seat_pointer_send_frame(
    ffi.Pointer<struct_wlr_seat> wlr_seat,
  ) {
    return _wlr_seat_pointer_send_frame(
      wlr_seat,
    );
  }

  late final _wlr_seat_pointer_send_framePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<struct_wlr_seat>)>>(
      'wlr_seat_pointer_send_frame');
  late final _wlr_seat_pointer_send_frame = _wlr_seat_pointer_send_framePtr
      .asFunction<void Function(ffi.Pointer<struct_wlr_seat>)>();

  void wlr_seat_pointer_notify_enter(
    ffi.Pointer<struct_wlr_seat> wlr_seat,
    ffi.Pointer<struct_wlr_surface> surface,
    double sx,
    double sy,
  ) {
    return _wlr_seat_pointer_notify_enter(
      wlr_seat,
      surface,
      sx,
      sy,
    );
  }

  late final _wlr_seat_pointer_notify_enterPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wlr_seat>,
              ffi.Pointer<struct_wlr_surface>,
              ffi.Double,
              ffi.Double)>>('wlr_seat_pointer_notify_enter');
  late final _wlr_seat_pointer_notify_enter =
      _wlr_seat_pointer_notify_enterPtr.asFunction<
          void Function(ffi.Pointer<struct_wlr_seat>,
              ffi.Pointer<struct_wlr_surface>, double, double)>();

  void wlr_seat_pointer_notify_clear_focus(
    ffi.Pointer<struct_wlr_seat> wlr_seat,
  ) {
    return _wlr_seat_pointer_notify_clear_focus(
      wlr_seat,
    );
  }

  late final _wlr_seat_pointer_notify_clear_focusPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<struct_wlr_seat>)>>(
      'wlr_seat_pointer_notify_clear_focus');
  late final _wlr_seat_pointer_notify_clear_focus =
      _wlr_seat_pointer_notify_clear_focusPtr
          .asFunction<void Function(ffi.Pointer<struct_wlr_seat>)>();

  void wlr_seat_pointer_warp(
    ffi.Pointer<struct_wlr_seat> wlr_seat,
    double sx,
    double sy,
  ) {
    return _wlr_seat_pointer_warp(
      wlr_seat,
      sx,
      sy,
    );
  }

  late final _wlr_seat_pointer_warpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wlr_seat>, ffi.Double,
              ffi.Double)>>('wlr_seat_pointer_warp');
  late final _wlr_seat_pointer_warp = _wlr_seat_pointer_warpPtr.asFunction<
      void Function(ffi.Pointer<struct_wlr_seat>, double, double)>();

  void wlr_seat_pointer_notify_motion(
    ffi.Pointer<struct_wlr_seat> wlr_seat,
    int time_msec,
    double sx,
    double sy,
  ) {
    return _wlr_seat_pointer_notify_motion(
      wlr_seat,
      time_msec,
      sx,
      sy,
    );
  }

  late final _wlr_seat_pointer_notify_motionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wlr_seat>, ffi.Uint32,
              ffi.Double, ffi.Double)>>('wlr_seat_pointer_notify_motion');
  late final _wlr_seat_pointer_notify_motion =
      _wlr_seat_pointer_notify_motionPtr.asFunction<
          void Function(ffi.Pointer<struct_wlr_seat>, int, double, double)>();

  int wlr_seat_pointer_notify_button(
    ffi.Pointer<struct_wlr_seat> wlr_seat,
    int time_msec,
    int button,
    int state,
  ) {
    return _wlr_seat_pointer_notify_button(
      wlr_seat,
      time_msec,
      button,
      state,
    );
  }

  late final _wlr_seat_pointer_notify_buttonPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint32 Function(ffi.Pointer<struct_wlr_seat>, ffi.Uint32,
              ffi.Uint32, ffi.Int32)>>('wlr_seat_pointer_notify_button');
  late final _wlr_seat_pointer_notify_button =
      _wlr_seat_pointer_notify_buttonPtr.asFunction<
          int Function(ffi.Pointer<struct_wlr_seat>, int, int, int)>();

  void wlr_seat_pointer_notify_axis(
    ffi.Pointer<struct_wlr_seat> wlr_seat,
    int time_msec,
    int orientation,
    double value,
    int value_discrete,
    int source,
  ) {
    return _wlr_seat_pointer_notify_axis(
      wlr_seat,
      time_msec,
      orientation,
      value,
      value_discrete,
      source,
    );
  }

  late final _wlr_seat_pointer_notify_axisPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wlr_seat>,
              ffi.Uint32,
              ffi.Int32,
              ffi.Double,
              ffi.Int32,
              ffi.Int32)>>('wlr_seat_pointer_notify_axis');
  late final _wlr_seat_pointer_notify_axis =
      _wlr_seat_pointer_notify_axisPtr.asFunction<
          void Function(
              ffi.Pointer<struct_wlr_seat>, int, int, double, int, int)>();

  void wlr_seat_pointer_notify_frame(
    ffi.Pointer<struct_wlr_seat> wlr_seat,
  ) {
    return _wlr_seat_pointer_notify_frame(
      wlr_seat,
    );
  }

  late final _wlr_seat_pointer_notify_framePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<struct_wlr_seat>)>>(
      'wlr_seat_pointer_notify_frame');
  late final _wlr_seat_pointer_notify_frame = _wlr_seat_pointer_notify_framePtr
      .asFunction<void Function(ffi.Pointer<struct_wlr_seat>)>();

  void wlr_seat_pointer_start_grab(
    ffi.Pointer<struct_wlr_seat> wlr_seat,
    ffi.Pointer<struct_wlr_seat_pointer_grab> grab,
  ) {
    return _wlr_seat_pointer_start_grab(
      wlr_seat,
      grab,
    );
  }

  late final _wlr_seat_pointer_start_grabPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<struct_wlr_seat>,
                  ffi.Pointer<struct_wlr_seat_pointer_grab>)>>(
      'wlr_seat_pointer_start_grab');
  late final _wlr_seat_pointer_start_grab =
      _wlr_seat_pointer_start_grabPtr.asFunction<
          void Function(ffi.Pointer<struct_wlr_seat>,
              ffi.Pointer<struct_wlr_seat_pointer_grab>)>();

  void wlr_seat_pointer_end_grab(
    ffi.Pointer<struct_wlr_seat> wlr_seat,
  ) {
    return _wlr_seat_pointer_end_grab(
      wlr_seat,
    );
  }

  late final _wlr_seat_pointer_end_grabPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<struct_wlr_seat>)>>(
      'wlr_seat_pointer_end_grab');
  late final _wlr_seat_pointer_end_grab = _wlr_seat_pointer_end_grabPtr
      .asFunction<void Function(ffi.Pointer<struct_wlr_seat>)>();

  bool wlr_seat_pointer_has_grab(
    ffi.Pointer<struct_wlr_seat> seat,
  ) {
    return _wlr_seat_pointer_has_grab(
      seat,
    );
  }

  late final _wlr_seat_pointer_has_grabPtr = _lookup<
          ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<struct_wlr_seat>)>>(
      'wlr_seat_pointer_has_grab');
  late final _wlr_seat_pointer_has_grab = _wlr_seat_pointer_has_grabPtr
      .asFunction<bool Function(ffi.Pointer<struct_wlr_seat>)>();

  void wlr_seat_set_keyboard(
    ffi.Pointer<struct_wlr_seat> seat,
    ffi.Pointer<struct_wlr_keyboard> keyboard,
  ) {
    return _wlr_seat_set_keyboard(
      seat,
      keyboard,
    );
  }

  late final _wlr_seat_set_keyboardPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wlr_seat>,
              ffi.Pointer<struct_wlr_keyboard>)>>('wlr_seat_set_keyboard');
  late final _wlr_seat_set_keyboard = _wlr_seat_set_keyboardPtr.asFunction<
      void Function(
          ffi.Pointer<struct_wlr_seat>, ffi.Pointer<struct_wlr_keyboard>)>();

  ffi.Pointer<struct_wlr_keyboard> wlr_seat_get_keyboard(
    ffi.Pointer<struct_wlr_seat> seat,
  ) {
    return _wlr_seat_get_keyboard(
      seat,
    );
  }

  late final _wlr_seat_get_keyboardPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<struct_wlr_keyboard> Function(
              ffi.Pointer<struct_wlr_seat>)>>('wlr_seat_get_keyboard');
  late final _wlr_seat_get_keyboard = _wlr_seat_get_keyboardPtr.asFunction<
      ffi.Pointer<struct_wlr_keyboard> Function(
          ffi.Pointer<struct_wlr_seat>)>();

  void wlr_seat_keyboard_send_key(
    ffi.Pointer<struct_wlr_seat> seat,
    int time_msec,
    int key,
    int state,
  ) {
    return _wlr_seat_keyboard_send_key(
      seat,
      time_msec,
      key,
      state,
    );
  }

  late final _wlr_seat_keyboard_send_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wlr_seat>, ffi.Uint32,
              ffi.Uint32, ffi.Uint32)>>('wlr_seat_keyboard_send_key');
  late final _wlr_seat_keyboard_send_key = _wlr_seat_keyboard_send_keyPtr
      .asFunction<void Function(ffi.Pointer<struct_wlr_seat>, int, int, int)>();

  void wlr_seat_keyboard_send_modifiers(
    ffi.Pointer<struct_wlr_seat> seat,
    ffi.Pointer<struct_wlr_keyboard_modifiers> modifiers,
  ) {
    return _wlr_seat_keyboard_send_modifiers(
      seat,
      modifiers,
    );
  }

  late final _wlr_seat_keyboard_send_modifiersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<struct_wlr_seat>,
                  ffi.Pointer<struct_wlr_keyboard_modifiers>)>>(
      'wlr_seat_keyboard_send_modifiers');
  late final _wlr_seat_keyboard_send_modifiers =
      _wlr_seat_keyboard_send_modifiersPtr.asFunction<
          void Function(ffi.Pointer<struct_wlr_seat>,
              ffi.Pointer<struct_wlr_keyboard_modifiers>)>();

  void wlr_seat_keyboard_enter(
    ffi.Pointer<struct_wlr_seat> seat,
    ffi.Pointer<struct_wlr_surface> surface,
    ffi.Pointer<ffi.Uint32> keycodes,
    int num_keycodes,
    ffi.Pointer<struct_wlr_keyboard_modifiers> modifiers,
  ) {
    return _wlr_seat_keyboard_enter(
      seat,
      surface,
      keycodes,
      num_keycodes,
      modifiers,
    );
  }

  late final _wlr_seat_keyboard_enterPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<struct_wlr_seat>,
                  ffi.Pointer<struct_wlr_surface>,
                  ffi.Pointer<ffi.Uint32>,
                  ffi.Size,
                  ffi.Pointer<struct_wlr_keyboard_modifiers>)>>(
      'wlr_seat_keyboard_enter');
  late final _wlr_seat_keyboard_enter = _wlr_seat_keyboard_enterPtr.asFunction<
      void Function(
          ffi.Pointer<struct_wlr_seat>,
          ffi.Pointer<struct_wlr_surface>,
          ffi.Pointer<ffi.Uint32>,
          int,
          ffi.Pointer<struct_wlr_keyboard_modifiers>)>();

  void wlr_seat_keyboard_clear_focus(
    ffi.Pointer<struct_wlr_seat> wlr_seat,
  ) {
    return _wlr_seat_keyboard_clear_focus(
      wlr_seat,
    );
  }

  late final _wlr_seat_keyboard_clear_focusPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<struct_wlr_seat>)>>(
      'wlr_seat_keyboard_clear_focus');
  late final _wlr_seat_keyboard_clear_focus = _wlr_seat_keyboard_clear_focusPtr
      .asFunction<void Function(ffi.Pointer<struct_wlr_seat>)>();

  void wlr_seat_keyboard_notify_key(
    ffi.Pointer<struct_wlr_seat> seat,
    int time_msec,
    int key,
    int state,
  ) {
    return _wlr_seat_keyboard_notify_key(
      seat,
      time_msec,
      key,
      state,
    );
  }

  late final _wlr_seat_keyboard_notify_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wlr_seat>, ffi.Uint32,
              ffi.Uint32, ffi.Uint32)>>('wlr_seat_keyboard_notify_key');
  late final _wlr_seat_keyboard_notify_key = _wlr_seat_keyboard_notify_keyPtr
      .asFunction<void Function(ffi.Pointer<struct_wlr_seat>, int, int, int)>();

  void wlr_seat_keyboard_notify_modifiers(
    ffi.Pointer<struct_wlr_seat> seat,
    ffi.Pointer<struct_wlr_keyboard_modifiers> modifiers,
  ) {
    return _wlr_seat_keyboard_notify_modifiers(
      seat,
      modifiers,
    );
  }

  late final _wlr_seat_keyboard_notify_modifiersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<struct_wlr_seat>,
                  ffi.Pointer<struct_wlr_keyboard_modifiers>)>>(
      'wlr_seat_keyboard_notify_modifiers');
  late final _wlr_seat_keyboard_notify_modifiers =
      _wlr_seat_keyboard_notify_modifiersPtr.asFunction<
          void Function(ffi.Pointer<struct_wlr_seat>,
              ffi.Pointer<struct_wlr_keyboard_modifiers>)>();

  void wlr_seat_keyboard_notify_enter(
    ffi.Pointer<struct_wlr_seat> seat,
    ffi.Pointer<struct_wlr_surface> surface,
    ffi.Pointer<ffi.Uint32> keycodes,
    int num_keycodes,
    ffi.Pointer<struct_wlr_keyboard_modifiers> modifiers,
  ) {
    return _wlr_seat_keyboard_notify_enter(
      seat,
      surface,
      keycodes,
      num_keycodes,
      modifiers,
    );
  }

  late final _wlr_seat_keyboard_notify_enterPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<struct_wlr_seat>,
                  ffi.Pointer<struct_wlr_surface>,
                  ffi.Pointer<ffi.Uint32>,
                  ffi.Size,
                  ffi.Pointer<struct_wlr_keyboard_modifiers>)>>(
      'wlr_seat_keyboard_notify_enter');
  late final _wlr_seat_keyboard_notify_enter =
      _wlr_seat_keyboard_notify_enterPtr.asFunction<
          void Function(
              ffi.Pointer<struct_wlr_seat>,
              ffi.Pointer<struct_wlr_surface>,
              ffi.Pointer<ffi.Uint32>,
              int,
              ffi.Pointer<struct_wlr_keyboard_modifiers>)>();

  void wlr_seat_keyboard_notify_clear_focus(
    ffi.Pointer<struct_wlr_seat> wlr_seat,
  ) {
    return _wlr_seat_keyboard_notify_clear_focus(
      wlr_seat,
    );
  }

  late final _wlr_seat_keyboard_notify_clear_focusPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<struct_wlr_seat>)>>(
      'wlr_seat_keyboard_notify_clear_focus');
  late final _wlr_seat_keyboard_notify_clear_focus =
      _wlr_seat_keyboard_notify_clear_focusPtr
          .asFunction<void Function(ffi.Pointer<struct_wlr_seat>)>();

  void wlr_seat_keyboard_start_grab(
    ffi.Pointer<struct_wlr_seat> wlr_seat,
    ffi.Pointer<struct_wlr_seat_keyboard_grab> grab,
  ) {
    return _wlr_seat_keyboard_start_grab(
      wlr_seat,
      grab,
    );
  }

  late final _wlr_seat_keyboard_start_grabPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<struct_wlr_seat>,
                  ffi.Pointer<struct_wlr_seat_keyboard_grab>)>>(
      'wlr_seat_keyboard_start_grab');
  late final _wlr_seat_keyboard_start_grab =
      _wlr_seat_keyboard_start_grabPtr.asFunction<
          void Function(ffi.Pointer<struct_wlr_seat>,
              ffi.Pointer<struct_wlr_seat_keyboard_grab>)>();

  void wlr_seat_keyboard_end_grab(
    ffi.Pointer<struct_wlr_seat> wlr_seat,
  ) {
    return _wlr_seat_keyboard_end_grab(
      wlr_seat,
    );
  }

  late final _wlr_seat_keyboard_end_grabPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<struct_wlr_seat>)>>(
      'wlr_seat_keyboard_end_grab');
  late final _wlr_seat_keyboard_end_grab = _wlr_seat_keyboard_end_grabPtr
      .asFunction<void Function(ffi.Pointer<struct_wlr_seat>)>();

  bool wlr_seat_keyboard_has_grab(
    ffi.Pointer<struct_wlr_seat> seat,
  ) {
    return _wlr_seat_keyboard_has_grab(
      seat,
    );
  }

  late final _wlr_seat_keyboard_has_grabPtr = _lookup<
          ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<struct_wlr_seat>)>>(
      'wlr_seat_keyboard_has_grab');
  late final _wlr_seat_keyboard_has_grab = _wlr_seat_keyboard_has_grabPtr
      .asFunction<bool Function(ffi.Pointer<struct_wlr_seat>)>();

  ffi.Pointer<struct_wlr_touch_point> wlr_seat_touch_get_point(
    ffi.Pointer<struct_wlr_seat> seat,
    int touch_id,
  ) {
    return _wlr_seat_touch_get_point(
      seat,
      touch_id,
    );
  }

  late final _wlr_seat_touch_get_pointPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<struct_wlr_touch_point> Function(
              ffi.Pointer<struct_wlr_seat>,
              ffi.Int32)>>('wlr_seat_touch_get_point');
  late final _wlr_seat_touch_get_point =
      _wlr_seat_touch_get_pointPtr.asFunction<
          ffi.Pointer<struct_wlr_touch_point> Function(
              ffi.Pointer<struct_wlr_seat>, int)>();

  void wlr_seat_touch_point_focus(
    ffi.Pointer<struct_wlr_seat> seat,
    ffi.Pointer<struct_wlr_surface> surface,
    int time_msec,
    int touch_id,
    double sx,
    double sy,
  ) {
    return _wlr_seat_touch_point_focus(
      seat,
      surface,
      time_msec,
      touch_id,
      sx,
      sy,
    );
  }

  late final _wlr_seat_touch_point_focusPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wlr_seat>,
              ffi.Pointer<struct_wlr_surface>,
              ffi.Uint32,
              ffi.Int32,
              ffi.Double,
              ffi.Double)>>('wlr_seat_touch_point_focus');
  late final _wlr_seat_touch_point_focus =
      _wlr_seat_touch_point_focusPtr.asFunction<
          void Function(ffi.Pointer<struct_wlr_seat>,
              ffi.Pointer<struct_wlr_surface>, int, int, double, double)>();

  void wlr_seat_touch_point_clear_focus(
    ffi.Pointer<struct_wlr_seat> seat,
    int time_msec,
    int touch_id,
  ) {
    return _wlr_seat_touch_point_clear_focus(
      seat,
      time_msec,
      touch_id,
    );
  }

  late final _wlr_seat_touch_point_clear_focusPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wlr_seat>, ffi.Uint32,
              ffi.Int32)>>('wlr_seat_touch_point_clear_focus');
  late final _wlr_seat_touch_point_clear_focus =
      _wlr_seat_touch_point_clear_focusPtr
          .asFunction<void Function(ffi.Pointer<struct_wlr_seat>, int, int)>();

  int wlr_seat_touch_send_down(
    ffi.Pointer<struct_wlr_seat> seat,
    ffi.Pointer<struct_wlr_surface> surface,
    int time_msec,
    int touch_id,
    double sx,
    double sy,
  ) {
    return _wlr_seat_touch_send_down(
      seat,
      surface,
      time_msec,
      touch_id,
      sx,
      sy,
    );
  }

  late final _wlr_seat_touch_send_downPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint32 Function(
              ffi.Pointer<struct_wlr_seat>,
              ffi.Pointer<struct_wlr_surface>,
              ffi.Uint32,
              ffi.Int32,
              ffi.Double,
              ffi.Double)>>('wlr_seat_touch_send_down');
  late final _wlr_seat_touch_send_down =
      _wlr_seat_touch_send_downPtr.asFunction<
          int Function(ffi.Pointer<struct_wlr_seat>,
              ffi.Pointer<struct_wlr_surface>, int, int, double, double)>();

  void wlr_seat_touch_send_up(
    ffi.Pointer<struct_wlr_seat> seat,
    int time_msec,
    int touch_id,
  ) {
    return _wlr_seat_touch_send_up(
      seat,
      time_msec,
      touch_id,
    );
  }

  late final _wlr_seat_touch_send_upPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wlr_seat>, ffi.Uint32,
              ffi.Int32)>>('wlr_seat_touch_send_up');
  late final _wlr_seat_touch_send_up = _wlr_seat_touch_send_upPtr
      .asFunction<void Function(ffi.Pointer<struct_wlr_seat>, int, int)>();

  void wlr_seat_touch_send_motion(
    ffi.Pointer<struct_wlr_seat> seat,
    int time_msec,
    int touch_id,
    double sx,
    double sy,
  ) {
    return _wlr_seat_touch_send_motion(
      seat,
      time_msec,
      touch_id,
      sx,
      sy,
    );
  }

  late final _wlr_seat_touch_send_motionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wlr_seat>, ffi.Uint32, ffi.Int32,
              ffi.Double, ffi.Double)>>('wlr_seat_touch_send_motion');
  late final _wlr_seat_touch_send_motion =
      _wlr_seat_touch_send_motionPtr.asFunction<
          void Function(
              ffi.Pointer<struct_wlr_seat>, int, int, double, double)>();

  void wlr_seat_touch_send_cancel(
    ffi.Pointer<struct_wlr_seat> seat,
    ffi.Pointer<struct_wlr_surface> surface,
  ) {
    return _wlr_seat_touch_send_cancel(
      seat,
      surface,
    );
  }

  late final _wlr_seat_touch_send_cancelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wlr_seat>,
              ffi.Pointer<struct_wlr_surface>)>>('wlr_seat_touch_send_cancel');
  late final _wlr_seat_touch_send_cancel =
      _wlr_seat_touch_send_cancelPtr.asFunction<
          void Function(
              ffi.Pointer<struct_wlr_seat>, ffi.Pointer<struct_wlr_surface>)>();

  void wlr_seat_touch_send_frame(
    ffi.Pointer<struct_wlr_seat> seat,
  ) {
    return _wlr_seat_touch_send_frame(
      seat,
    );
  }

  late final _wlr_seat_touch_send_framePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<struct_wlr_seat>)>>(
      'wlr_seat_touch_send_frame');
  late final _wlr_seat_touch_send_frame = _wlr_seat_touch_send_framePtr
      .asFunction<void Function(ffi.Pointer<struct_wlr_seat>)>();

  int wlr_seat_touch_notify_down(
    ffi.Pointer<struct_wlr_seat> seat,
    ffi.Pointer<struct_wlr_surface> surface,
    int time_msec,
    int touch_id,
    double sx,
    double sy,
  ) {
    return _wlr_seat_touch_notify_down(
      seat,
      surface,
      time_msec,
      touch_id,
      sx,
      sy,
    );
  }

  late final _wlr_seat_touch_notify_downPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint32 Function(
              ffi.Pointer<struct_wlr_seat>,
              ffi.Pointer<struct_wlr_surface>,
              ffi.Uint32,
              ffi.Int32,
              ffi.Double,
              ffi.Double)>>('wlr_seat_touch_notify_down');
  late final _wlr_seat_touch_notify_down =
      _wlr_seat_touch_notify_downPtr.asFunction<
          int Function(ffi.Pointer<struct_wlr_seat>,
              ffi.Pointer<struct_wlr_surface>, int, int, double, double)>();

  void wlr_seat_touch_notify_up(
    ffi.Pointer<struct_wlr_seat> seat,
    int time_msec,
    int touch_id,
  ) {
    return _wlr_seat_touch_notify_up(
      seat,
      time_msec,
      touch_id,
    );
  }

  late final _wlr_seat_touch_notify_upPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wlr_seat>, ffi.Uint32,
              ffi.Int32)>>('wlr_seat_touch_notify_up');
  late final _wlr_seat_touch_notify_up = _wlr_seat_touch_notify_upPtr
      .asFunction<void Function(ffi.Pointer<struct_wlr_seat>, int, int)>();

  void wlr_seat_touch_notify_motion(
    ffi.Pointer<struct_wlr_seat> seat,
    int time_msec,
    int touch_id,
    double sx,
    double sy,
  ) {
    return _wlr_seat_touch_notify_motion(
      seat,
      time_msec,
      touch_id,
      sx,
      sy,
    );
  }

  late final _wlr_seat_touch_notify_motionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wlr_seat>, ffi.Uint32, ffi.Int32,
              ffi.Double, ffi.Double)>>('wlr_seat_touch_notify_motion');
  late final _wlr_seat_touch_notify_motion =
      _wlr_seat_touch_notify_motionPtr.asFunction<
          void Function(
              ffi.Pointer<struct_wlr_seat>, int, int, double, double)>();

  void wlr_seat_touch_notify_cancel(
    ffi.Pointer<struct_wlr_seat> seat,
    ffi.Pointer<struct_wlr_surface> surface,
  ) {
    return _wlr_seat_touch_notify_cancel(
      seat,
      surface,
    );
  }

  late final _wlr_seat_touch_notify_cancelPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<struct_wlr_seat>,
                  ffi.Pointer<struct_wlr_surface>)>>(
      'wlr_seat_touch_notify_cancel');
  late final _wlr_seat_touch_notify_cancel =
      _wlr_seat_touch_notify_cancelPtr.asFunction<
          void Function(
              ffi.Pointer<struct_wlr_seat>, ffi.Pointer<struct_wlr_surface>)>();

  void wlr_seat_touch_notify_frame(
    ffi.Pointer<struct_wlr_seat> seat,
  ) {
    return _wlr_seat_touch_notify_frame(
      seat,
    );
  }

  late final _wlr_seat_touch_notify_framePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<struct_wlr_seat>)>>(
      'wlr_seat_touch_notify_frame');
  late final _wlr_seat_touch_notify_frame = _wlr_seat_touch_notify_framePtr
      .asFunction<void Function(ffi.Pointer<struct_wlr_seat>)>();

  int wlr_seat_touch_num_points(
    ffi.Pointer<struct_wlr_seat> seat,
  ) {
    return _wlr_seat_touch_num_points(
      seat,
    );
  }

  late final _wlr_seat_touch_num_pointsPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<struct_wlr_seat>)>>(
      'wlr_seat_touch_num_points');
  late final _wlr_seat_touch_num_points = _wlr_seat_touch_num_pointsPtr
      .asFunction<int Function(ffi.Pointer<struct_wlr_seat>)>();

  void wlr_seat_touch_start_grab(
    ffi.Pointer<struct_wlr_seat> wlr_seat,
    ffi.Pointer<struct_wlr_seat_touch_grab> grab,
  ) {
    return _wlr_seat_touch_start_grab(
      wlr_seat,
      grab,
    );
  }

  late final _wlr_seat_touch_start_grabPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<struct_wlr_seat>,
                  ffi.Pointer<struct_wlr_seat_touch_grab>)>>(
      'wlr_seat_touch_start_grab');
  late final _wlr_seat_touch_start_grab =
      _wlr_seat_touch_start_grabPtr.asFunction<
          void Function(ffi.Pointer<struct_wlr_seat>,
              ffi.Pointer<struct_wlr_seat_touch_grab>)>();

  void wlr_seat_touch_end_grab(
    ffi.Pointer<struct_wlr_seat> wlr_seat,
  ) {
    return _wlr_seat_touch_end_grab(
      wlr_seat,
    );
  }

  late final _wlr_seat_touch_end_grabPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<struct_wlr_seat>)>>(
      'wlr_seat_touch_end_grab');
  late final _wlr_seat_touch_end_grab = _wlr_seat_touch_end_grabPtr
      .asFunction<void Function(ffi.Pointer<struct_wlr_seat>)>();

  bool wlr_seat_touch_has_grab(
    ffi.Pointer<struct_wlr_seat> seat,
  ) {
    return _wlr_seat_touch_has_grab(
      seat,
    );
  }

  late final _wlr_seat_touch_has_grabPtr = _lookup<
          ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<struct_wlr_seat>)>>(
      'wlr_seat_touch_has_grab');
  late final _wlr_seat_touch_has_grab = _wlr_seat_touch_has_grabPtr
      .asFunction<bool Function(ffi.Pointer<struct_wlr_seat>)>();

  bool wlr_seat_validate_grab_serial(
    ffi.Pointer<struct_wlr_seat> seat,
    int serial,
  ) {
    return _wlr_seat_validate_grab_serial(
      seat,
      serial,
    );
  }

  late final _wlr_seat_validate_grab_serialPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<struct_wlr_seat>,
              ffi.Uint32)>>('wlr_seat_validate_grab_serial');
  late final _wlr_seat_validate_grab_serial = _wlr_seat_validate_grab_serialPtr
      .asFunction<bool Function(ffi.Pointer<struct_wlr_seat>, int)>();

  bool wlr_seat_validate_pointer_grab_serial(
    ffi.Pointer<struct_wlr_seat> seat,
    ffi.Pointer<struct_wlr_surface> origin,
    int serial,
  ) {
    return _wlr_seat_validate_pointer_grab_serial(
      seat,
      origin,
      serial,
    );
  }

  late final _wlr_seat_validate_pointer_grab_serialPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<struct_wlr_seat>,
              ffi.Pointer<struct_wlr_surface>,
              ffi.Uint32)>>('wlr_seat_validate_pointer_grab_serial');
  late final _wlr_seat_validate_pointer_grab_serial =
      _wlr_seat_validate_pointer_grab_serialPtr.asFunction<
          bool Function(ffi.Pointer<struct_wlr_seat>,
              ffi.Pointer<struct_wlr_surface>, int)>();

  bool wlr_seat_validate_touch_grab_serial(
    ffi.Pointer<struct_wlr_seat> seat,
    ffi.Pointer<struct_wlr_surface> origin,
    int serial,
    ffi.Pointer<ffi.Pointer<struct_wlr_touch_point>> point_ptr,
  ) {
    return _wlr_seat_validate_touch_grab_serial(
      seat,
      origin,
      serial,
      point_ptr,
    );
  }

  late final _wlr_seat_validate_touch_grab_serialPtr = _lookup<
          ffi.NativeFunction<
              ffi.Bool Function(
                  ffi.Pointer<struct_wlr_seat>,
                  ffi.Pointer<struct_wlr_surface>,
                  ffi.Uint32,
                  ffi.Pointer<ffi.Pointer<struct_wlr_touch_point>>)>>(
      'wlr_seat_validate_touch_grab_serial');
  late final _wlr_seat_validate_touch_grab_serial =
      _wlr_seat_validate_touch_grab_serialPtr.asFunction<
          bool Function(
              ffi.Pointer<struct_wlr_seat>,
              ffi.Pointer<struct_wlr_surface>,
              int,
              ffi.Pointer<ffi.Pointer<struct_wlr_touch_point>>)>();

  int wlr_seat_client_next_serial(
    ffi.Pointer<struct_wlr_seat_client> client,
  ) {
    return _wlr_seat_client_next_serial(
      client,
    );
  }

  late final _wlr_seat_client_next_serialPtr = _lookup<
          ffi.NativeFunction<
              ffi.Uint32 Function(ffi.Pointer<struct_wlr_seat_client>)>>(
      'wlr_seat_client_next_serial');
  late final _wlr_seat_client_next_serial = _wlr_seat_client_next_serialPtr
      .asFunction<int Function(ffi.Pointer<struct_wlr_seat_client>)>();

  bool wlr_seat_client_validate_event_serial(
    ffi.Pointer<struct_wlr_seat_client> client,
    int serial,
  ) {
    return _wlr_seat_client_validate_event_serial(
      client,
      serial,
    );
  }

  late final _wlr_seat_client_validate_event_serialPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<struct_wlr_seat_client>,
              ffi.Uint32)>>('wlr_seat_client_validate_event_serial');
  late final _wlr_seat_client_validate_event_serial =
      _wlr_seat_client_validate_event_serialPtr.asFunction<
          bool Function(ffi.Pointer<struct_wlr_seat_client>, int)>();

  ffi.Pointer<struct_wlr_seat_client> wlr_seat_client_from_resource(
    ffi.Pointer<struct_wl_resource> resource,
  ) {
    return _wlr_seat_client_from_resource(
      resource,
    );
  }

  late final _wlr_seat_client_from_resourcePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<struct_wlr_seat_client> Function(
                  ffi.Pointer<struct_wl_resource>)>>(
      'wlr_seat_client_from_resource');
  late final _wlr_seat_client_from_resource =
      _wlr_seat_client_from_resourcePtr.asFunction<
          ffi.Pointer<struct_wlr_seat_client> Function(
              ffi.Pointer<struct_wl_resource>)>();

  ffi.Pointer<struct_wlr_seat_client> wlr_seat_client_from_pointer_resource(
    ffi.Pointer<struct_wl_resource> resource,
  ) {
    return _wlr_seat_client_from_pointer_resource(
      resource,
    );
  }

  late final _wlr_seat_client_from_pointer_resourcePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<struct_wlr_seat_client> Function(
                  ffi.Pointer<struct_wl_resource>)>>(
      'wlr_seat_client_from_pointer_resource');
  late final _wlr_seat_client_from_pointer_resource =
      _wlr_seat_client_from_pointer_resourcePtr.asFunction<
          ffi.Pointer<struct_wlr_seat_client> Function(
              ffi.Pointer<struct_wl_resource>)>();

  bool wlr_surface_accepts_touch(
    ffi.Pointer<struct_wlr_seat> wlr_seat,
    ffi.Pointer<struct_wlr_surface> surface,
  ) {
    return _wlr_surface_accepts_touch(
      wlr_seat,
      surface,
    );
  }

  late final _wlr_surface_accepts_touchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<struct_wlr_seat>,
              ffi.Pointer<struct_wlr_surface>)>>('wlr_surface_accepts_touch');
  late final _wlr_surface_accepts_touch =
      _wlr_surface_accepts_touchPtr.asFunction<
          bool Function(
              ffi.Pointer<struct_wlr_seat>, ffi.Pointer<struct_wlr_surface>)>();

  bool wlr_surface_is_subsurface(
    ffi.Pointer<struct_wlr_surface> surface,
  ) {
    return _wlr_surface_is_subsurface(
      surface,
    );
  }

  late final _wlr_surface_is_subsurfacePtr = _lookup<
          ffi
          .NativeFunction<ffi.Bool Function(ffi.Pointer<struct_wlr_surface>)>>(
      'wlr_surface_is_subsurface');
  late final _wlr_surface_is_subsurface = _wlr_surface_is_subsurfacePtr
      .asFunction<bool Function(ffi.Pointer<struct_wlr_surface>)>();

  ffi.Pointer<struct_wlr_subsurface> wlr_subsurface_from_wlr_surface(
    ffi.Pointer<struct_wlr_surface> surface,
  ) {
    return _wlr_subsurface_from_wlr_surface(
      surface,
    );
  }

  late final _wlr_subsurface_from_wlr_surfacePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<struct_wlr_subsurface> Function(
                  ffi.Pointer<struct_wlr_surface>)>>(
      'wlr_subsurface_from_wlr_surface');
  late final _wlr_subsurface_from_wlr_surface =
      _wlr_subsurface_from_wlr_surfacePtr.asFunction<
          ffi.Pointer<struct_wlr_subsurface> Function(
              ffi.Pointer<struct_wlr_surface>)>();

  ffi.Pointer<struct_wlr_subcompositor> wlr_subcompositor_create(
    ffi.Pointer<struct_wl_display> display,
  ) {
    return _wlr_subcompositor_create(
      display,
    );
  }

  late final _wlr_subcompositor_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<struct_wlr_subcompositor> Function(
              ffi.Pointer<struct_wl_display>)>>('wlr_subcompositor_create');
  late final _wlr_subcompositor_create =
      _wlr_subcompositor_createPtr.asFunction<
          ffi.Pointer<struct_wlr_subcompositor> Function(
              ffi.Pointer<struct_wl_display>)>();

  ffi.Pointer<struct_wlr_xdg_shell> wlr_xdg_shell_create(
    ffi.Pointer<struct_wl_display> display,
    int version,
  ) {
    return _wlr_xdg_shell_create(
      display,
      version,
    );
  }

  late final _wlr_xdg_shell_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<struct_wlr_xdg_shell> Function(
              ffi.Pointer<struct_wl_display>,
              ffi.Uint32)>>('wlr_xdg_shell_create');
  late final _wlr_xdg_shell_create = _wlr_xdg_shell_createPtr.asFunction<
      ffi.Pointer<struct_wlr_xdg_shell> Function(
          ffi.Pointer<struct_wl_display>, int)>();

  ffi.Pointer<struct_wlr_xdg_surface> wlr_xdg_surface_from_resource(
    ffi.Pointer<struct_wl_resource> resource,
  ) {
    return _wlr_xdg_surface_from_resource(
      resource,
    );
  }

  late final _wlr_xdg_surface_from_resourcePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<struct_wlr_xdg_surface> Function(
                  ffi.Pointer<struct_wl_resource>)>>(
      'wlr_xdg_surface_from_resource');
  late final _wlr_xdg_surface_from_resource =
      _wlr_xdg_surface_from_resourcePtr.asFunction<
          ffi.Pointer<struct_wlr_xdg_surface> Function(
              ffi.Pointer<struct_wl_resource>)>();

  ffi.Pointer<struct_wlr_xdg_popup> wlr_xdg_popup_from_resource(
    ffi.Pointer<struct_wl_resource> resource,
  ) {
    return _wlr_xdg_popup_from_resource(
      resource,
    );
  }

  late final _wlr_xdg_popup_from_resourcePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<struct_wlr_xdg_popup> Function(
              ffi.Pointer<struct_wl_resource>)>>('wlr_xdg_popup_from_resource');
  late final _wlr_xdg_popup_from_resource =
      _wlr_xdg_popup_from_resourcePtr.asFunction<
          ffi.Pointer<struct_wlr_xdg_popup> Function(
              ffi.Pointer<struct_wl_resource>)>();

  ffi.Pointer<struct_wlr_xdg_toplevel> wlr_xdg_toplevel_from_resource(
    ffi.Pointer<struct_wl_resource> resource,
  ) {
    return _wlr_xdg_toplevel_from_resource(
      resource,
    );
  }

  late final _wlr_xdg_toplevel_from_resourcePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<struct_wlr_xdg_toplevel> Function(
                  ffi.Pointer<struct_wl_resource>)>>(
      'wlr_xdg_toplevel_from_resource');
  late final _wlr_xdg_toplevel_from_resource =
      _wlr_xdg_toplevel_from_resourcePtr.asFunction<
          ffi.Pointer<struct_wlr_xdg_toplevel> Function(
              ffi.Pointer<struct_wl_resource>)>();

  ffi.Pointer<struct_wlr_xdg_positioner> wlr_xdg_positioner_from_resource(
    ffi.Pointer<struct_wl_resource> resource,
  ) {
    return _wlr_xdg_positioner_from_resource(
      resource,
    );
  }

  late final _wlr_xdg_positioner_from_resourcePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<struct_wlr_xdg_positioner> Function(
                  ffi.Pointer<struct_wl_resource>)>>(
      'wlr_xdg_positioner_from_resource');
  late final _wlr_xdg_positioner_from_resource =
      _wlr_xdg_positioner_from_resourcePtr.asFunction<
          ffi.Pointer<struct_wlr_xdg_positioner> Function(
              ffi.Pointer<struct_wl_resource>)>();

  void wlr_xdg_surface_ping(
    ffi.Pointer<struct_wlr_xdg_surface> surface,
  ) {
    return _wlr_xdg_surface_ping(
      surface,
    );
  }

  late final _wlr_xdg_surface_pingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wlr_xdg_surface>)>>('wlr_xdg_surface_ping');
  late final _wlr_xdg_surface_ping = _wlr_xdg_surface_pingPtr
      .asFunction<void Function(ffi.Pointer<struct_wlr_xdg_surface>)>();

  int wlr_xdg_toplevel_set_size(
    ffi.Pointer<struct_wlr_xdg_toplevel> toplevel,
    int width,
    int height,
  ) {
    return _wlr_xdg_toplevel_set_size(
      toplevel,
      width,
      height,
    );
  }

  late final _wlr_xdg_toplevel_set_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint32 Function(ffi.Pointer<struct_wlr_xdg_toplevel>, ffi.Int32,
              ffi.Int32)>>('wlr_xdg_toplevel_set_size');
  late final _wlr_xdg_toplevel_set_size =
      _wlr_xdg_toplevel_set_sizePtr.asFunction<
          int Function(ffi.Pointer<struct_wlr_xdg_toplevel>, int, int)>();

  int wlr_xdg_toplevel_set_activated(
    ffi.Pointer<struct_wlr_xdg_toplevel> toplevel,
    bool activated,
  ) {
    return _wlr_xdg_toplevel_set_activated(
      toplevel,
      activated,
    );
  }

  late final _wlr_xdg_toplevel_set_activatedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint32 Function(ffi.Pointer<struct_wlr_xdg_toplevel>,
              ffi.Bool)>>('wlr_xdg_toplevel_set_activated');
  late final _wlr_xdg_toplevel_set_activated =
      _wlr_xdg_toplevel_set_activatedPtr.asFunction<
          int Function(ffi.Pointer<struct_wlr_xdg_toplevel>, bool)>();

  int wlr_xdg_toplevel_set_maximized(
    ffi.Pointer<struct_wlr_xdg_toplevel> toplevel,
    bool maximized,
  ) {
    return _wlr_xdg_toplevel_set_maximized(
      toplevel,
      maximized,
    );
  }

  late final _wlr_xdg_toplevel_set_maximizedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint32 Function(ffi.Pointer<struct_wlr_xdg_toplevel>,
              ffi.Bool)>>('wlr_xdg_toplevel_set_maximized');
  late final _wlr_xdg_toplevel_set_maximized =
      _wlr_xdg_toplevel_set_maximizedPtr.asFunction<
          int Function(ffi.Pointer<struct_wlr_xdg_toplevel>, bool)>();

  int wlr_xdg_toplevel_set_fullscreen(
    ffi.Pointer<struct_wlr_xdg_toplevel> toplevel,
    bool fullscreen,
  ) {
    return _wlr_xdg_toplevel_set_fullscreen(
      toplevel,
      fullscreen,
    );
  }

  late final _wlr_xdg_toplevel_set_fullscreenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint32 Function(ffi.Pointer<struct_wlr_xdg_toplevel>,
              ffi.Bool)>>('wlr_xdg_toplevel_set_fullscreen');
  late final _wlr_xdg_toplevel_set_fullscreen =
      _wlr_xdg_toplevel_set_fullscreenPtr.asFunction<
          int Function(ffi.Pointer<struct_wlr_xdg_toplevel>, bool)>();

  int wlr_xdg_toplevel_set_resizing(
    ffi.Pointer<struct_wlr_xdg_toplevel> toplevel,
    bool resizing,
  ) {
    return _wlr_xdg_toplevel_set_resizing(
      toplevel,
      resizing,
    );
  }

  late final _wlr_xdg_toplevel_set_resizingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint32 Function(ffi.Pointer<struct_wlr_xdg_toplevel>,
              ffi.Bool)>>('wlr_xdg_toplevel_set_resizing');
  late final _wlr_xdg_toplevel_set_resizing = _wlr_xdg_toplevel_set_resizingPtr
      .asFunction<int Function(ffi.Pointer<struct_wlr_xdg_toplevel>, bool)>();

  int wlr_xdg_toplevel_set_tiled(
    ffi.Pointer<struct_wlr_xdg_toplevel> toplevel,
    int tiled_edges,
  ) {
    return _wlr_xdg_toplevel_set_tiled(
      toplevel,
      tiled_edges,
    );
  }

  late final _wlr_xdg_toplevel_set_tiledPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint32 Function(ffi.Pointer<struct_wlr_xdg_toplevel>,
              ffi.Uint32)>>('wlr_xdg_toplevel_set_tiled');
  late final _wlr_xdg_toplevel_set_tiled = _wlr_xdg_toplevel_set_tiledPtr
      .asFunction<int Function(ffi.Pointer<struct_wlr_xdg_toplevel>, int)>();

  int wlr_xdg_toplevel_set_bounds(
    ffi.Pointer<struct_wlr_xdg_toplevel> toplevel,
    int width,
    int height,
  ) {
    return _wlr_xdg_toplevel_set_bounds(
      toplevel,
      width,
      height,
    );
  }

  late final _wlr_xdg_toplevel_set_boundsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint32 Function(ffi.Pointer<struct_wlr_xdg_toplevel>, ffi.Int32,
              ffi.Int32)>>('wlr_xdg_toplevel_set_bounds');
  late final _wlr_xdg_toplevel_set_bounds =
      _wlr_xdg_toplevel_set_boundsPtr.asFunction<
          int Function(ffi.Pointer<struct_wlr_xdg_toplevel>, int, int)>();

  int wlr_xdg_toplevel_set_wm_capabilities(
    ffi.Pointer<struct_wlr_xdg_toplevel> toplevel,
    int caps,
  ) {
    return _wlr_xdg_toplevel_set_wm_capabilities(
      toplevel,
      caps,
    );
  }

  late final _wlr_xdg_toplevel_set_wm_capabilitiesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint32 Function(ffi.Pointer<struct_wlr_xdg_toplevel>,
              ffi.Uint32)>>('wlr_xdg_toplevel_set_wm_capabilities');
  late final _wlr_xdg_toplevel_set_wm_capabilities =
      _wlr_xdg_toplevel_set_wm_capabilitiesPtr.asFunction<
          int Function(ffi.Pointer<struct_wlr_xdg_toplevel>, int)>();

  void wlr_xdg_toplevel_send_close(
    ffi.Pointer<struct_wlr_xdg_toplevel> toplevel,
  ) {
    return _wlr_xdg_toplevel_send_close(
      toplevel,
    );
  }

  late final _wlr_xdg_toplevel_send_closePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<struct_wlr_xdg_toplevel>)>>(
      'wlr_xdg_toplevel_send_close');
  late final _wlr_xdg_toplevel_send_close = _wlr_xdg_toplevel_send_closePtr
      .asFunction<void Function(ffi.Pointer<struct_wlr_xdg_toplevel>)>();

  bool wlr_xdg_toplevel_set_parent(
    ffi.Pointer<struct_wlr_xdg_toplevel> toplevel,
    ffi.Pointer<struct_wlr_xdg_toplevel> parent,
  ) {
    return _wlr_xdg_toplevel_set_parent(
      toplevel,
      parent,
    );
  }

  late final _wlr_xdg_toplevel_set_parentPtr = _lookup<
          ffi.NativeFunction<
              ffi.Bool Function(ffi.Pointer<struct_wlr_xdg_toplevel>,
                  ffi.Pointer<struct_wlr_xdg_toplevel>)>>(
      'wlr_xdg_toplevel_set_parent');
  late final _wlr_xdg_toplevel_set_parent =
      _wlr_xdg_toplevel_set_parentPtr.asFunction<
          bool Function(ffi.Pointer<struct_wlr_xdg_toplevel>,
              ffi.Pointer<struct_wlr_xdg_toplevel>)>();

  void wlr_xdg_popup_destroy(
    ffi.Pointer<struct_wlr_xdg_popup> popup,
  ) {
    return _wlr_xdg_popup_destroy(
      popup,
    );
  }

  late final _wlr_xdg_popup_destroyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wlr_xdg_popup>)>>('wlr_xdg_popup_destroy');
  late final _wlr_xdg_popup_destroy = _wlr_xdg_popup_destroyPtr
      .asFunction<void Function(ffi.Pointer<struct_wlr_xdg_popup>)>();

  void wlr_xdg_popup_get_position(
    ffi.Pointer<struct_wlr_xdg_popup> popup,
    ffi.Pointer<ffi.Double> popup_sx,
    ffi.Pointer<ffi.Double> popup_sy,
  ) {
    return _wlr_xdg_popup_get_position(
      popup,
      popup_sx,
      popup_sy,
    );
  }

  late final _wlr_xdg_popup_get_positionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wlr_xdg_popup>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('wlr_xdg_popup_get_position');
  late final _wlr_xdg_popup_get_position =
      _wlr_xdg_popup_get_positionPtr.asFunction<
          void Function(ffi.Pointer<struct_wlr_xdg_popup>,
              ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>)>();

  void wlr_xdg_positioner_rules_get_geometry(
    ffi.Pointer<struct_wlr_xdg_positioner_rules> rules,
    ffi.Pointer<struct_wlr_box> box,
  ) {
    return _wlr_xdg_positioner_rules_get_geometry(
      rules,
      box,
    );
  }

  late final _wlr_xdg_positioner_rules_get_geometryPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<struct_wlr_xdg_positioner_rules>,
                  ffi.Pointer<struct_wlr_box>)>>(
      'wlr_xdg_positioner_rules_get_geometry');
  late final _wlr_xdg_positioner_rules_get_geometry =
      _wlr_xdg_positioner_rules_get_geometryPtr.asFunction<
          void Function(ffi.Pointer<struct_wlr_xdg_positioner_rules>,
              ffi.Pointer<struct_wlr_box>)>();

  void wlr_xdg_positioner_rules_unconstrain_box(
    ffi.Pointer<struct_wlr_xdg_positioner_rules> rules,
    ffi.Pointer<struct_wlr_box> constraint,
    ffi.Pointer<struct_wlr_box> box,
  ) {
    return _wlr_xdg_positioner_rules_unconstrain_box(
      rules,
      constraint,
      box,
    );
  }

  late final _wlr_xdg_positioner_rules_unconstrain_boxPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<struct_wlr_xdg_positioner_rules>,
                  ffi.Pointer<struct_wlr_box>, ffi.Pointer<struct_wlr_box>)>>(
      'wlr_xdg_positioner_rules_unconstrain_box');
  late final _wlr_xdg_positioner_rules_unconstrain_box =
      _wlr_xdg_positioner_rules_unconstrain_boxPtr.asFunction<
          void Function(ffi.Pointer<struct_wlr_xdg_positioner_rules>,
              ffi.Pointer<struct_wlr_box>, ffi.Pointer<struct_wlr_box>)>();

  void wlr_xdg_popup_get_toplevel_coords(
    ffi.Pointer<struct_wlr_xdg_popup> popup,
    int popup_sx,
    int popup_sy,
    ffi.Pointer<ffi.Int> toplevel_sx,
    ffi.Pointer<ffi.Int> toplevel_sy,
  ) {
    return _wlr_xdg_popup_get_toplevel_coords(
      popup,
      popup_sx,
      popup_sy,
      toplevel_sx,
      toplevel_sy,
    );
  }

  late final _wlr_xdg_popup_get_toplevel_coordsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wlr_xdg_popup>,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('wlr_xdg_popup_get_toplevel_coords');
  late final _wlr_xdg_popup_get_toplevel_coords =
      _wlr_xdg_popup_get_toplevel_coordsPtr.asFunction<
          void Function(ffi.Pointer<struct_wlr_xdg_popup>, int, int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  void wlr_xdg_popup_unconstrain_from_box(
    ffi.Pointer<struct_wlr_xdg_popup> popup,
    ffi.Pointer<struct_wlr_box> toplevel_space_box,
  ) {
    return _wlr_xdg_popup_unconstrain_from_box(
      popup,
      toplevel_space_box,
    );
  }

  late final _wlr_xdg_popup_unconstrain_from_boxPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<struct_wlr_xdg_popup>,
                  ffi.Pointer<struct_wlr_box>)>>(
      'wlr_xdg_popup_unconstrain_from_box');
  late final _wlr_xdg_popup_unconstrain_from_box =
      _wlr_xdg_popup_unconstrain_from_boxPtr.asFunction<
          void Function(ffi.Pointer<struct_wlr_xdg_popup>,
              ffi.Pointer<struct_wlr_box>)>();

  ffi.Pointer<struct_wlr_surface> wlr_xdg_surface_surface_at(
    ffi.Pointer<struct_wlr_xdg_surface> surface,
    double sx,
    double sy,
    ffi.Pointer<ffi.Double> sub_x,
    ffi.Pointer<ffi.Double> sub_y,
  ) {
    return _wlr_xdg_surface_surface_at(
      surface,
      sx,
      sy,
      sub_x,
      sub_y,
    );
  }

  late final _wlr_xdg_surface_surface_atPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<struct_wlr_surface> Function(
              ffi.Pointer<struct_wlr_xdg_surface>,
              ffi.Double,
              ffi.Double,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('wlr_xdg_surface_surface_at');
  late final _wlr_xdg_surface_surface_at =
      _wlr_xdg_surface_surface_atPtr.asFunction<
          ffi.Pointer<struct_wlr_surface> Function(
              ffi.Pointer<struct_wlr_xdg_surface>,
              double,
              double,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>();

  ffi.Pointer<struct_wlr_surface> wlr_xdg_surface_popup_surface_at(
    ffi.Pointer<struct_wlr_xdg_surface> surface,
    double sx,
    double sy,
    ffi.Pointer<ffi.Double> sub_x,
    ffi.Pointer<ffi.Double> sub_y,
  ) {
    return _wlr_xdg_surface_popup_surface_at(
      surface,
      sx,
      sy,
      sub_x,
      sub_y,
    );
  }

  late final _wlr_xdg_surface_popup_surface_atPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<struct_wlr_surface> Function(
              ffi.Pointer<struct_wlr_xdg_surface>,
              ffi.Double,
              ffi.Double,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('wlr_xdg_surface_popup_surface_at');
  late final _wlr_xdg_surface_popup_surface_at =
      _wlr_xdg_surface_popup_surface_atPtr.asFunction<
          ffi.Pointer<struct_wlr_surface> Function(
              ffi.Pointer<struct_wlr_xdg_surface>,
              double,
              double,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>();

  bool wlr_surface_is_xdg_surface(
    ffi.Pointer<struct_wlr_surface> surface,
  ) {
    return _wlr_surface_is_xdg_surface(
      surface,
    );
  }

  late final _wlr_surface_is_xdg_surfacePtr = _lookup<
          ffi
          .NativeFunction<ffi.Bool Function(ffi.Pointer<struct_wlr_surface>)>>(
      'wlr_surface_is_xdg_surface');
  late final _wlr_surface_is_xdg_surface = _wlr_surface_is_xdg_surfacePtr
      .asFunction<bool Function(ffi.Pointer<struct_wlr_surface>)>();

  ffi.Pointer<struct_wlr_xdg_surface> wlr_xdg_surface_from_wlr_surface(
    ffi.Pointer<struct_wlr_surface> surface,
  ) {
    return _wlr_xdg_surface_from_wlr_surface(
      surface,
    );
  }

  late final _wlr_xdg_surface_from_wlr_surfacePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<struct_wlr_xdg_surface> Function(
                  ffi.Pointer<struct_wlr_surface>)>>(
      'wlr_xdg_surface_from_wlr_surface');
  late final _wlr_xdg_surface_from_wlr_surface =
      _wlr_xdg_surface_from_wlr_surfacePtr.asFunction<
          ffi.Pointer<struct_wlr_xdg_surface> Function(
              ffi.Pointer<struct_wlr_surface>)>();

  void wlr_xdg_surface_get_geometry(
    ffi.Pointer<struct_wlr_xdg_surface> surface,
    ffi.Pointer<struct_wlr_box> box,
  ) {
    return _wlr_xdg_surface_get_geometry(
      surface,
      box,
    );
  }

  late final _wlr_xdg_surface_get_geometryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wlr_xdg_surface>,
              ffi.Pointer<struct_wlr_box>)>>('wlr_xdg_surface_get_geometry');
  late final _wlr_xdg_surface_get_geometry =
      _wlr_xdg_surface_get_geometryPtr.asFunction<
          void Function(ffi.Pointer<struct_wlr_xdg_surface>,
              ffi.Pointer<struct_wlr_box>)>();

  void wlr_xdg_surface_for_each_surface(
    ffi.Pointer<struct_wlr_xdg_surface> surface,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<struct_wlr_surface>, ffi.Int,
                    ffi.Int, ffi.Pointer<ffi.Void>)>>
        iterator,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _wlr_xdg_surface_for_each_surface(
      surface,
      iterator,
      user_data,
    );
  }

  late final _wlr_xdg_surface_for_each_surfacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wlr_xdg_surface>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<struct_wlr_surface>,
                          ffi.Int, ffi.Int, ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>>('wlr_xdg_surface_for_each_surface');
  late final _wlr_xdg_surface_for_each_surface =
      _wlr_xdg_surface_for_each_surfacePtr.asFunction<
          void Function(
              ffi.Pointer<struct_wlr_xdg_surface>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<struct_wlr_surface>,
                          ffi.Int, ffi.Int, ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>();

  void wlr_xdg_surface_for_each_popup_surface(
    ffi.Pointer<struct_wlr_xdg_surface> surface,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<struct_wlr_surface>, ffi.Int,
                    ffi.Int, ffi.Pointer<ffi.Void>)>>
        iterator,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _wlr_xdg_surface_for_each_popup_surface(
      surface,
      iterator,
      user_data,
    );
  }

  late final _wlr_xdg_surface_for_each_popup_surfacePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<struct_wlr_xdg_surface>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Void Function(ffi.Pointer<struct_wlr_surface>,
                              ffi.Int, ffi.Int, ffi.Pointer<ffi.Void>)>>,
                  ffi.Pointer<ffi.Void>)>>(
      'wlr_xdg_surface_for_each_popup_surface');
  late final _wlr_xdg_surface_for_each_popup_surface =
      _wlr_xdg_surface_for_each_popup_surfacePtr.asFunction<
          void Function(
              ffi.Pointer<struct_wlr_xdg_surface>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<struct_wlr_surface>,
                          ffi.Int, ffi.Int, ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>();

  int wlr_xdg_surface_schedule_configure(
    ffi.Pointer<struct_wlr_xdg_surface> surface,
  ) {
    return _wlr_xdg_surface_schedule_configure(
      surface,
    );
  }

  late final _wlr_xdg_surface_schedule_configurePtr = _lookup<
          ffi.NativeFunction<
              ffi.Uint32 Function(ffi.Pointer<struct_wlr_xdg_surface>)>>(
      'wlr_xdg_surface_schedule_configure');
  late final _wlr_xdg_surface_schedule_configure =
      _wlr_xdg_surface_schedule_configurePtr
          .asFunction<int Function(ffi.Pointer<struct_wlr_xdg_surface>)>();

  ffi.Pointer<struct_wlr_output_mode>
      waybright_get_wlr_output_mode_from_wl_list(
    ffi.Pointer<struct_wl_list> ptr,
  ) {
    return _waybright_get_wlr_output_mode_from_wl_list(
      ptr,
    );
  }

  late final _waybright_get_wlr_output_mode_from_wl_listPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<struct_wlr_output_mode> Function(
                  ffi.Pointer<struct_wl_list>)>>(
      'waybright_get_wlr_output_mode_from_wl_list');
  late final _waybright_get_wlr_output_mode_from_wl_list =
      _waybright_get_wlr_output_mode_from_wl_listPtr.asFunction<
          ffi.Pointer<struct_wlr_output_mode> Function(
              ffi.Pointer<struct_wl_list>)>();

  ffi.Pointer<struct_waybright> waybright_create() {
    return _waybright_create();
  }

  late final _waybright_createPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<struct_waybright> Function()>>(
          'waybright_create');
  late final _waybright_create = _waybright_createPtr
      .asFunction<ffi.Pointer<struct_waybright> Function()>();

  void waybright_destroy(
    ffi.Pointer<struct_waybright> wb,
  ) {
    return _waybright_destroy(
      wb,
    );
  }

  late final _waybright_destroyPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<struct_waybright>)>>(
      'waybright_destroy');
  late final _waybright_destroy = _waybright_destroyPtr
      .asFunction<void Function(ffi.Pointer<struct_waybright>)>();

  int waybright_init(
    ffi.Pointer<struct_waybright> arg0,
  ) {
    return _waybright_init(
      arg0,
    );
  }

  late final _waybright_initPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<struct_waybright>)>>(
      'waybright_init');
  late final _waybright_init = _waybright_initPtr
      .asFunction<int Function(ffi.Pointer<struct_waybright>)>();

  /// @param socket_name can be NULL to auto-select a name
  int waybright_open_socket(
    ffi.Pointer<struct_waybright> wb,
    ffi.Pointer<ffi.Char> socket_name,
    int set_env,
  ) {
    return _waybright_open_socket(
      wb,
      socket_name,
      set_env,
    );
  }

  late final _waybright_open_socketPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<struct_waybright>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('waybright_open_socket');
  late final _waybright_open_socket = _waybright_open_socketPtr.asFunction<
      int Function(
          ffi.Pointer<struct_waybright>, ffi.Pointer<ffi.Char>, int)>();

  void waybright_check_events(
    ffi.Pointer<struct_waybright> wb,
  ) {
    return _waybright_check_events(
      wb,
    );
  }

  late final _waybright_check_eventsPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<struct_waybright>)>>(
      'waybright_check_events');
  late final _waybright_check_events = _waybright_check_eventsPtr
      .asFunction<void Function(ffi.Pointer<struct_waybright>)>();

  void waybright_close_socket(
    ffi.Pointer<struct_waybright> wb,
  ) {
    return _waybright_close_socket(
      wb,
    );
  }

  late final _waybright_close_socketPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<struct_waybright>)>>(
      'waybright_close_socket');
  late final _waybright_close_socket = _waybright_close_socketPtr
      .asFunction<void Function(ffi.Pointer<struct_waybright>)>();

  ffi.Pointer<struct_waybright_image> waybright_load_image(
    ffi.Pointer<struct_waybright> wb,
    ffi.Pointer<ffi.Char> path,
    ffi.Pointer<ffi.Int> error,
  ) {
    return _waybright_load_image(
      wb,
      path,
      error,
    );
  }

  late final _waybright_load_imagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<struct_waybright_image> Function(
              ffi.Pointer<struct_waybright>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>)>>('waybright_load_image');
  late final _waybright_load_image = _waybright_load_imagePtr.asFunction<
      ffi.Pointer<struct_waybright_image> Function(
          ffi.Pointer<struct_waybright>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Int>)>();

  void waybright_renderer_destroy(
    ffi.Pointer<struct_waybright_renderer> wb_renderer,
  ) {
    return _waybright_renderer_destroy(
      wb_renderer,
    );
  }

  late final _waybright_renderer_destroyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<struct_waybright_renderer>)>>(
      'waybright_renderer_destroy');
  late final _waybright_renderer_destroy = _waybright_renderer_destroyPtr
      .asFunction<void Function(ffi.Pointer<struct_waybright_renderer>)>();

  void waybright_renderer_begin(
    ffi.Pointer<struct_waybright_renderer> wb_renderer,
  ) {
    return _waybright_renderer_begin(
      wb_renderer,
    );
  }

  late final _waybright_renderer_beginPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<struct_waybright_renderer>)>>(
      'waybright_renderer_begin');
  late final _waybright_renderer_begin = _waybright_renderer_beginPtr
      .asFunction<void Function(ffi.Pointer<struct_waybright_renderer>)>();

  void waybright_renderer_end(
    ffi.Pointer<struct_waybright_renderer> wb_renderer,
  ) {
    return _waybright_renderer_end(
      wb_renderer,
    );
  }

  late final _waybright_renderer_endPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<struct_waybright_renderer>)>>(
      'waybright_renderer_end');
  late final _waybright_renderer_end = _waybright_renderer_endPtr
      .asFunction<void Function(ffi.Pointer<struct_waybright_renderer>)>();

  void waybright_renderer_render(
    ffi.Pointer<struct_waybright_renderer> wb_renderer,
  ) {
    return _waybright_renderer_render(
      wb_renderer,
    );
  }

  late final _waybright_renderer_renderPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<struct_waybright_renderer>)>>(
      'waybright_renderer_render');
  late final _waybright_renderer_render = _waybright_renderer_renderPtr
      .asFunction<void Function(ffi.Pointer<struct_waybright_renderer>)>();

  void waybright_renderer_scissor(
    ffi.Pointer<struct_waybright_renderer> wb_renderer,
    int x,
    int y,
    int width,
    int height,
  ) {
    return _waybright_renderer_scissor(
      wb_renderer,
      x,
      y,
      width,
      height,
    );
  }

  late final _waybright_renderer_scissorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_waybright_renderer>, ffi.Int,
              ffi.Int, ffi.Int, ffi.Int)>>('waybright_renderer_scissor');
  late final _waybright_renderer_scissor =
      _waybright_renderer_scissorPtr.asFunction<
          void Function(
              ffi.Pointer<struct_waybright_renderer>, int, int, int, int)>();

  void waybright_renderer_clear(
    ffi.Pointer<struct_waybright_renderer> wb_renderer,
    int color,
  ) {
    return _waybright_renderer_clear(
      wb_renderer,
      color,
    );
  }

  late final _waybright_renderer_clearPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_waybright_renderer>,
              ffi.Int)>>('waybright_renderer_clear');
  late final _waybright_renderer_clear = _waybright_renderer_clearPtr
      .asFunction<void Function(ffi.Pointer<struct_waybright_renderer>, int)>();

  void waybright_renderer_fill_rect(
    ffi.Pointer<struct_waybright_renderer> wb_renderer,
    int x,
    int y,
    int width,
    int height,
    int color,
  ) {
    return _waybright_renderer_fill_rect(
      wb_renderer,
      x,
      y,
      width,
      height,
      color,
    );
  }

  late final _waybright_renderer_fill_rectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_waybright_renderer>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('waybright_renderer_fill_rect');
  late final _waybright_renderer_fill_rect =
      _waybright_renderer_fill_rectPtr.asFunction<
          void Function(ffi.Pointer<struct_waybright_renderer>, int, int, int,
              int, int)>();

  void waybright_renderer_draw_window(
    ffi.Pointer<struct_waybright_renderer> wb_renderer,
    ffi.Pointer<struct_waybright_window> wb_window,
    int x,
    int y,
    int width,
    int height,
    double alpha,
  ) {
    return _waybright_renderer_draw_window(
      wb_renderer,
      wb_window,
      x,
      y,
      width,
      height,
      alpha,
    );
  }

  late final _waybright_renderer_draw_windowPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_waybright_renderer>,
              ffi.Pointer<struct_waybright_window>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Float)>>('waybright_renderer_draw_window');
  late final _waybright_renderer_draw_window =
      _waybright_renderer_draw_windowPtr.asFunction<
          void Function(
              ffi.Pointer<struct_waybright_renderer>,
              ffi.Pointer<struct_waybright_window>,
              int,
              int,
              int,
              int,
              double)>();

  void waybright_renderer_draw_image(
    ffi.Pointer<struct_waybright_renderer> wb_renderer,
    ffi.Pointer<struct_waybright_image> wb_image,
    int x,
    int y,
    int width,
    int height,
    double alpha,
  ) {
    return _waybright_renderer_draw_image(
      wb_renderer,
      wb_image,
      x,
      y,
      width,
      height,
      alpha,
    );
  }

  late final _waybright_renderer_draw_imagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_waybright_renderer>,
              ffi.Pointer<struct_waybright_image>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Float)>>('waybright_renderer_draw_image');
  late final _waybright_renderer_draw_image =
      _waybright_renderer_draw_imagePtr.asFunction<
          void Function(
              ffi.Pointer<struct_waybright_renderer>,
              ffi.Pointer<struct_waybright_image>,
              int,
              int,
              int,
              int,
              double)>();

  ffi.Pointer<struct_waybright_image> waybright_renderer_capture_window_frame(
    ffi.Pointer<struct_waybright_renderer> wb_renderer,
    ffi.Pointer<struct_waybright_window> wb_window,
  ) {
    return _waybright_renderer_capture_window_frame(
      wb_renderer,
      wb_window,
    );
  }

  late final _waybright_renderer_capture_window_framePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<struct_waybright_image> Function(
                  ffi.Pointer<struct_waybright_renderer>,
                  ffi.Pointer<struct_waybright_window>)>>(
      'waybright_renderer_capture_window_frame');
  late final _waybright_renderer_capture_window_frame =
      _waybright_renderer_capture_window_framePtr.asFunction<
          ffi.Pointer<struct_waybright_image> Function(
              ffi.Pointer<struct_waybright_renderer>,
              ffi.Pointer<struct_waybright_window>)>();

  void waybright_monitor_destroy(
    ffi.Pointer<struct_waybright_monitor> wb_monitor,
  ) {
    return _waybright_monitor_destroy(
      wb_monitor,
    );
  }

  late final _waybright_monitor_destroyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<struct_waybright_monitor>)>>(
      'waybright_monitor_destroy');
  late final _waybright_monitor_destroy = _waybright_monitor_destroyPtr
      .asFunction<void Function(ffi.Pointer<struct_waybright_monitor>)>();

  void waybright_monitor_enable(
    ffi.Pointer<struct_waybright_monitor> wb_monitor,
  ) {
    return _waybright_monitor_enable(
      wb_monitor,
    );
  }

  late final _waybright_monitor_enablePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<struct_waybright_monitor>)>>(
      'waybright_monitor_enable');
  late final _waybright_monitor_enable = _waybright_monitor_enablePtr
      .asFunction<void Function(ffi.Pointer<struct_waybright_monitor>)>();

  void waybright_monitor_disable(
    ffi.Pointer<struct_waybright_monitor> wb_monitor,
  ) {
    return _waybright_monitor_disable(
      wb_monitor,
    );
  }

  late final _waybright_monitor_disablePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<struct_waybright_monitor>)>>(
      'waybright_monitor_disable');
  late final _waybright_monitor_disable = _waybright_monitor_disablePtr
      .asFunction<void Function(ffi.Pointer<struct_waybright_monitor>)>();

  ffi.Pointer<struct_waybright_window> waybright_window_create(
    ffi.Pointer<struct_waybright> wb,
    ffi.Pointer<struct_wlr_xdg_surface> wlr_xdg_surface,
  ) {
    return _waybright_window_create(
      wb,
      wlr_xdg_surface,
    );
  }

  late final _waybright_window_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<struct_waybright_window> Function(
              ffi.Pointer<struct_waybright>,
              ffi.Pointer<struct_wlr_xdg_surface>)>>('waybright_window_create');
  late final _waybright_window_create = _waybright_window_createPtr.asFunction<
      ffi.Pointer<struct_waybright_window> Function(
          ffi.Pointer<struct_waybright>,
          ffi.Pointer<struct_wlr_xdg_surface>)>();

  void waybright_window_destroy(
    ffi.Pointer<struct_waybright_window> wb_window,
  ) {
    return _waybright_window_destroy(
      wb_window,
    );
  }

  late final _waybright_window_destroyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<struct_waybright_window>)>>(
      'waybright_window_destroy');
  late final _waybright_window_destroy = _waybright_window_destroyPtr
      .asFunction<void Function(ffi.Pointer<struct_waybright_window>)>();

  void waybright_window_get_input_region(
    ffi.Pointer<struct_waybright_window> wb_window,
    ffi.Pointer<struct_wlr_box> wlr_box,
  ) {
    return _waybright_window_get_input_region(
      wb_window,
      wlr_box,
    );
  }

  late final _waybright_window_get_input_regionPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<struct_waybright_window>,
                  ffi.Pointer<struct_wlr_box>)>>(
      'waybright_window_get_input_region');
  late final _waybright_window_get_input_region =
      _waybright_window_get_input_regionPtr.asFunction<
          void Function(ffi.Pointer<struct_waybright_window>,
              ffi.Pointer<struct_wlr_box>)>();

  void waybright_window_submit_pointer_move_event(
    ffi.Pointer<struct_waybright_window> wb_window,
    int time,
    int sx,
    int sy,
  ) {
    return _waybright_window_submit_pointer_move_event(
      wb_window,
      time,
      sx,
      sy,
    );
  }

  late final _waybright_window_submit_pointer_move_eventPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_waybright_window>, ffi.Int,
              ffi.Int, ffi.Int)>>('waybright_window_submit_pointer_move_event');
  late final _waybright_window_submit_pointer_move_event =
      _waybright_window_submit_pointer_move_eventPtr.asFunction<
          void Function(ffi.Pointer<struct_waybright_window>, int, int, int)>();

  void waybright_window_submit_pointer_button_event(
    ffi.Pointer<struct_waybright_window> wb_window,
    int time,
    int button,
    int pressed,
  ) {
    return _waybright_window_submit_pointer_button_event(
      wb_window,
      time,
      button,
      pressed,
    );
  }

  late final _waybright_window_submit_pointer_button_eventPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_waybright_window>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('waybright_window_submit_pointer_button_event');
  late final _waybright_window_submit_pointer_button_event =
      _waybright_window_submit_pointer_button_eventPtr.asFunction<
          void Function(ffi.Pointer<struct_waybright_window>, int, int, int)>();

  void waybright_window_submit_pointer_axis_event(
    ffi.Pointer<struct_waybright_window> wb_window,
    int time,
    int orientation,
    double delta,
    int delta_discrete,
    int source,
  ) {
    return _waybright_window_submit_pointer_axis_event(
      wb_window,
      time,
      orientation,
      delta,
      delta_discrete,
      source,
    );
  }

  late final _waybright_window_submit_pointer_axis_eventPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_waybright_window>,
              ffi.Int,
              ffi.Int,
              ffi.Double,
              ffi.Int,
              ffi.Int)>>('waybright_window_submit_pointer_axis_event');
  late final _waybright_window_submit_pointer_axis_event =
      _waybright_window_submit_pointer_axis_eventPtr.asFunction<
          void Function(ffi.Pointer<struct_waybright_window>, int, int, double,
              int, int)>();

  void waybright_window_submit_keyboard_key_event(
    ffi.Pointer<struct_waybright_window> wb_window,
    int time,
    int keyCode,
    int pressed,
  ) {
    return _waybright_window_submit_keyboard_key_event(
      wb_window,
      time,
      keyCode,
      pressed,
    );
  }

  late final _waybright_window_submit_keyboard_key_eventPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_waybright_window>, ffi.Int,
              ffi.Int, ffi.Int)>>('waybright_window_submit_keyboard_key_event');
  late final _waybright_window_submit_keyboard_key_event =
      _waybright_window_submit_keyboard_key_eventPtr.asFunction<
          void Function(ffi.Pointer<struct_waybright_window>, int, int, int)>();

  void waybright_window_submit_keyboard_modifiers_event(
    ffi.Pointer<struct_waybright_window> wb_window,
    ffi.Pointer<struct_waybright_keyboard> wb_keyboard,
  ) {
    return _waybright_window_submit_keyboard_modifiers_event(
      wb_window,
      wb_keyboard,
    );
  }

  late final _waybright_window_submit_keyboard_modifiers_eventPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<struct_waybright_window>,
                  ffi.Pointer<struct_waybright_keyboard>)>>(
      'waybright_window_submit_keyboard_modifiers_event');
  late final _waybright_window_submit_keyboard_modifiers_event =
      _waybright_window_submit_keyboard_modifiers_eventPtr.asFunction<
          void Function(ffi.Pointer<struct_waybright_window>,
              ffi.Pointer<struct_waybright_keyboard>)>();

  int waybright_window_has_pointer_focus(
    ffi.Pointer<struct_waybright_window> wb_window,
  ) {
    return _waybright_window_has_pointer_focus(
      wb_window,
    );
  }

  late final _waybright_window_has_pointer_focusPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<struct_waybright_window>)>>(
      'waybright_window_has_pointer_focus');
  late final _waybright_window_has_pointer_focus =
      _waybright_window_has_pointer_focusPtr
          .asFunction<int Function(ffi.Pointer<struct_waybright_window>)>();

  void waybright_pointer_destroy(
    ffi.Pointer<struct_waybright_pointer> wb_pointer,
  ) {
    return _waybright_pointer_destroy(
      wb_pointer,
    );
  }

  late final _waybright_pointer_destroyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<struct_waybright_pointer>)>>(
      'waybright_pointer_destroy');
  late final _waybright_pointer_destroy = _waybright_pointer_destroyPtr
      .asFunction<void Function(ffi.Pointer<struct_waybright_pointer>)>();

  void waybright_pointer_focus_on_window(
    ffi.Pointer<struct_waybright_pointer> wb_pointer,
    ffi.Pointer<struct_waybright_window> wb_window,
    int sx,
    int sy,
  ) {
    return _waybright_pointer_focus_on_window(
      wb_pointer,
      wb_window,
      sx,
      sy,
    );
  }

  late final _waybright_pointer_focus_on_windowPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_waybright_pointer>,
              ffi.Pointer<struct_waybright_window>,
              ffi.Int,
              ffi.Int)>>('waybright_pointer_focus_on_window');
  late final _waybright_pointer_focus_on_window =
      _waybright_pointer_focus_on_windowPtr.asFunction<
          void Function(ffi.Pointer<struct_waybright_pointer>,
              ffi.Pointer<struct_waybright_window>, int, int)>();

  void waybright_pointer_clear_focus(
    ffi.Pointer<struct_waybright_pointer> wb_pointer,
  ) {
    return _waybright_pointer_clear_focus(
      wb_pointer,
    );
  }

  late final _waybright_pointer_clear_focusPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<struct_waybright_pointer>)>>(
      'waybright_pointer_clear_focus');
  late final _waybright_pointer_clear_focus = _waybright_pointer_clear_focusPtr
      .asFunction<void Function(ffi.Pointer<struct_waybright_pointer>)>();

  void waybright_keyboard_destroy(
    ffi.Pointer<struct_waybright_keyboard> wb_keyboard,
  ) {
    return _waybright_keyboard_destroy(
      wb_keyboard,
    );
  }

  late final _waybright_keyboard_destroyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<struct_waybright_keyboard>)>>(
      'waybright_keyboard_destroy');
  late final _waybright_keyboard_destroy = _waybright_keyboard_destroyPtr
      .asFunction<void Function(ffi.Pointer<struct_waybright_keyboard>)>();

  void waybright_keyboard_focus_on_window(
    ffi.Pointer<struct_waybright_keyboard> wb_keyboard,
    ffi.Pointer<struct_waybright_window> wb_window,
  ) {
    return _waybright_keyboard_focus_on_window(
      wb_keyboard,
      wb_window,
    );
  }

  late final _waybright_keyboard_focus_on_windowPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<struct_waybright_keyboard>,
                  ffi.Pointer<struct_waybright_window>)>>(
      'waybright_keyboard_focus_on_window');
  late final _waybright_keyboard_focus_on_window =
      _waybright_keyboard_focus_on_windowPtr.asFunction<
          void Function(ffi.Pointer<struct_waybright_keyboard>,
              ffi.Pointer<struct_waybright_window>)>();

  void waybright_keyboard_clear_focus(
    ffi.Pointer<struct_waybright_keyboard> wb_keyboard,
  ) {
    return _waybright_keyboard_clear_focus(
      wb_keyboard,
    );
  }

  late final _waybright_keyboard_clear_focusPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<struct_waybright_keyboard>)>>(
      'waybright_keyboard_clear_focus');
  late final _waybright_keyboard_clear_focus =
      _waybright_keyboard_clear_focusPtr
          .asFunction<void Function(ffi.Pointer<struct_waybright_keyboard>)>();

  void waybright_image_destroy(
    ffi.Pointer<struct_waybright_image> wb_image,
  ) {
    return _waybright_image_destroy(
      wb_image,
    );
  }

  late final _waybright_image_destroyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_waybright_image>)>>('waybright_image_destroy');
  late final _waybright_image_destroy = _waybright_image_destroyPtr
      .asFunction<void Function(ffi.Pointer<struct_waybright_image>)>();

  ffi.Pointer<struct_waybright_image> waybright_image_create_from_surface(
    ffi.Pointer<struct_wlr_surface> wlr_surface,
  ) {
    return _waybright_image_create_from_surface(
      wlr_surface,
    );
  }

  late final _waybright_image_create_from_surfacePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<struct_waybright_image> Function(
                  ffi.Pointer<struct_wlr_surface>)>>(
      'waybright_image_create_from_surface');
  late final _waybright_image_create_from_surface =
      _waybright_image_create_from_surfacePtr.asFunction<
          ffi.Pointer<struct_waybright_image> Function(
              ffi.Pointer<struct_wlr_surface>)>();

  ffi.Pointer<struct_waybright_image> waybright_image_create_from_texture(
    ffi.Pointer<struct_wlr_texture> wlr_texture,
  ) {
    return _waybright_image_create_from_texture(
      wlr_texture,
    );
  }

  late final _waybright_image_create_from_texturePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<struct_waybright_image> Function(
                  ffi.Pointer<struct_wlr_texture>)>>(
      'waybright_image_create_from_texture');
  late final _waybright_image_create_from_texture =
      _waybright_image_create_from_texturePtr.asFunction<
          ffi.Pointer<struct_waybright_image> Function(
              ffi.Pointer<struct_wlr_texture>)>();

  ffi.Pointer<struct_waybright_subwindow> waybright_subwindow_create(
    ffi.Pointer<struct_wlr_subsurface> wlr_subsurface,
    ffi.Pointer<struct_waybright_subwindow_tree> parent,
  ) {
    return _waybright_subwindow_create(
      wlr_subsurface,
      parent,
    );
  }

  late final _waybright_subwindow_createPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<struct_waybright_subwindow> Function(
                  ffi.Pointer<struct_wlr_subsurface>,
                  ffi.Pointer<struct_waybright_subwindow_tree>)>>(
      'waybright_subwindow_create');
  late final _waybright_subwindow_create =
      _waybright_subwindow_createPtr.asFunction<
          ffi.Pointer<struct_waybright_subwindow> Function(
              ffi.Pointer<struct_wlr_subsurface>,
              ffi.Pointer<struct_waybright_subwindow_tree>)>();

  void waybright_subwindow_destroy(
    ffi.Pointer<struct_waybright_subwindow> wb_subwindow,
  ) {
    return _waybright_subwindow_destroy(
      wb_subwindow,
    );
  }

  late final _waybright_subwindow_destroyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<struct_waybright_subwindow>)>>(
      'waybright_subwindow_destroy');
  late final _waybright_subwindow_destroy = _waybright_subwindow_destroyPtr
      .asFunction<void Function(ffi.Pointer<struct_waybright_subwindow>)>();

  ffi.Pointer<struct_waybright_subwindow_tree> waybright_subwindow_tree_create(
    ffi.Pointer<struct_waybright> wb,
    ffi.Pointer<struct_wlr_surface> wlr_surface,
  ) {
    return _waybright_subwindow_tree_create(
      wb,
      wlr_surface,
    );
  }

  late final _waybright_subwindow_tree_createPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<struct_waybright_subwindow_tree> Function(
                  ffi.Pointer<struct_waybright>,
                  ffi.Pointer<struct_wlr_surface>)>>(
      'waybright_subwindow_tree_create');
  late final _waybright_subwindow_tree_create =
      _waybright_subwindow_tree_createPtr.asFunction<
          ffi.Pointer<struct_waybright_subwindow_tree> Function(
              ffi.Pointer<struct_waybright>,
              ffi.Pointer<struct_wlr_surface>)>();

  void waybright_subwindow_tree_destroy(
    ffi.Pointer<struct_waybright_subwindow_tree> waybright_subwindow_tree,
  ) {
    return _waybright_subwindow_tree_destroy(
      waybright_subwindow_tree,
    );
  }

  late final _waybright_subwindow_tree_destroyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<struct_waybright_subwindow_tree>)>>(
      'waybright_subwindow_tree_destroy');
  late final _waybright_subwindow_tree_destroy =
      _waybright_subwindow_tree_destroyPtr.asFunction<
          void Function(ffi.Pointer<struct_waybright_subwindow_tree>)>();

  void waybright_pixman_region32_init(
    ffi.Pointer<struct_pixman_region32> region,
  ) {
    return _waybright_pixman_region32_init(
      region,
    );
  }

  late final _waybright_pixman_region32_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<struct_pixman_region32>)>>(
      'waybright_pixman_region32_init');
  late final _waybright_pixman_region32_init =
      _waybright_pixman_region32_initPtr
          .asFunction<void Function(ffi.Pointer<struct_pixman_region32>)>();

  void waybright_pixman_region32_fini(
    ffi.Pointer<struct_pixman_region32> region,
  ) {
    return _waybright_pixman_region32_fini(
      region,
    );
  }

  late final _waybright_pixman_region32_finiPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<struct_pixman_region32>)>>(
      'waybright_pixman_region32_fini');
  late final _waybright_pixman_region32_fini =
      _waybright_pixman_region32_finiPtr
          .asFunction<void Function(ffi.Pointer<struct_pixman_region32>)>();

  ffi.Pointer<struct_pixman_box32> waybright_pixman_region32_rectangles(
    ffi.Pointer<struct_pixman_region32> region,
    ffi.Pointer<ffi.Int> n_rects,
  ) {
    return _waybright_pixman_region32_rectangles(
      region,
      n_rects,
    );
  }

  late final _waybright_pixman_region32_rectanglesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<struct_pixman_box32> Function(
              ffi.Pointer<struct_pixman_region32>,
              ffi.Pointer<ffi.Int>)>>('waybright_pixman_region32_rectangles');
  late final _waybright_pixman_region32_rectangles =
      _waybright_pixman_region32_rectanglesPtr.asFunction<
          ffi.Pointer<struct_pixman_box32> Function(
              ffi.Pointer<struct_pixman_region32>, ffi.Pointer<ffi.Int>)>();
}

abstract class enum_wl_iterator_result {
  static const int WL_ITERATOR_STOP = 0;
  static const int WL_ITERATOR_CONTINUE = 1;
}

abstract class enum_wl_protocol_logger_type {
  static const int WL_PROTOCOL_LOGGER_REQUEST = 0;
  static const int WL_PROTOCOL_LOGGER_EVENT = 1;
}

class struct_wlr_device extends ffi.Struct {
  @ffi.Int()
  external int fd;

  @ffi.Int()
  external int device_id;

  @ffi.UnsignedLong()
  external int dev;

  external struct_wl_list link;

  external UnnamedStruct1 events;
}

class struct_wl_list extends ffi.Struct {
  external ffi.Pointer<struct_wl_list> prev;

  external ffi.Pointer<struct_wl_list> next;
}

class UnnamedStruct1 extends ffi.Struct {
  external struct_wl_signal change;

  external struct_wl_signal remove;
}

class struct_wl_signal extends ffi.Struct {
  external struct_wl_list listener_list;
}

class struct_wlr_session extends ffi.Struct {
  @ffi.Bool()
  external bool active;

  @ffi.UnsignedInt()
  external int vtnr;

  @ffi.Array.multi([256])
  external ffi.Array<ffi.Char> seat;

  external ffi.Pointer<struct_udev> udev;

  external ffi.Pointer<struct_udev_monitor> mon;

  external ffi.Pointer<struct_wl_event_source> udev_event;

  external ffi.Pointer<struct_libseat> seat_handle;

  external ffi.Pointer<struct_wl_event_source> libseat_event;

  external struct_wl_list devices;

  external ffi.Pointer<struct_wl_display> display;

  external struct_wl_listener display_destroy;

  external UnnamedStruct2 events;
}

class struct_udev extends ffi.Opaque {}

class struct_udev_monitor extends ffi.Opaque {}

class struct_wl_event_source extends ffi.Opaque {}

class struct_libseat extends ffi.Opaque {}

class struct_wl_display extends ffi.Opaque {}

class struct_wl_listener extends ffi.Struct {
  external struct_wl_list link;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wl_listener>, ffi.Pointer<ffi.Void>)>> notify;
}

class UnnamedStruct2 extends ffi.Struct {
  external struct_wl_signal active;

  external struct_wl_signal add_drm_card;

  external struct_wl_signal destroy;
}

class struct_wlr_session_add_event extends ffi.Struct {
  external ffi.Pointer<ffi.Char> path;
}

abstract class enum_wlr_device_change_type {
  static const int WLR_DEVICE_HOTPLUG = 1;
  static const int WLR_DEVICE_LEASE = 2;
}

class struct_wlr_device_hotplug_event extends ffi.Struct {
  @ffi.Uint32()
  external int connector_id;

  @ffi.Uint32()
  external int prop_id;
}

class struct_wlr_device_change_event extends ffi.Struct {
  @ffi.Int32()
  external int type;

  external UnnamedUnion1 unnamed;
}

class UnnamedUnion1 extends ffi.Union {
  external struct_wlr_device_hotplug_event hotplug;
}

class struct_wlr_backend_impl extends ffi.Opaque {}

class struct_wlr_backend extends ffi.Struct {
  external ffi.Pointer<struct_wlr_backend_impl> impl;

  external UnnamedStruct3 events;
}

class UnnamedStruct3 extends ffi.Struct {
  external struct_wl_signal destroy;

  external struct_wl_signal new_input;

  external struct_wl_signal new_output;
}

class struct_wlr_allocator extends ffi.Struct {
  external ffi.Pointer<struct_wlr_allocator_interface> impl;

  @ffi.Uint32()
  external int buffer_caps;

  external UnnamedStruct5 events;
}

class struct_wlr_allocator_interface extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<struct_wlr_buffer> Function(
              ffi.Pointer<struct_wlr_allocator> alloc,
              ffi.Int width,
              ffi.Int height,
              ffi.Pointer<struct_wlr_drm_format> format)>> create_buffer;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wlr_allocator> alloc)>> destroy;
}

class struct_wlr_buffer extends ffi.Struct {
  external ffi.Pointer<struct_wlr_buffer_impl> impl;

  @ffi.Int()
  external int width;

  @ffi.Int()
  external int height;

  @ffi.Bool()
  external bool dropped;

  @ffi.Size()
  external int n_locks;

  @ffi.Bool()
  external bool accessing_data_ptr;

  external UnnamedStruct4 events;

  external struct_wlr_addon_set addons;
}

class struct_wlr_buffer_impl extends ffi.Opaque {}

class UnnamedStruct4 extends ffi.Struct {
  external struct_wl_signal destroy;

  external struct_wl_signal release;
}

class struct_wlr_addon_set extends ffi.Struct {
  external struct_wl_list addons;
}

class struct_wlr_drm_format extends ffi.Opaque {}

class UnnamedStruct5 extends ffi.Struct {
  external struct_wl_signal destroy;
}

class struct_wlr_renderer extends ffi.Struct {
  external ffi.Pointer<struct_wlr_renderer_impl> impl;

  @ffi.Bool()
  external bool rendering;

  @ffi.Bool()
  external bool rendering_with_buffer;

  external UnnamedStruct6 events;
}

class struct_wlr_renderer_impl extends ffi.Opaque {}

class UnnamedStruct6 extends ffi.Struct {
  external struct_wl_signal destroy;
}

class struct_wlr_dmabuf_attributes extends ffi.Struct {
  @ffi.Int32()
  external int width;

  @ffi.Int32()
  external int height;

  @ffi.Uint32()
  external int format;

  @ffi.Uint64()
  external int modifier;

  @ffi.Int()
  external int n_planes;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Uint32> offset;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Uint32> stride;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Int> fd;
}

class struct_wlr_texture_impl extends ffi.Opaque {}

class struct_wlr_texture extends ffi.Struct {
  external ffi.Pointer<struct_wlr_texture_impl> impl;

  @ffi.Uint32()
  external int width;

  @ffi.Uint32()
  external int height;
}

class struct_pixman_region32 extends ffi.Struct {
  external struct_pixman_box32 extents;

  external ffi.Pointer<struct_pixman_region32_data> data;
}

class struct_pixman_box32 extends ffi.Struct {
  @ffi.Int32()
  external int x1;

  @ffi.Int32()
  external int y1;

  @ffi.Int32()
  external int x2;

  @ffi.Int32()
  external int y2;
}

class struct_pixman_region32_data extends ffi.Struct {
  @ffi.Long()
  external int size;

  @ffi.Long()
  external int numRects;
}

class struct_wlr_drm_format_set extends ffi.Opaque {}

class struct_wlr_box extends ffi.Struct {
  @ffi.Int()
  external int x;

  @ffi.Int()
  external int y;

  @ffi.Int()
  external int width;

  @ffi.Int()
  external int height;
}

class struct_wlr_fbox extends ffi.Struct {
  @ffi.Double()
  external double x;

  @ffi.Double()
  external double y;

  @ffi.Double()
  external double width;

  @ffi.Double()
  external double height;
}

abstract class enum_wl_display_error {
  static const int WL_DISPLAY_ERROR_INVALID_OBJECT = 0;
  static const int WL_DISPLAY_ERROR_INVALID_METHOD = 1;
  static const int WL_DISPLAY_ERROR_NO_MEMORY = 2;
  static const int WL_DISPLAY_ERROR_IMPLEMENTATION = 3;
}

abstract class enum_wl_shm_error {
  static const int WL_SHM_ERROR_INVALID_FORMAT = 0;
  static const int WL_SHM_ERROR_INVALID_STRIDE = 1;
  static const int WL_SHM_ERROR_INVALID_FD = 2;
}

abstract class enum_wl_shm_format {
  static const int WL_SHM_FORMAT_ARGB8888 = 0;
  static const int WL_SHM_FORMAT_XRGB8888 = 1;
  static const int WL_SHM_FORMAT_C8 = 538982467;
  static const int WL_SHM_FORMAT_RGB332 = 943867730;
  static const int WL_SHM_FORMAT_BGR233 = 944916290;
  static const int WL_SHM_FORMAT_XRGB4444 = 842093144;
  static const int WL_SHM_FORMAT_XBGR4444 = 842089048;
  static const int WL_SHM_FORMAT_RGBX4444 = 842094674;
  static const int WL_SHM_FORMAT_BGRX4444 = 842094658;
  static const int WL_SHM_FORMAT_ARGB4444 = 842093121;
  static const int WL_SHM_FORMAT_ABGR4444 = 842089025;
  static const int WL_SHM_FORMAT_RGBA4444 = 842088786;
  static const int WL_SHM_FORMAT_BGRA4444 = 842088770;
  static const int WL_SHM_FORMAT_XRGB1555 = 892424792;
  static const int WL_SHM_FORMAT_XBGR1555 = 892420696;
  static const int WL_SHM_FORMAT_RGBX5551 = 892426322;
  static const int WL_SHM_FORMAT_BGRX5551 = 892426306;
  static const int WL_SHM_FORMAT_ARGB1555 = 892424769;
  static const int WL_SHM_FORMAT_ABGR1555 = 892420673;
  static const int WL_SHM_FORMAT_RGBA5551 = 892420434;
  static const int WL_SHM_FORMAT_BGRA5551 = 892420418;
  static const int WL_SHM_FORMAT_RGB565 = 909199186;
  static const int WL_SHM_FORMAT_BGR565 = 909199170;
  static const int WL_SHM_FORMAT_RGB888 = 875710290;
  static const int WL_SHM_FORMAT_BGR888 = 875710274;
  static const int WL_SHM_FORMAT_XBGR8888 = 875709016;
  static const int WL_SHM_FORMAT_RGBX8888 = 875714642;
  static const int WL_SHM_FORMAT_BGRX8888 = 875714626;
  static const int WL_SHM_FORMAT_ABGR8888 = 875708993;
  static const int WL_SHM_FORMAT_RGBA8888 = 875708754;
  static const int WL_SHM_FORMAT_BGRA8888 = 875708738;
  static const int WL_SHM_FORMAT_XRGB2101010 = 808669784;
  static const int WL_SHM_FORMAT_XBGR2101010 = 808665688;
  static const int WL_SHM_FORMAT_RGBX1010102 = 808671314;
  static const int WL_SHM_FORMAT_BGRX1010102 = 808671298;
  static const int WL_SHM_FORMAT_ARGB2101010 = 808669761;
  static const int WL_SHM_FORMAT_ABGR2101010 = 808665665;
  static const int WL_SHM_FORMAT_RGBA1010102 = 808665426;
  static const int WL_SHM_FORMAT_BGRA1010102 = 808665410;
  static const int WL_SHM_FORMAT_YUYV = 1448695129;
  static const int WL_SHM_FORMAT_YVYU = 1431918169;
  static const int WL_SHM_FORMAT_UYVY = 1498831189;
  static const int WL_SHM_FORMAT_VYUY = 1498765654;
  static const int WL_SHM_FORMAT_AYUV = 1448433985;
  static const int WL_SHM_FORMAT_NV12 = 842094158;
  static const int WL_SHM_FORMAT_NV21 = 825382478;
  static const int WL_SHM_FORMAT_NV16 = 909203022;
  static const int WL_SHM_FORMAT_NV61 = 825644622;
  static const int WL_SHM_FORMAT_YUV410 = 961959257;
  static const int WL_SHM_FORMAT_YVU410 = 961893977;
  static const int WL_SHM_FORMAT_YUV411 = 825316697;
  static const int WL_SHM_FORMAT_YVU411 = 825316953;
  static const int WL_SHM_FORMAT_YUV420 = 842093913;
  static const int WL_SHM_FORMAT_YVU420 = 842094169;
  static const int WL_SHM_FORMAT_YUV422 = 909202777;
  static const int WL_SHM_FORMAT_YVU422 = 909203033;
  static const int WL_SHM_FORMAT_YUV444 = 875713881;
  static const int WL_SHM_FORMAT_YVU444 = 875714137;
  static const int WL_SHM_FORMAT_R8 = 538982482;
  static const int WL_SHM_FORMAT_R16 = 540422482;
  static const int WL_SHM_FORMAT_RG88 = 943212370;
  static const int WL_SHM_FORMAT_GR88 = 943215175;
  static const int WL_SHM_FORMAT_RG1616 = 842221394;
  static const int WL_SHM_FORMAT_GR1616 = 842224199;
  static const int WL_SHM_FORMAT_XRGB16161616F = 1211388504;
  static const int WL_SHM_FORMAT_XBGR16161616F = 1211384408;
  static const int WL_SHM_FORMAT_ARGB16161616F = 1211388481;
  static const int WL_SHM_FORMAT_ABGR16161616F = 1211384385;
  static const int WL_SHM_FORMAT_XYUV8888 = 1448434008;
  static const int WL_SHM_FORMAT_VUY888 = 875713878;
  static const int WL_SHM_FORMAT_VUY101010 = 808670550;
  static const int WL_SHM_FORMAT_Y210 = 808530521;
  static const int WL_SHM_FORMAT_Y212 = 842084953;
  static const int WL_SHM_FORMAT_Y216 = 909193817;
  static const int WL_SHM_FORMAT_Y410 = 808531033;
  static const int WL_SHM_FORMAT_Y412 = 842085465;
  static const int WL_SHM_FORMAT_Y416 = 909194329;
  static const int WL_SHM_FORMAT_XVYU2101010 = 808670808;
  static const int WL_SHM_FORMAT_XVYU12_16161616 = 909334104;
  static const int WL_SHM_FORMAT_XVYU16161616 = 942954072;
  static const int WL_SHM_FORMAT_Y0L0 = 810299481;
  static const int WL_SHM_FORMAT_X0L0 = 810299480;
  static const int WL_SHM_FORMAT_Y0L2 = 843853913;
  static const int WL_SHM_FORMAT_X0L2 = 843853912;
  static const int WL_SHM_FORMAT_YUV420_8BIT = 942691673;
  static const int WL_SHM_FORMAT_YUV420_10BIT = 808539481;
  static const int WL_SHM_FORMAT_XRGB8888_A8 = 943805016;
  static const int WL_SHM_FORMAT_XBGR8888_A8 = 943800920;
  static const int WL_SHM_FORMAT_RGBX8888_A8 = 943806546;
  static const int WL_SHM_FORMAT_BGRX8888_A8 = 943806530;
  static const int WL_SHM_FORMAT_RGB888_A8 = 943798354;
  static const int WL_SHM_FORMAT_BGR888_A8 = 943798338;
  static const int WL_SHM_FORMAT_RGB565_A8 = 943797586;
  static const int WL_SHM_FORMAT_BGR565_A8 = 943797570;
  static const int WL_SHM_FORMAT_NV24 = 875714126;
  static const int WL_SHM_FORMAT_NV42 = 842290766;
  static const int WL_SHM_FORMAT_P210 = 808530512;
  static const int WL_SHM_FORMAT_P010 = 808530000;
  static const int WL_SHM_FORMAT_P012 = 842084432;
  static const int WL_SHM_FORMAT_P016 = 909193296;
  static const int WL_SHM_FORMAT_AXBXGXRX106106106106 = 808534593;
  static const int WL_SHM_FORMAT_NV15 = 892425806;
  static const int WL_SHM_FORMAT_Q410 = 808531025;
  static const int WL_SHM_FORMAT_Q401 = 825242705;
  static const int WL_SHM_FORMAT_XRGB16161616 = 942953048;
  static const int WL_SHM_FORMAT_XBGR16161616 = 942948952;
  static const int WL_SHM_FORMAT_ARGB16161616 = 942953025;
  static const int WL_SHM_FORMAT_ABGR16161616 = 942948929;
}

abstract class enum_wl_data_offer_error {
  static const int WL_DATA_OFFER_ERROR_INVALID_FINISH = 0;
  static const int WL_DATA_OFFER_ERROR_INVALID_ACTION_MASK = 1;
  static const int WL_DATA_OFFER_ERROR_INVALID_ACTION = 2;
  static const int WL_DATA_OFFER_ERROR_INVALID_OFFER = 3;
}

abstract class enum_wl_data_source_error {
  static const int WL_DATA_SOURCE_ERROR_INVALID_ACTION_MASK = 0;
  static const int WL_DATA_SOURCE_ERROR_INVALID_SOURCE = 1;
}

abstract class enum_wl_data_device_error {
  static const int WL_DATA_DEVICE_ERROR_ROLE = 0;
}

abstract class enum_wl_data_device_manager_dnd_action {
  static const int WL_DATA_DEVICE_MANAGER_DND_ACTION_NONE = 0;
  static const int WL_DATA_DEVICE_MANAGER_DND_ACTION_COPY = 1;
  static const int WL_DATA_DEVICE_MANAGER_DND_ACTION_MOVE = 2;
  static const int WL_DATA_DEVICE_MANAGER_DND_ACTION_ASK = 4;
}

abstract class enum_wl_shell_error {
  static const int WL_SHELL_ERROR_ROLE = 0;
}

abstract class enum_wl_shell_surface_resize {
  static const int WL_SHELL_SURFACE_RESIZE_NONE = 0;
  static const int WL_SHELL_SURFACE_RESIZE_TOP = 1;
  static const int WL_SHELL_SURFACE_RESIZE_BOTTOM = 2;
  static const int WL_SHELL_SURFACE_RESIZE_LEFT = 4;
  static const int WL_SHELL_SURFACE_RESIZE_TOP_LEFT = 5;
  static const int WL_SHELL_SURFACE_RESIZE_BOTTOM_LEFT = 6;
  static const int WL_SHELL_SURFACE_RESIZE_RIGHT = 8;
  static const int WL_SHELL_SURFACE_RESIZE_TOP_RIGHT = 9;
  static const int WL_SHELL_SURFACE_RESIZE_BOTTOM_RIGHT = 10;
}

abstract class enum_wl_shell_surface_transient {
  static const int WL_SHELL_SURFACE_TRANSIENT_INACTIVE = 1;
}

abstract class enum_wl_shell_surface_fullscreen_method {
  static const int WL_SHELL_SURFACE_FULLSCREEN_METHOD_DEFAULT = 0;
  static const int WL_SHELL_SURFACE_FULLSCREEN_METHOD_SCALE = 1;
  static const int WL_SHELL_SURFACE_FULLSCREEN_METHOD_DRIVER = 2;
  static const int WL_SHELL_SURFACE_FULLSCREEN_METHOD_FILL = 3;
}

abstract class enum_wl_surface_error {
  static const int WL_SURFACE_ERROR_INVALID_SCALE = 0;
  static const int WL_SURFACE_ERROR_INVALID_TRANSFORM = 1;
  static const int WL_SURFACE_ERROR_INVALID_SIZE = 2;
  static const int WL_SURFACE_ERROR_INVALID_OFFSET = 3;
  static const int WL_SURFACE_ERROR_DEFUNCT_ROLE_OBJECT = 4;
}

abstract class enum_wl_seat_capability {
  static const int WL_SEAT_CAPABILITY_POINTER = 1;
  static const int WL_SEAT_CAPABILITY_KEYBOARD = 2;
  static const int WL_SEAT_CAPABILITY_TOUCH = 4;
}

abstract class enum_wl_seat_error {
  static const int WL_SEAT_ERROR_MISSING_CAPABILITY = 0;
}

abstract class enum_wl_pointer_error {
  static const int WL_POINTER_ERROR_ROLE = 0;
}

abstract class enum_wl_pointer_button_state {
  static const int WL_POINTER_BUTTON_STATE_RELEASED = 0;
  static const int WL_POINTER_BUTTON_STATE_PRESSED = 1;
}

abstract class enum_wl_pointer_axis {
  static const int WL_POINTER_AXIS_VERTICAL_SCROLL = 0;
  static const int WL_POINTER_AXIS_HORIZONTAL_SCROLL = 1;
}

abstract class enum_wl_pointer_axis_source {
  static const int WL_POINTER_AXIS_SOURCE_WHEEL = 0;
  static const int WL_POINTER_AXIS_SOURCE_FINGER = 1;
  static const int WL_POINTER_AXIS_SOURCE_CONTINUOUS = 2;
  static const int WL_POINTER_AXIS_SOURCE_WHEEL_TILT = 3;
}

abstract class enum_wl_pointer_axis_relative_direction {
  static const int WL_POINTER_AXIS_RELATIVE_DIRECTION_IDENTICAL = 0;
  static const int WL_POINTER_AXIS_RELATIVE_DIRECTION_INVERTED = 1;
}

abstract class enum_wl_keyboard_keymap_format {
  static const int WL_KEYBOARD_KEYMAP_FORMAT_NO_KEYMAP = 0;
  static const int WL_KEYBOARD_KEYMAP_FORMAT_XKB_V1 = 1;
}

abstract class enum_wl_keyboard_key_state {
  static const int WL_KEYBOARD_KEY_STATE_RELEASED = 0;
  static const int WL_KEYBOARD_KEY_STATE_PRESSED = 1;
}

abstract class enum_wl_output_subpixel {
  static const int WL_OUTPUT_SUBPIXEL_UNKNOWN = 0;
  static const int WL_OUTPUT_SUBPIXEL_NONE = 1;
  static const int WL_OUTPUT_SUBPIXEL_HORIZONTAL_RGB = 2;
  static const int WL_OUTPUT_SUBPIXEL_HORIZONTAL_BGR = 3;
  static const int WL_OUTPUT_SUBPIXEL_VERTICAL_RGB = 4;
  static const int WL_OUTPUT_SUBPIXEL_VERTICAL_BGR = 5;
}

abstract class enum_wl_output_transform {
  static const int WL_OUTPUT_TRANSFORM_NORMAL = 0;
  static const int WL_OUTPUT_TRANSFORM_90 = 1;
  static const int WL_OUTPUT_TRANSFORM_180 = 2;
  static const int WL_OUTPUT_TRANSFORM_270 = 3;
  static const int WL_OUTPUT_TRANSFORM_FLIPPED = 4;
  static const int WL_OUTPUT_TRANSFORM_FLIPPED_90 = 5;
  static const int WL_OUTPUT_TRANSFORM_FLIPPED_180 = 6;
  static const int WL_OUTPUT_TRANSFORM_FLIPPED_270 = 7;
}

abstract class enum_wl_output_mode {
  static const int WL_OUTPUT_MODE_CURRENT = 1;
  static const int WL_OUTPUT_MODE_PREFERRED = 2;
}

abstract class enum_wl_subcompositor_error {
  static const int WL_SUBCOMPOSITOR_ERROR_BAD_SURFACE = 0;
  static const int WL_SUBCOMPOSITOR_ERROR_BAD_PARENT = 1;
}

abstract class enum_wl_subsurface_error {
  static const int WL_SUBSURFACE_ERROR_BAD_SURFACE = 0;
}

class struct_wlr_addon extends ffi.Struct {
  external ffi.Pointer<struct_wlr_addon_interface> impl;

  external ffi.Pointer<ffi.Void> owner;

  external struct_wl_list link;
}

class struct_wlr_addon_interface extends ffi.Struct {
  external ffi.Pointer<ffi.Char> name;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wlr_addon> addon)>> destroy;
}

class struct_wlr_shm_attributes extends ffi.Struct {
  @ffi.Int()
  external int fd;

  @ffi.Uint32()
  external int format;

  @ffi.Int()
  external int width;

  @ffi.Int()
  external int height;

  @ffi.Int()
  external int stride;

  @ffi.Long()
  external int offset;
}

abstract class enum_wlr_buffer_cap {
  static const int WLR_BUFFER_CAP_DATA_PTR = 1;
  static const int WLR_BUFFER_CAP_DMABUF = 2;
  static const int WLR_BUFFER_CAP_SHM = 4;
}

class struct_wl_resource extends ffi.Struct {
  external struct_wl_object object;

  external ffi.Pointer<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<struct_wl_resource>)>>
      destroy;

  external struct_wl_list link;

  external struct_wl_signal destroy_signal;

  external ffi.Pointer<struct_wl_client> client;

  external ffi.Pointer<ffi.Void> data;
}

class struct_wl_object extends ffi.Struct {
  external ffi.Pointer<struct_wl_interface> interface1;

  external ffi.Pointer<ffi.Void> implementation;

  @ffi.Uint32()
  external int id;
}

class struct_wl_interface extends ffi.Struct {
  external ffi.Pointer<ffi.Char> name;

  @ffi.Int()
  external int version;

  @ffi.Int()
  external int method_count;

  external ffi.Pointer<struct_wl_message> methods;

  @ffi.Int()
  external int event_count;

  external ffi.Pointer<struct_wl_message> events;
}

class struct_wl_message extends ffi.Struct {
  external ffi.Pointer<ffi.Char> name;

  external ffi.Pointer<ffi.Char> signature;

  external ffi.Pointer<ffi.Pointer<struct_wl_interface>> types;
}

class struct_wl_client extends ffi.Opaque {}

abstract class enum_wlr_buffer_data_ptr_access_flag {
  static const int WLR_BUFFER_DATA_PTR_ACCESS_READ = 1;
  static const int WLR_BUFFER_DATA_PTR_ACCESS_WRITE = 2;
}

class struct_wlr_client_buffer extends ffi.Struct {
  external struct_wlr_buffer base;

  external ffi.Pointer<struct_wlr_texture> texture;

  external ffi.Pointer<struct_wlr_buffer> source;

  external struct_wl_listener source_destroy;

  @ffi.Size()
  external int n_ignore_locks;
}

abstract class enum_wlr_output_mode_aspect_ratio {
  static const int WLR_OUTPUT_MODE_ASPECT_RATIO_NONE = 0;
  static const int WLR_OUTPUT_MODE_ASPECT_RATIO_4_3 = 1;
  static const int WLR_OUTPUT_MODE_ASPECT_RATIO_16_9 = 2;
  static const int WLR_OUTPUT_MODE_ASPECT_RATIO_64_27 = 3;
  static const int WLR_OUTPUT_MODE_ASPECT_RATIO_256_135 = 4;
}

class struct_wlr_output_mode extends ffi.Struct {
  @ffi.Int32()
  external int width;

  @ffi.Int32()
  external int height;

  @ffi.Int32()
  external int refresh;

  @ffi.Bool()
  external bool preferred;

  @ffi.Int32()
  external int picture_aspect_ratio;

  external struct_wl_list link;
}

class struct_wlr_output_cursor extends ffi.Struct {
  external ffi.Pointer<struct_wlr_output> output;

  @ffi.Double()
  external double x;

  @ffi.Double()
  external double y;

  @ffi.Bool()
  external bool enabled;

  @ffi.Bool()
  external bool visible;

  @ffi.Uint32()
  external int width;

  @ffi.Uint32()
  external int height;

  @ffi.Int32()
  external int hotspot_x;

  @ffi.Int32()
  external int hotspot_y;

  external struct_wl_list link;

  external ffi.Pointer<struct_wlr_texture> texture;

  external ffi.Pointer<struct_wlr_surface> surface;

  external struct_wl_listener surface_commit;

  external struct_wl_listener surface_destroy;
}

class struct_wlr_output extends ffi.Struct {
  external ffi.Pointer<struct_wlr_output_impl> impl;

  external ffi.Pointer<struct_wlr_backend> backend;

  external ffi.Pointer<struct_wl_display> display;

  external ffi.Pointer<struct_wl_global> global;

  external struct_wl_list resources;

  external ffi.Pointer<ffi.Char> name;

  external ffi.Pointer<ffi.Char> description;

  external ffi.Pointer<ffi.Char> make;

  external ffi.Pointer<ffi.Char> model;

  external ffi.Pointer<ffi.Char> serial;

  @ffi.Int32()
  external int phys_width;

  @ffi.Int32()
  external int phys_height;

  external struct_wl_list modes;

  external ffi.Pointer<struct_wlr_output_mode> current_mode;

  @ffi.Int32()
  external int width;

  @ffi.Int32()
  external int height;

  @ffi.Int32()
  external int refresh;

  @ffi.Bool()
  external bool enabled;

  @ffi.Float()
  external double scale;

  @ffi.Int32()
  external int subpixel;

  @ffi.Int32()
  external int transform;

  @ffi.Int32()
  external int adaptive_sync_status;

  @ffi.Uint32()
  external int render_format;

  @ffi.Bool()
  external bool needs_frame;

  @ffi.Bool()
  external bool frame_pending;

  @ffi.Array.multi([9])
  external ffi.Array<ffi.Float> transform_matrix;

  @ffi.Bool()
  external bool non_desktop;

  external struct_wlr_output_state pending;

  @ffi.Uint32()
  external int commit_seq;

  external UnnamedStruct8 events;

  external ffi.Pointer<struct_wl_event_source> idle_frame;

  external ffi.Pointer<struct_wl_event_source> idle_done;

  @ffi.Int()
  external int attach_render_locks;

  external struct_wl_list cursors;

  external ffi.Pointer<struct_wlr_output_cursor> hardware_cursor;

  external ffi.Pointer<struct_wlr_swapchain> cursor_swapchain;

  external ffi.Pointer<struct_wlr_buffer> cursor_front_buffer;

  @ffi.Int()
  external int software_cursor_locks;

  external ffi.Pointer<struct_wlr_allocator> allocator;

  external ffi.Pointer<struct_wlr_renderer> renderer;

  external ffi.Pointer<struct_wlr_swapchain> swapchain;

  external ffi.Pointer<struct_wlr_buffer> back_buffer;

  external struct_wl_listener display_destroy;

  external struct_wlr_addon_set addons;

  external ffi.Pointer<ffi.Void> data;
}

class struct_wlr_output_impl extends ffi.Opaque {}

class struct_wl_global extends ffi.Opaque {}

abstract class enum_wlr_output_adaptive_sync_status {
  static const int WLR_OUTPUT_ADAPTIVE_SYNC_DISABLED = 0;
  static const int WLR_OUTPUT_ADAPTIVE_SYNC_ENABLED = 1;
}

class struct_wlr_output_state extends ffi.Struct {
  @ffi.Uint32()
  external int committed;

  @ffi.Bool()
  external bool allow_artifacts;

  external struct_pixman_region32 damage;

  @ffi.Bool()
  external bool enabled;

  @ffi.Float()
  external double scale;

  @ffi.Int32()
  external int transform;

  @ffi.Bool()
  external bool adaptive_sync_enabled;

  @ffi.Uint32()
  external int render_format;

  @ffi.Int32()
  external int subpixel;

  external ffi.Pointer<struct_wlr_buffer> buffer;

  @ffi.Int32()
  external int mode_type;

  external ffi.Pointer<struct_wlr_output_mode> mode;

  external UnnamedStruct7 custom_mode;

  external ffi.Pointer<ffi.Uint16> gamma_lut;

  @ffi.Size()
  external int gamma_lut_size;
}

abstract class enum_wlr_output_state_mode_type {
  static const int WLR_OUTPUT_STATE_MODE_FIXED = 0;
  static const int WLR_OUTPUT_STATE_MODE_CUSTOM = 1;
}

class UnnamedStruct7 extends ffi.Struct {
  @ffi.Int32()
  external int width;

  @ffi.Int32()
  external int height;

  @ffi.Int32()
  external int refresh;
}

class UnnamedStruct8 extends ffi.Struct {
  external struct_wl_signal frame;

  external struct_wl_signal damage;

  external struct_wl_signal needs_frame;

  external struct_wl_signal precommit;

  external struct_wl_signal commit;

  external struct_wl_signal present;

  external struct_wl_signal bind;

  external struct_wl_signal enable;

  external struct_wl_signal mode;

  external struct_wl_signal description;

  external struct_wl_signal destroy;
}

class struct_wlr_swapchain extends ffi.Opaque {}

class struct_wlr_surface extends ffi.Struct {
  external ffi.Pointer<struct_wl_resource> resource;

  external ffi.Pointer<struct_wlr_renderer> renderer;

  external ffi.Pointer<struct_wlr_client_buffer> buffer;

  @ffi.Int()
  external int sx;

  @ffi.Int()
  external int sy;

  external struct_pixman_region32 buffer_damage;

  external struct_pixman_region32 external_damage;

  external struct_pixman_region32 opaque_region;

  external struct_pixman_region32 input_region;

  external struct_wlr_surface_state current;

  external struct_wlr_surface_state pending;

  external struct_wl_list cached;

  external ffi.Pointer<struct_wlr_surface_role> role;

  external ffi.Pointer<ffi.Void> role_data;

  external UnnamedStruct10 events;

  external struct_wl_list current_outputs;

  external struct_wlr_addon_set addons;

  external ffi.Pointer<ffi.Void> data;

  external struct_wl_listener renderer_destroy;

  external UnnamedStruct11 previous;

  @ffi.Bool()
  external bool opaque;
}

class struct_wlr_surface_state extends ffi.Struct {
  @ffi.Uint32()
  external int committed;

  @ffi.Uint32()
  external int seq;

  external ffi.Pointer<struct_wlr_buffer> buffer;

  @ffi.Int32()
  external int dx;

  @ffi.Int32()
  external int dy;

  external struct_pixman_region32 surface_damage;

  external struct_pixman_region32 buffer_damage;

  external struct_pixman_region32 opaque;

  external struct_pixman_region32 input;

  @ffi.Int32()
  external int transform;

  @ffi.Int32()
  external int scale;

  external struct_wl_list frame_callback_list;

  @ffi.Int()
  external int width;

  @ffi.Int()
  external int height;

  @ffi.Int()
  external int buffer_width;

  @ffi.Int()
  external int buffer_height;

  external struct_wl_list subsurfaces_below;

  external struct_wl_list subsurfaces_above;

  external UnnamedStruct9 viewport;

  @ffi.Size()
  external int cached_state_locks;

  external struct_wl_list cached_state_link;
}

class UnnamedStruct9 extends ffi.Struct {
  @ffi.Bool()
  external bool has_src;

  @ffi.Bool()
  external bool has_dst;

  external struct_wlr_fbox src;

  @ffi.Int()
  external int dst_width;

  @ffi.Int()
  external int dst_height;
}

class struct_wlr_surface_role extends ffi.Struct {
  external ffi.Pointer<ffi.Char> name;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wlr_surface> surface)>> commit;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wlr_surface> surface,
              ffi.Pointer<struct_wlr_surface_state> state)>> precommit;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wlr_surface> surface)>> destroy;
}

class UnnamedStruct10 extends ffi.Struct {
  external struct_wl_signal client_commit;

  external struct_wl_signal commit;

  external struct_wl_signal new_subsurface;

  external struct_wl_signal destroy;
}

class UnnamedStruct11 extends ffi.Struct {
  @ffi.Int32()
  external int scale;

  @ffi.Int32()
  external int transform;

  @ffi.Int()
  external int width;

  @ffi.Int()
  external int height;

  @ffi.Int()
  external int buffer_width;

  @ffi.Int()
  external int buffer_height;
}

abstract class enum_wlr_output_state_field {
  static const int WLR_OUTPUT_STATE_BUFFER = 1;
  static const int WLR_OUTPUT_STATE_DAMAGE = 2;
  static const int WLR_OUTPUT_STATE_MODE = 4;
  static const int WLR_OUTPUT_STATE_ENABLED = 8;
  static const int WLR_OUTPUT_STATE_SCALE = 16;
  static const int WLR_OUTPUT_STATE_TRANSFORM = 32;
  static const int WLR_OUTPUT_STATE_ADAPTIVE_SYNC_ENABLED = 64;
  static const int WLR_OUTPUT_STATE_GAMMA_LUT = 128;
  static const int WLR_OUTPUT_STATE_RENDER_FORMAT = 256;
  static const int WLR_OUTPUT_STATE_SUBPIXEL = 512;
}

class struct_wlr_output_event_damage extends ffi.Struct {
  external ffi.Pointer<struct_wlr_output> output;

  external ffi.Pointer<struct_pixman_region32> damage;
}

class struct_wlr_output_event_precommit extends ffi.Struct {
  external ffi.Pointer<struct_wlr_output> output;

  external ffi.Pointer<struct_timespec> when;

  external ffi.Pointer<struct_wlr_output_state> state;
}

class struct_timespec extends ffi.Struct {
  @ffi.Long()
  external int tv_sec;

  @ffi.Long()
  external int tv_nsec;
}

class struct_wlr_output_event_commit extends ffi.Struct {
  external ffi.Pointer<struct_wlr_output> output;

  @ffi.Uint32()
  external int committed;

  external ffi.Pointer<struct_timespec> when;

  external ffi.Pointer<struct_wlr_buffer> buffer;
}

abstract class enum_wlr_output_present_flag {
  static const int WLR_OUTPUT_PRESENT_VSYNC = 1;
  static const int WLR_OUTPUT_PRESENT_HW_CLOCK = 2;
  static const int WLR_OUTPUT_PRESENT_HW_COMPLETION = 4;
  static const int WLR_OUTPUT_PRESENT_ZERO_COPY = 8;
}

class struct_wlr_output_event_present extends ffi.Struct {
  external ffi.Pointer<struct_wlr_output> output;

  @ffi.Uint32()
  external int commit_seq;

  @ffi.Bool()
  external bool presented;

  external ffi.Pointer<struct_timespec> when;

  @ffi.UnsignedInt()
  external int seq;

  @ffi.Int()
  external int refresh;

  @ffi.Uint32()
  external int flags;
}

class struct_wlr_output_event_bind extends ffi.Struct {
  external ffi.Pointer<struct_wlr_output> output;

  external ffi.Pointer<struct_wl_resource> resource;
}

abstract class enum_wlr_surface_state_field {
  static const int WLR_SURFACE_STATE_BUFFER = 1;
  static const int WLR_SURFACE_STATE_SURFACE_DAMAGE = 2;
  static const int WLR_SURFACE_STATE_BUFFER_DAMAGE = 4;
  static const int WLR_SURFACE_STATE_OPAQUE_REGION = 8;
  static const int WLR_SURFACE_STATE_INPUT_REGION = 16;
  static const int WLR_SURFACE_STATE_TRANSFORM = 32;
  static const int WLR_SURFACE_STATE_SCALE = 64;
  static const int WLR_SURFACE_STATE_FRAME_CALLBACK_LIST = 128;
  static const int WLR_SURFACE_STATE_VIEWPORT = 256;
  static const int WLR_SURFACE_STATE_OFFSET = 512;
}

class struct_wlr_surface_output extends ffi.Struct {
  external ffi.Pointer<struct_wlr_surface> surface;

  external ffi.Pointer<struct_wlr_output> output;

  external struct_wl_list link;

  external struct_wl_listener bind;

  external struct_wl_listener destroy;
}

class struct_wlr_compositor extends ffi.Struct {
  external ffi.Pointer<struct_wl_global> global;

  external ffi.Pointer<struct_wlr_renderer> renderer;

  external struct_wl_listener display_destroy;

  external UnnamedStruct12 events;
}

class UnnamedStruct12 extends ffi.Struct {
  external struct_wl_signal new_surface;

  external struct_wl_signal destroy;
}

abstract class enum_wlr_button_state {
  static const int WLR_BUTTON_RELEASED = 0;
  static const int WLR_BUTTON_PRESSED = 1;
}

abstract class enum_wlr_input_device_type {
  static const int WLR_INPUT_DEVICE_KEYBOARD = 0;
  static const int WLR_INPUT_DEVICE_POINTER = 1;
  static const int WLR_INPUT_DEVICE_TOUCH = 2;
  static const int WLR_INPUT_DEVICE_TABLET_TOOL = 3;
  static const int WLR_INPUT_DEVICE_TABLET_PAD = 4;
  static const int WLR_INPUT_DEVICE_SWITCH = 5;
}

class struct_wlr_input_device extends ffi.Struct {
  @ffi.Int32()
  external int type;

  @ffi.UnsignedInt()
  external int vendor;

  @ffi.UnsignedInt()
  external int product;

  external ffi.Pointer<ffi.Char> name;

  external UnnamedStruct13 events;

  external ffi.Pointer<ffi.Void> data;
}

class UnnamedStruct13 extends ffi.Struct {
  external struct_wl_signal destroy;
}

abstract class enum_wlr_keyboard_led {
  static const int WLR_LED_NUM_LOCK = 1;
  static const int WLR_LED_CAPS_LOCK = 2;
  static const int WLR_LED_SCROLL_LOCK = 4;
}

abstract class enum_wlr_keyboard_modifier {
  static const int WLR_MODIFIER_SHIFT = 1;
  static const int WLR_MODIFIER_CAPS = 2;
  static const int WLR_MODIFIER_CTRL = 4;
  static const int WLR_MODIFIER_ALT = 8;
  static const int WLR_MODIFIER_MOD2 = 16;
  static const int WLR_MODIFIER_MOD3 = 32;
  static const int WLR_MODIFIER_LOGO = 64;
  static const int WLR_MODIFIER_MOD5 = 128;
}

class struct_wlr_keyboard_impl extends ffi.Opaque {}

class struct_wlr_keyboard_modifiers extends ffi.Struct {
  @ffi.Uint32()
  external int depressed;

  @ffi.Uint32()
  external int latched;

  @ffi.Uint32()
  external int locked;

  @ffi.Uint32()
  external int group;
}

class struct_wlr_keyboard extends ffi.Struct {
  external struct_wlr_input_device base;

  external ffi.Pointer<struct_wlr_keyboard_impl> impl;

  external ffi.Pointer<struct_wlr_keyboard_group> group;

  external ffi.Pointer<ffi.Char> keymap_string;

  @ffi.Size()
  external int keymap_size;

  @ffi.Int()
  external int keymap_fd;

  external ffi.Pointer<struct_xkb_keymap> keymap;

  external ffi.Pointer<struct_xkb_state> xkb_state;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Uint32> led_indexes;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Uint32> mod_indexes;

  @ffi.Array.multi([32])
  external ffi.Array<ffi.Uint32> keycodes;

  @ffi.Size()
  external int num_keycodes;

  external struct_wlr_keyboard_modifiers modifiers;

  external UnnamedStruct14 repeat_info;

  external UnnamedStruct15 events;

  external ffi.Pointer<ffi.Void> data;
}

class struct_wlr_keyboard_group extends ffi.Opaque {}

class struct_xkb_keymap extends ffi.Opaque {}

class struct_xkb_state extends ffi.Opaque {}

class UnnamedStruct14 extends ffi.Struct {
  @ffi.Int32()
  external int rate;

  @ffi.Int32()
  external int delay;
}

class UnnamedStruct15 extends ffi.Struct {
  external struct_wl_signal key;

  external struct_wl_signal modifiers;

  external struct_wl_signal keymap;

  external struct_wl_signal repeat_info;
}

class struct_wlr_keyboard_key_event extends ffi.Struct {
  @ffi.Uint32()
  external int time_msec;

  @ffi.Uint32()
  external int keycode;

  @ffi.Bool()
  external bool update_state;

  @ffi.Int32()
  external int state;
}

class struct_wlr_output_damage extends ffi.Struct {
  external ffi.Pointer<struct_wlr_output> output;

  @ffi.Int()
  external int max_rects;

  external struct_pixman_region32 current;

  @ffi.Array.multi([2])
  external ffi.Array<struct_pixman_region32> previous;

  @ffi.Size()
  external int previous_idx;

  external UnnamedStruct16 events;

  external struct_wl_listener output_destroy;

  external struct_wl_listener output_mode;

  external struct_wl_listener output_needs_frame;

  external struct_wl_listener output_damage;

  external struct_wl_listener output_frame;

  external struct_wl_listener output_commit;
}

class UnnamedStruct16 extends ffi.Struct {
  external struct_wl_signal frame;

  external struct_wl_signal destroy;
}

class struct_wlr_pointer_impl extends ffi.Opaque {}

class struct_wlr_pointer extends ffi.Struct {
  external struct_wlr_input_device base;

  external ffi.Pointer<struct_wlr_pointer_impl> impl;

  external ffi.Pointer<ffi.Char> output_name;

  external UnnamedStruct17 events;

  external ffi.Pointer<ffi.Void> data;
}

class UnnamedStruct17 extends ffi.Struct {
  external struct_wl_signal motion;

  external struct_wl_signal motion_absolute;

  external struct_wl_signal button;

  external struct_wl_signal axis;

  external struct_wl_signal frame;

  external struct_wl_signal swipe_begin;

  external struct_wl_signal swipe_update;

  external struct_wl_signal swipe_end;

  external struct_wl_signal pinch_begin;

  external struct_wl_signal pinch_update;

  external struct_wl_signal pinch_end;

  external struct_wl_signal hold_begin;

  external struct_wl_signal hold_end;
}

class struct_wlr_pointer_motion_event extends ffi.Struct {
  external ffi.Pointer<struct_wlr_pointer> pointer;

  @ffi.Uint32()
  external int time_msec;

  @ffi.Double()
  external double delta_x;

  @ffi.Double()
  external double delta_y;

  @ffi.Double()
  external double unaccel_dx;

  @ffi.Double()
  external double unaccel_dy;
}

class struct_wlr_pointer_motion_absolute_event extends ffi.Struct {
  external ffi.Pointer<struct_wlr_pointer> pointer;

  @ffi.Uint32()
  external int time_msec;

  @ffi.Double()
  external double x;

  @ffi.Double()
  external double y;
}

class struct_wlr_pointer_button_event extends ffi.Struct {
  external ffi.Pointer<struct_wlr_pointer> pointer;

  @ffi.Uint32()
  external int time_msec;

  @ffi.Uint32()
  external int button;

  @ffi.Int32()
  external int state;
}

abstract class enum_wlr_axis_source {
  static const int WLR_AXIS_SOURCE_WHEEL = 0;
  static const int WLR_AXIS_SOURCE_FINGER = 1;
  static const int WLR_AXIS_SOURCE_CONTINUOUS = 2;
  static const int WLR_AXIS_SOURCE_WHEEL_TILT = 3;
}

abstract class enum_wlr_axis_orientation {
  static const int WLR_AXIS_ORIENTATION_VERTICAL = 0;
  static const int WLR_AXIS_ORIENTATION_HORIZONTAL = 1;
}

class struct_wlr_pointer_axis_event extends ffi.Struct {
  external ffi.Pointer<struct_wlr_pointer> pointer;

  @ffi.Uint32()
  external int time_msec;

  @ffi.Int32()
  external int source;

  @ffi.Int32()
  external int orientation;

  @ffi.Double()
  external double delta;

  @ffi.Int32()
  external int delta_discrete;
}

class struct_wlr_pointer_swipe_begin_event extends ffi.Struct {
  external ffi.Pointer<struct_wlr_pointer> pointer;

  @ffi.Uint32()
  external int time_msec;

  @ffi.Uint32()
  external int fingers;
}

class struct_wlr_pointer_swipe_update_event extends ffi.Struct {
  external ffi.Pointer<struct_wlr_pointer> pointer;

  @ffi.Uint32()
  external int time_msec;

  @ffi.Uint32()
  external int fingers;

  @ffi.Double()
  external double dx;

  @ffi.Double()
  external double dy;
}

class struct_wlr_pointer_swipe_end_event extends ffi.Struct {
  external ffi.Pointer<struct_wlr_pointer> pointer;

  @ffi.Uint32()
  external int time_msec;

  @ffi.Bool()
  external bool cancelled;
}

class struct_wlr_pointer_pinch_begin_event extends ffi.Struct {
  external ffi.Pointer<struct_wlr_pointer> pointer;

  @ffi.Uint32()
  external int time_msec;

  @ffi.Uint32()
  external int fingers;
}

class struct_wlr_pointer_pinch_update_event extends ffi.Struct {
  external ffi.Pointer<struct_wlr_pointer> pointer;

  @ffi.Uint32()
  external int time_msec;

  @ffi.Uint32()
  external int fingers;

  @ffi.Double()
  external double dx;

  @ffi.Double()
  external double dy;

  @ffi.Double()
  external double scale;

  @ffi.Double()
  external double rotation;
}

class struct_wlr_pointer_pinch_end_event extends ffi.Struct {
  external ffi.Pointer<struct_wlr_pointer> pointer;

  @ffi.Uint32()
  external int time_msec;

  @ffi.Bool()
  external bool cancelled;
}

class struct_wlr_pointer_hold_begin_event extends ffi.Struct {
  external ffi.Pointer<struct_wlr_pointer> pointer;

  @ffi.Uint32()
  external int time_msec;

  @ffi.Uint32()
  external int fingers;
}

class struct_wlr_pointer_hold_end_event extends ffi.Struct {
  external ffi.Pointer<struct_wlr_pointer> pointer;

  @ffi.Uint32()
  external int time_msec;

  @ffi.Bool()
  external bool cancelled;
}

class struct_wlr_serial_range extends ffi.Struct {
  @ffi.Uint32()
  external int min_incl;

  @ffi.Uint32()
  external int max_incl;
}

class struct_wlr_serial_ringset extends ffi.Struct {
  @ffi.Array.multi([128])
  external ffi.Array<struct_wlr_serial_range> data;

  @ffi.Int()
  external int end;

  @ffi.Int()
  external int count;
}

class struct_wlr_seat_client extends ffi.Struct {
  external ffi.Pointer<struct_wl_client> client;

  external ffi.Pointer<struct_wlr_seat> seat;

  external struct_wl_list link;

  external struct_wl_list resources;

  external struct_wl_list pointers;

  external struct_wl_list keyboards;

  external struct_wl_list touches;

  external struct_wl_list data_devices;

  external UnnamedStruct22 events;

  external struct_wlr_serial_ringset serials;

  @ffi.Bool()
  external bool needs_touch_frame;

  external UnnamedStruct23 value120;
}

class struct_wlr_seat extends ffi.Struct {
  external ffi.Pointer<struct_wl_global> global;

  external ffi.Pointer<struct_wl_display> display;

  external struct_wl_list clients;

  external ffi.Pointer<ffi.Char> name;

  @ffi.Uint32()
  external int capabilities;

  @ffi.Uint32()
  external int accumulated_capabilities;

  external struct_timespec last_event;

  external ffi.Pointer<struct_wlr_data_source> selection_source;

  @ffi.Uint32()
  external int selection_serial;

  external struct_wl_list selection_offers;

  external ffi.Pointer<struct_wlr_primary_selection_source>
      primary_selection_source;

  @ffi.Uint32()
  external int primary_selection_serial;

  external ffi.Pointer<struct_wlr_drag> drag;

  external ffi.Pointer<struct_wlr_data_source> drag_source;

  @ffi.Uint32()
  external int drag_serial;

  external struct_wl_list drag_offers;

  external struct_wlr_seat_pointer_state pointer_state;

  external struct_wlr_seat_keyboard_state keyboard_state;

  external struct_wlr_seat_touch_state touch_state;

  external struct_wl_listener display_destroy;

  external struct_wl_listener selection_source_destroy;

  external struct_wl_listener primary_selection_source_destroy;

  external struct_wl_listener drag_source_destroy;

  external UnnamedStruct21 events;

  external ffi.Pointer<ffi.Void> data;
}

class struct_wlr_data_source extends ffi.Opaque {}

class struct_wlr_primary_selection_source extends ffi.Opaque {}

class struct_wlr_drag extends ffi.Opaque {}

class struct_wlr_seat_pointer_state extends ffi.Struct {
  external ffi.Pointer<struct_wlr_seat> seat;

  external ffi.Pointer<struct_wlr_seat_client> focused_client;

  external ffi.Pointer<struct_wlr_surface> focused_surface;

  @ffi.Double()
  external double sx;

  @ffi.Double()
  external double sy;

  external ffi.Pointer<struct_wlr_seat_pointer_grab> grab;

  external ffi.Pointer<struct_wlr_seat_pointer_grab> default_grab;

  @ffi.Bool()
  external bool sent_axis_source;

  @ffi.Int32()
  external int cached_axis_source;

  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint32> buttons;

  @ffi.Size()
  external int button_count;

  @ffi.Uint32()
  external int grab_button;

  @ffi.Uint32()
  external int grab_serial;

  @ffi.Uint32()
  external int grab_time;

  external struct_wl_listener surface_destroy;

  external UnnamedStruct18 events;
}

class struct_wlr_seat_pointer_grab extends ffi.Struct {
  external ffi.Pointer<struct_wlr_pointer_grab_interface> interface1;

  external ffi.Pointer<struct_wlr_seat> seat;

  external ffi.Pointer<ffi.Void> data;
}

class struct_wlr_pointer_grab_interface extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wlr_seat_pointer_grab> grab,
              ffi.Pointer<struct_wlr_surface> surface,
              ffi.Double sx,
              ffi.Double sy)>> enter;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wlr_seat_pointer_grab> grab)>> clear_focus;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wlr_seat_pointer_grab> grab,
              ffi.Uint32 time_msec, ffi.Double sx, ffi.Double sy)>> motion;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Uint32 Function(
              ffi.Pointer<struct_wlr_seat_pointer_grab> grab,
              ffi.Uint32 time_msec,
              ffi.Uint32 button,
              ffi.Int32 state)>> button;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wlr_seat_pointer_grab> grab,
              ffi.Uint32 time_msec,
              ffi.Int32 orientation,
              ffi.Double value,
              ffi.Int32 value_discrete,
              ffi.Int32 source)>> axis;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wlr_seat_pointer_grab> grab)>> frame;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wlr_seat_pointer_grab> grab)>> cancel;
}

class UnnamedStruct18 extends ffi.Struct {
  external struct_wl_signal focus_change;
}

class struct_wlr_seat_keyboard_state extends ffi.Struct {
  external ffi.Pointer<struct_wlr_seat> seat;

  external ffi.Pointer<struct_wlr_keyboard> keyboard;

  external ffi.Pointer<struct_wlr_seat_client> focused_client;

  external ffi.Pointer<struct_wlr_surface> focused_surface;

  external struct_wl_listener keyboard_destroy;

  external struct_wl_listener keyboard_keymap;

  external struct_wl_listener keyboard_repeat_info;

  external struct_wl_listener surface_destroy;

  external ffi.Pointer<struct_wlr_seat_keyboard_grab> grab;

  external ffi.Pointer<struct_wlr_seat_keyboard_grab> default_grab;

  external UnnamedStruct19 events;
}

class struct_wlr_seat_keyboard_grab extends ffi.Struct {
  external ffi.Pointer<struct_wlr_keyboard_grab_interface> interface1;

  external ffi.Pointer<struct_wlr_seat> seat;

  external ffi.Pointer<ffi.Void> data;
}

class struct_wlr_keyboard_grab_interface extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wlr_seat_keyboard_grab> grab,
              ffi.Pointer<struct_wlr_surface> surface,
              ffi.Pointer<ffi.Uint32> keycodes,
              ffi.Size num_keycodes,
              ffi.Pointer<struct_wlr_keyboard_modifiers> modifiers)>> enter;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wlr_seat_keyboard_grab> grab)>> clear_focus;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wlr_seat_keyboard_grab> grab,
              ffi.Uint32 time_msec, ffi.Uint32 key, ffi.Uint32 state)>> key;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wlr_seat_keyboard_grab> grab,
              ffi.Pointer<struct_wlr_keyboard_modifiers> modifiers)>> modifiers;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wlr_seat_keyboard_grab> grab)>> cancel;
}

class UnnamedStruct19 extends ffi.Struct {
  external struct_wl_signal focus_change;
}

class struct_wlr_seat_touch_state extends ffi.Struct {
  external ffi.Pointer<struct_wlr_seat> seat;

  external struct_wl_list touch_points;

  @ffi.Uint32()
  external int grab_serial;

  @ffi.Uint32()
  external int grab_id;

  external ffi.Pointer<struct_wlr_seat_touch_grab> grab;

  external ffi.Pointer<struct_wlr_seat_touch_grab> default_grab;
}

class struct_wlr_seat_touch_grab extends ffi.Struct {
  external ffi.Pointer<struct_wlr_touch_grab_interface> interface1;

  external ffi.Pointer<struct_wlr_seat> seat;

  external ffi.Pointer<ffi.Void> data;
}

class struct_wlr_touch_grab_interface extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Uint32 Function(
              ffi.Pointer<struct_wlr_seat_touch_grab> grab,
              ffi.Uint32 time_msec,
              ffi.Pointer<struct_wlr_touch_point> point)>> down;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wlr_seat_touch_grab> grab,
              ffi.Uint32 time_msec,
              ffi.Pointer<struct_wlr_touch_point> point)>> up;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wlr_seat_touch_grab> grab,
              ffi.Uint32 time_msec,
              ffi.Pointer<struct_wlr_touch_point> point)>> motion;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<struct_wlr_seat_touch_grab> grab,
              ffi.Uint32 time_msec,
              ffi.Pointer<struct_wlr_touch_point> point)>> enter;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<struct_wlr_seat_touch_grab> grab)>>
      frame;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<struct_wlr_seat_touch_grab> grab)>>
      cancel;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<struct_wlr_seat_touch_grab> grab,
              ffi.Pointer<struct_wlr_surface> surface)>> wl_cancel;
}

class struct_wlr_touch_point extends ffi.Struct {
  @ffi.Int32()
  external int touch_id;

  external ffi.Pointer<struct_wlr_surface> surface;

  external ffi.Pointer<struct_wlr_seat_client> client;

  external ffi.Pointer<struct_wlr_surface> focus_surface;

  external ffi.Pointer<struct_wlr_seat_client> focus_client;

  @ffi.Double()
  external double sx;

  @ffi.Double()
  external double sy;

  external struct_wl_listener surface_destroy;

  external struct_wl_listener focus_surface_destroy;

  external struct_wl_listener client_destroy;

  external UnnamedStruct20 events;

  external struct_wl_list link;
}

class UnnamedStruct20 extends ffi.Struct {
  external struct_wl_signal destroy;
}

class UnnamedStruct21 extends ffi.Struct {
  external struct_wl_signal pointer_grab_begin;

  external struct_wl_signal pointer_grab_end;

  external struct_wl_signal keyboard_grab_begin;

  external struct_wl_signal keyboard_grab_end;

  external struct_wl_signal touch_grab_begin;

  external struct_wl_signal touch_grab_end;

  external struct_wl_signal request_set_cursor;

  external struct_wl_signal request_set_selection;

  external struct_wl_signal set_selection;

  external struct_wl_signal request_set_primary_selection;

  external struct_wl_signal set_primary_selection;

  external struct_wl_signal request_start_drag;

  external struct_wl_signal start_drag;

  external struct_wl_signal destroy;
}

class UnnamedStruct22 extends ffi.Struct {
  external struct_wl_signal destroy;
}

class UnnamedStruct23 extends ffi.Struct {
  @ffi.Array.multi([2])
  external ffi.Array<ffi.Int32> acc_discrete;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.Int32> last_discrete;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.Double> acc_axis;
}

class struct_wlr_seat_pointer_request_set_cursor_event extends ffi.Struct {
  external ffi.Pointer<struct_wlr_seat_client> seat_client;

  external ffi.Pointer<struct_wlr_surface> surface;

  @ffi.Uint32()
  external int serial;

  @ffi.Int32()
  external int hotspot_x;

  @ffi.Int32()
  external int hotspot_y;
}

class struct_wlr_seat_request_set_selection_event extends ffi.Struct {
  external ffi.Pointer<struct_wlr_data_source> source;

  @ffi.Uint32()
  external int serial;
}

class struct_wlr_seat_request_set_primary_selection_event extends ffi.Struct {
  external ffi.Pointer<struct_wlr_primary_selection_source> source;

  @ffi.Uint32()
  external int serial;
}

class struct_wlr_seat_request_start_drag_event extends ffi.Struct {
  external ffi.Pointer<struct_wlr_drag> drag;

  external ffi.Pointer<struct_wlr_surface> origin;

  @ffi.Uint32()
  external int serial;
}

class struct_wlr_seat_pointer_focus_change_event extends ffi.Struct {
  external ffi.Pointer<struct_wlr_seat> seat;

  external ffi.Pointer<struct_wlr_surface> old_surface;

  external ffi.Pointer<struct_wlr_surface> new_surface;

  @ffi.Double()
  external double sx;

  @ffi.Double()
  external double sy;
}

class struct_wlr_seat_keyboard_focus_change_event extends ffi.Struct {
  external ffi.Pointer<struct_wlr_seat> seat;

  external ffi.Pointer<struct_wlr_surface> old_surface;

  external ffi.Pointer<struct_wlr_surface> new_surface;
}

class struct_wlr_subsurface_parent_state extends ffi.Struct {
  @ffi.Int32()
  external int x;

  @ffi.Int32()
  external int y;

  external struct_wl_list link;
}

class struct_wlr_subsurface extends ffi.Struct {
  external ffi.Pointer<struct_wl_resource> resource;

  external ffi.Pointer<struct_wlr_surface> surface;

  external ffi.Pointer<struct_wlr_surface> parent;

  external struct_wlr_subsurface_parent_state current;

  external struct_wlr_subsurface_parent_state pending;

  @ffi.Uint32()
  external int cached_seq;

  @ffi.Bool()
  external bool has_cache;

  @ffi.Bool()
  external bool synchronized;

  @ffi.Bool()
  external bool reordered;

  @ffi.Bool()
  external bool mapped;

  @ffi.Bool()
  external bool added;

  external struct_wl_listener surface_client_commit;

  external struct_wl_listener parent_destroy;

  external UnnamedStruct24 events;

  external ffi.Pointer<ffi.Void> data;
}

class UnnamedStruct24 extends ffi.Struct {
  external struct_wl_signal destroy;

  external struct_wl_signal map;

  external struct_wl_signal unmap;
}

class struct_wlr_subcompositor extends ffi.Struct {
  external ffi.Pointer<struct_wl_global> global;

  external struct_wl_listener display_destroy;

  external UnnamedStruct25 events;
}

class UnnamedStruct25 extends ffi.Struct {
  external struct_wl_signal destroy;
}

class struct_wlr_xdg_shell extends ffi.Struct {
  external ffi.Pointer<struct_wl_global> global;

  @ffi.Uint32()
  external int version;

  external struct_wl_list clients;

  external struct_wl_list popup_grabs;

  @ffi.Uint32()
  external int ping_timeout;

  external struct_wl_listener display_destroy;

  external UnnamedStruct26 events;

  external ffi.Pointer<ffi.Void> data;
}

class UnnamedStruct26 extends ffi.Struct {
  external struct_wl_signal new_surface;

  external struct_wl_signal destroy;
}

class struct_wlr_xdg_client extends ffi.Struct {
  external ffi.Pointer<struct_wlr_xdg_shell> shell;

  external ffi.Pointer<struct_wl_resource> resource;

  external ffi.Pointer<struct_wl_client> client;

  external struct_wl_list surfaces;

  external struct_wl_list link;

  @ffi.Uint32()
  external int ping_serial;

  external ffi.Pointer<struct_wl_event_source> ping_timer;
}

class struct_wlr_xdg_positioner_rules extends ffi.Struct {
  external struct_wlr_box anchor_rect;

  @ffi.Int32()
  external int anchor;

  @ffi.Int32()
  external int gravity;

  @ffi.Int32()
  external int constraint_adjustment;

  @ffi.Bool()
  external bool reactive;

  @ffi.Bool()
  external bool has_parent_configure_serial;

  @ffi.Uint32()
  external int parent_configure_serial;

  external UnnamedStruct27 size;

  external UnnamedStruct27 parent_size;

  external UnnamedStruct28 offset;
}

abstract class enum_xdg_positioner_anchor {
  static const int XDG_POSITIONER_ANCHOR_NONE = 0;
  static const int XDG_POSITIONER_ANCHOR_TOP = 1;
  static const int XDG_POSITIONER_ANCHOR_BOTTOM = 2;
  static const int XDG_POSITIONER_ANCHOR_LEFT = 3;
  static const int XDG_POSITIONER_ANCHOR_RIGHT = 4;
  static const int XDG_POSITIONER_ANCHOR_TOP_LEFT = 5;
  static const int XDG_POSITIONER_ANCHOR_BOTTOM_LEFT = 6;
  static const int XDG_POSITIONER_ANCHOR_TOP_RIGHT = 7;
  static const int XDG_POSITIONER_ANCHOR_BOTTOM_RIGHT = 8;
}

abstract class enum_xdg_positioner_gravity {
  static const int XDG_POSITIONER_GRAVITY_NONE = 0;
  static const int XDG_POSITIONER_GRAVITY_TOP = 1;
  static const int XDG_POSITIONER_GRAVITY_BOTTOM = 2;
  static const int XDG_POSITIONER_GRAVITY_LEFT = 3;
  static const int XDG_POSITIONER_GRAVITY_RIGHT = 4;
  static const int XDG_POSITIONER_GRAVITY_TOP_LEFT = 5;
  static const int XDG_POSITIONER_GRAVITY_BOTTOM_LEFT = 6;
  static const int XDG_POSITIONER_GRAVITY_TOP_RIGHT = 7;
  static const int XDG_POSITIONER_GRAVITY_BOTTOM_RIGHT = 8;
}

abstract class enum_xdg_positioner_constraint_adjustment {
  static const int XDG_POSITIONER_CONSTRAINT_ADJUSTMENT_NONE = 0;
  static const int XDG_POSITIONER_CONSTRAINT_ADJUSTMENT_SLIDE_X = 1;
  static const int XDG_POSITIONER_CONSTRAINT_ADJUSTMENT_SLIDE_Y = 2;
  static const int XDG_POSITIONER_CONSTRAINT_ADJUSTMENT_FLIP_X = 4;
  static const int XDG_POSITIONER_CONSTRAINT_ADJUSTMENT_FLIP_Y = 8;
  static const int XDG_POSITIONER_CONSTRAINT_ADJUSTMENT_RESIZE_X = 16;
  static const int XDG_POSITIONER_CONSTRAINT_ADJUSTMENT_RESIZE_Y = 32;
}

class UnnamedStruct27 extends ffi.Struct {
  @ffi.Int32()
  external int width;

  @ffi.Int32()
  external int height;
}

class UnnamedStruct28 extends ffi.Struct {
  @ffi.Int32()
  external int x;

  @ffi.Int32()
  external int y;
}

class struct_wlr_xdg_positioner extends ffi.Struct {
  external ffi.Pointer<struct_wl_resource> resource;

  external struct_wlr_xdg_positioner_rules rules;
}

class struct_wlr_xdg_popup_state extends ffi.Struct {
  external struct_wlr_box geometry;

  @ffi.Bool()
  external bool reactive;
}

abstract class enum_wlr_xdg_popup_configure_field {
  static const int WLR_XDG_POPUP_CONFIGURE_REPOSITION_TOKEN = 1;
}

class struct_wlr_xdg_popup_configure extends ffi.Struct {
  @ffi.Uint32()
  external int fields;

  external struct_wlr_box geometry;

  external struct_wlr_xdg_positioner_rules rules;

  @ffi.Uint32()
  external int reposition_token;
}

class struct_wlr_xdg_popup extends ffi.Struct {
  external ffi.Pointer<struct_wlr_xdg_surface> base;

  external struct_wl_list link;

  external ffi.Pointer<struct_wl_resource> resource;

  @ffi.Bool()
  external bool committed;

  external ffi.Pointer<struct_wlr_surface> parent;

  external ffi.Pointer<struct_wlr_seat> seat;

  external struct_wlr_xdg_popup_configure scheduled;

  external struct_wlr_xdg_popup_state current;

  external struct_wlr_xdg_popup_state pending;

  external UnnamedStruct32 events;

  external struct_wl_list grab_link;
}

class struct_wlr_xdg_surface extends ffi.Struct {
  external ffi.Pointer<struct_wlr_xdg_client> client;

  external ffi.Pointer<struct_wl_resource> resource;

  external ffi.Pointer<struct_wlr_surface> surface;

  external struct_wl_list link;

  @ffi.Int32()
  external int role;

  external UnnamedUnion2 unnamed;

  external struct_wl_list popups;

  @ffi.Bool()
  external bool added;

  @ffi.Bool()
  external bool configured;

  @ffi.Bool()
  external bool mapped;

  external ffi.Pointer<struct_wl_event_source> configure_idle;

  @ffi.Uint32()
  external int scheduled_serial;

  external struct_wl_list configure_list;

  external struct_wlr_xdg_surface_state current;

  external struct_wlr_xdg_surface_state pending;

  external struct_wl_listener surface_commit;

  external UnnamedStruct31 events;

  external ffi.Pointer<ffi.Void> data;
}

abstract class enum_wlr_xdg_surface_role {
  static const int WLR_XDG_SURFACE_ROLE_NONE = 0;
  static const int WLR_XDG_SURFACE_ROLE_TOPLEVEL = 1;
  static const int WLR_XDG_SURFACE_ROLE_POPUP = 2;
}

class UnnamedUnion2 extends ffi.Union {
  external ffi.Pointer<struct_wlr_xdg_toplevel> toplevel;

  external ffi.Pointer<struct_wlr_xdg_popup> popup;
}

class struct_wlr_xdg_toplevel extends ffi.Struct {
  external ffi.Pointer<struct_wl_resource> resource;

  external ffi.Pointer<struct_wlr_xdg_surface> base;

  @ffi.Bool()
  external bool added;

  external ffi.Pointer<struct_wlr_xdg_toplevel> parent;

  external struct_wl_listener parent_unmap;

  external struct_wlr_xdg_toplevel_state current;

  external struct_wlr_xdg_toplevel_state pending;

  external struct_wlr_xdg_toplevel_configure scheduled;

  external struct_wlr_xdg_toplevel_requested requested;

  external ffi.Pointer<ffi.Char> title;

  external ffi.Pointer<ffi.Char> app_id;

  external UnnamedStruct30 events;
}

class struct_wlr_xdg_toplevel_state extends ffi.Struct {
  @ffi.Bool()
  external bool maximized;

  @ffi.Bool()
  external bool fullscreen;

  @ffi.Bool()
  external bool resizing;

  @ffi.Bool()
  external bool activated;

  @ffi.Uint32()
  external int tiled;

  @ffi.Int32()
  external int width;

  @ffi.Int32()
  external int height;

  @ffi.Int32()
  external int max_width;

  @ffi.Int32()
  external int max_height;

  @ffi.Int32()
  external int min_width;

  @ffi.Int32()
  external int min_height;
}

class struct_wlr_xdg_toplevel_configure extends ffi.Struct {
  @ffi.Uint32()
  external int fields;

  @ffi.Bool()
  external bool maximized;

  @ffi.Bool()
  external bool fullscreen;

  @ffi.Bool()
  external bool resizing;

  @ffi.Bool()
  external bool activated;

  @ffi.Uint32()
  external int tiled;

  @ffi.Int32()
  external int width;

  @ffi.Int32()
  external int height;

  external UnnamedStruct29 bounds;

  @ffi.Uint32()
  external int wm_capabilities;
}

class UnnamedStruct29 extends ffi.Struct {
  @ffi.Int32()
  external int width;

  @ffi.Int32()
  external int height;
}

class struct_wlr_xdg_toplevel_requested extends ffi.Struct {
  @ffi.Bool()
  external bool maximized;

  @ffi.Bool()
  external bool minimized;

  @ffi.Bool()
  external bool fullscreen;

  external ffi.Pointer<struct_wlr_output> fullscreen_output;

  external struct_wl_listener fullscreen_output_destroy;
}

class UnnamedStruct30 extends ffi.Struct {
  external struct_wl_signal request_maximize;

  external struct_wl_signal request_fullscreen;

  external struct_wl_signal request_minimize;

  external struct_wl_signal request_move;

  external struct_wl_signal request_resize;

  external struct_wl_signal request_show_window_menu;

  external struct_wl_signal set_parent;

  external struct_wl_signal set_title;

  external struct_wl_signal set_app_id;
}

class struct_wlr_xdg_surface_state extends ffi.Struct {
  @ffi.Uint32()
  external int configure_serial;

  external struct_wlr_box geometry;
}

class UnnamedStruct31 extends ffi.Struct {
  external struct_wl_signal destroy;

  external struct_wl_signal ping_timeout;

  external struct_wl_signal new_popup;

  external struct_wl_signal map;

  external struct_wl_signal unmap;

  external struct_wl_signal configure;

  external struct_wl_signal ack_configure;
}

class UnnamedStruct32 extends ffi.Struct {
  external struct_wl_signal reposition;
}

class struct_wlr_xdg_popup_grab extends ffi.Struct {
  external ffi.Pointer<struct_wl_client> client;

  external struct_wlr_seat_pointer_grab pointer_grab;

  external struct_wlr_seat_keyboard_grab keyboard_grab;

  external struct_wlr_seat_touch_grab touch_grab;

  external ffi.Pointer<struct_wlr_seat> seat;

  external struct_wl_list popups;

  external struct_wl_list link;

  external struct_wl_listener seat_destroy;
}

abstract class enum_wlr_xdg_toplevel_wm_capabilities {
  static const int WLR_XDG_TOPLEVEL_WM_CAPABILITIES_WINDOW_MENU = 1;
  static const int WLR_XDG_TOPLEVEL_WM_CAPABILITIES_MAXIMIZE = 2;
  static const int WLR_XDG_TOPLEVEL_WM_CAPABILITIES_FULLSCREEN = 4;
  static const int WLR_XDG_TOPLEVEL_WM_CAPABILITIES_MINIMIZE = 8;
}

abstract class enum_wlr_xdg_toplevel_configure_field {
  static const int WLR_XDG_TOPLEVEL_CONFIGURE_BOUNDS = 1;
  static const int WLR_XDG_TOPLEVEL_CONFIGURE_WM_CAPABILITIES = 2;
}

class struct_wlr_xdg_surface_configure extends ffi.Struct {
  external ffi.Pointer<struct_wlr_xdg_surface> surface;

  external struct_wl_list link;

  @ffi.Uint32()
  external int serial;

  external UnnamedUnion3 unnamed;
}

class UnnamedUnion3 extends ffi.Union {
  external ffi.Pointer<struct_wlr_xdg_toplevel_configure> toplevel_configure;

  external ffi.Pointer<struct_wlr_xdg_popup_configure> popup_configure;
}

class struct_wlr_xdg_toplevel_move_event extends ffi.Struct {
  external ffi.Pointer<struct_wlr_xdg_toplevel> toplevel;

  external ffi.Pointer<struct_wlr_seat_client> seat;

  @ffi.Uint32()
  external int serial;
}

class struct_wlr_xdg_toplevel_resize_event extends ffi.Struct {
  external ffi.Pointer<struct_wlr_xdg_toplevel> toplevel;

  external ffi.Pointer<struct_wlr_seat_client> seat;

  @ffi.Uint32()
  external int serial;

  @ffi.Uint32()
  external int edges;
}

class struct_wlr_xdg_toplevel_show_window_menu_event extends ffi.Struct {
  external ffi.Pointer<struct_wlr_xdg_toplevel> toplevel;

  external ffi.Pointer<struct_wlr_seat_client> seat;

  @ffi.Uint32()
  external int serial;

  @ffi.Int32()
  external int x;

  @ffi.Int32()
  external int y;
}

abstract class enum_wlr_edges {
  static const int WLR_EDGE_NONE = 0;
  static const int WLR_EDGE_TOP = 1;
  static const int WLR_EDGE_BOTTOM = 2;
  static const int WLR_EDGE_LEFT = 4;
  static const int WLR_EDGE_RIGHT = 8;
}

abstract class enum_wb_image_error_type {
  static const int image_error_type_none = 0;
  static const int image_error_type_image_not_found = 1;
  static const int image_error_type_image_load_failed = 2;
}

abstract class enum_wb_event_type {
  static const int event_type_monitor_new = 0;
  static const int event_type_monitor_remove = 1;
  static const int event_type_monitor_frame = 2;
  static const int event_type_window_new = 3;
  static const int event_type_window_destroy = 4;
  static const int event_type_window_map = 5;
  static const int event_type_window_unmap = 6;
  static const int event_type_window_new_popup = 7;
  static const int event_type_window_commit = 8;
  static const int event_type_window_request_move = 9;
  static const int event_type_window_request_resize = 10;
  static const int event_type_window_request_maximize = 11;
  static const int event_type_window_request_minimize = 12;
  static const int event_type_window_request_fullscreen = 13;
  static const int event_type_window_request_show_window_menu = 14;
  static const int event_type_window_set_title = 15;
  static const int event_type_window_set_app_id = 16;
  static const int event_type_window_set_parent = 17;
  static const int event_type_input_new = 18;
  static const int event_type_pointer_remove = 19;
  static const int event_type_pointer_relative_move = 20;
  static const int event_type_pointer_absolute_move = 21;
  static const int event_type_pointer_button = 22;
  static const int event_type_pointer_axis = 23;
  static const int event_type_keyboard_remove = 24;
  static const int event_type_keyboard_key = 25;
  static const int event_type_keyboard_modifiers = 26;
  static const int event_type_cursor_image = 27;
  static const int event_type_image_destroy = 28;
  static const int event_type_image_load = 29;
}

class struct_waybright_renderer extends ffi.Struct {
  external ffi.Pointer<struct_wlr_output> wlr_output;

  external ffi.Pointer<struct_wlr_renderer> wlr_renderer;
}

class struct_waybright_image_event extends ffi.Struct {
  external ffi.Pointer<struct_waybright_image> wb_image;

  external ffi.Pointer<ffi.Void> event;
}

class struct_waybright_image extends ffi.Struct {
  external ffi.Pointer<struct_wlr_surface> wlr_surface;

  external ffi.Pointer<struct_wlr_texture> wlr_texture;

  @ffi.Bool()
  external bool is_loaded;

  external ffi.Pointer<ffi.Char> path;

  external UnnamedStruct33 listeners;

  @ffi.Int()
  external int width;

  @ffi.Int()
  external int height;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int type, ffi.Pointer<ffi.Void> data)>>
      handle_event;
}

class UnnamedStruct33 extends ffi.Struct {
  external struct_wl_listener load;

  external struct_wl_listener destroy;
}

class struct_waybright_monitor extends ffi.Struct {
  external ffi.Pointer<struct_waybright> wb;

  external ffi.Pointer<struct_waybright_renderer> wb_renderer;

  external ffi.Pointer<struct_wlr_output> wlr_output;

  external UnnamedStruct35 listeners;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int type, ffi.Pointer<ffi.Void> data)>>
      handle_event;
}

class struct_waybright extends ffi.Struct {
  external ffi.Pointer<struct_wl_display> wl_display;

  external ffi.Pointer<struct_wlr_backend> wlr_backend;

  external ffi.Pointer<struct_wlr_renderer> wlr_renderer;

  external ffi.Pointer<struct_wlr_allocator> wlr_allocator;

  external ffi.Pointer<struct_wlr_compositor> wlr_compositor;

  external ffi.Pointer<struct_wlr_xdg_shell> wlr_xdg_shell;

  external ffi.Pointer<struct_wlr_seat> wlr_seat;

  external ffi.Pointer<struct_wl_event_loop> wl_event_loop;

  @ffi.Uint32()
  external int last_pointer_button_serial;

  external ffi.Pointer<ffi.Char> socket_name;

  external ffi.Pointer<ffi.Char> socket_path;

  external UnnamedStruct34 listeners;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int type, ffi.Pointer<ffi.Void> data)>>
      handle_event;
}

class struct_wl_event_loop extends ffi.Opaque {}

class UnnamedStruct34 extends ffi.Struct {
  external struct_wl_listener monitor_new;

  external struct_wl_listener new_xdg_surface;

  external struct_wl_listener input_new;

  external struct_wl_listener cursor_image;
}

class UnnamedStruct35 extends ffi.Struct {
  external struct_wl_listener destroy;

  external struct_wl_listener frame;
}

class struct_waybright_window_event extends ffi.Struct {
  external ffi.Pointer<struct_waybright_window> wb_window;

  external ffi.Pointer<ffi.Void> event;
}

class struct_waybright_window extends ffi.Struct {
  external ffi.Pointer<struct_waybright> wb;

  external ffi.Pointer<struct_wlr_xdg_surface> wlr_xdg_surface;

  external ffi.Pointer<struct_wlr_xdg_toplevel> wlr_xdg_toplevel;

  external ffi.Pointer<struct_wlr_xdg_popup> wlr_xdg_popup;

  external ffi.Pointer<struct_waybright_subwindow_tree> subwindow_tree;

  external UnnamedStruct38 listeners;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int type, ffi.Pointer<ffi.Void> data)>>
      handle_event;
}

class struct_waybright_subwindow_tree extends ffi.Struct {
  external ffi.Pointer<struct_waybright> wb;

  external ffi.Pointer<struct_waybright_subwindow> wb_subwindow;

  external ffi.Pointer<struct_waybright_subwindow_tree> parent;

  external ffi.Pointer<struct_wlr_surface> wlr_surface;

  external struct_wl_list wb_subwindow_children;

  external UnnamedStruct37 listeners;
}

class struct_waybright_subwindow extends ffi.Struct {
  external ffi.Pointer<struct_waybright> wb;

  external ffi.Pointer<struct_waybright_subwindow_tree> parent;

  external ffi.Pointer<struct_waybright_subwindow_tree> child;

  external ffi.Pointer<struct_wlr_subsurface> wlr_subsurface;

  external struct_wl_list link;

  external UnnamedStruct36 listeners;
}

class UnnamedStruct36 extends ffi.Struct {
  external struct_wl_listener map;

  external struct_wl_listener unmap;

  external struct_wl_listener destroy;
}

class UnnamedStruct37 extends ffi.Struct {
  external struct_wl_listener new_subsurface;

  external struct_wl_listener destroy;

  external struct_wl_listener commit;
}

class UnnamedStruct38 extends ffi.Struct {
  external struct_wl_listener destroy;

  external struct_wl_listener map;

  external struct_wl_listener unmap;

  external struct_wl_listener new_popup;

  external struct_wl_listener new_subsurface;

  external struct_wl_listener commit;

  external struct_wl_listener request_move;

  external struct_wl_listener request_maximize;

  external struct_wl_listener request_minimize;

  external struct_wl_listener request_fullscreen;

  external struct_wl_listener request_show_window_menu;

  external struct_wl_listener request_resize;

  external struct_wl_listener set_title;

  external struct_wl_listener set_app_id;

  external struct_wl_listener set_parent;
}

class struct_waybright_input extends ffi.Struct {
  external ffi.Pointer<struct_waybright> wb;

  external ffi.Pointer<struct_wlr_input_device> wlr_input_device;

  external ffi.Pointer<struct_waybright_pointer> pointer;

  external ffi.Pointer<struct_waybright_keyboard> keyboard;
}

class struct_waybright_pointer extends ffi.Struct {
  external ffi.Pointer<struct_waybright> wb;

  external ffi.Pointer<struct_waybright_input> wb_input;

  external ffi.Pointer<struct_wlr_pointer> wlr_pointer;

  @ffi.Double()
  external double x;

  @ffi.Double()
  external double y;

  external UnnamedStruct39 listeners;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int type, ffi.Pointer<ffi.Void> data)>>
      handle_event;
}

class UnnamedStruct39 extends ffi.Struct {
  external struct_wl_listener destroy;

  external struct_wl_listener relative_move;

  external struct_wl_listener absolute_move;

  external struct_wl_listener button;

  external struct_wl_listener axis;

  external struct_wl_listener frame;
}

class struct_waybright_keyboard extends ffi.Struct {
  external ffi.Pointer<struct_waybright> wb;

  external ffi.Pointer<struct_waybright_input> wb_input;

  external ffi.Pointer<struct_wlr_keyboard> wlr_keyboard;

  external UnnamedStruct40 listeners;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int type, ffi.Pointer<ffi.Void> data)>>
      handle_event;
}

class UnnamedStruct40 extends ffi.Struct {
  external struct_wl_listener destroy;

  external struct_wl_listener key;

  external struct_wl_listener modifiers;
}

class struct_waybright_pointer_event extends ffi.Struct {
  external ffi.Pointer<struct_waybright_pointer> wb_pointer;

  external ffi.Pointer<ffi.Void> event;
}

class struct_waybright_keyboard_event extends ffi.Struct {
  external ffi.Pointer<struct_waybright_keyboard> wb_keyboard;

  external ffi.Pointer<ffi.Void> event;
}
